
var A;
var X;
var BP;
var RAM = [];

function loadi       (n) { A = n; }

function load        (n) { A = RAM[n]; }
function store       (n) { RAM[n] = A; }

function add         (n) { A += RAM[n]; }
function subtract    (n) { A -= RAM[n]; }
function multiply    (n) { A *= RAM[n]; }
function divide      (n) { A = (A / RAM[n]) | 0; }

function loadx       ()  { X = A; }
function movebp      (n) { BP += n; }

function less        ()  { return A > 0; }
function greater     ()  { return A < 0; }
function equals      ()  { return A == 0; }
function notequals   ()  { return A != 0; }
function always      ()  { return true; }

var global;

                                                            // #ifndef VC_IDE
                                                            // #line 2 "globals.h"
                                                            // #endif
                                                            // 
                                                            // enum {
                                                            //     False = 0,
                                                            //     True = 1
                                                            // };
                                                            // 
                                                            // enum {
                                                            //     Str_size = 256,
                                                            //     Source_buffer_length = 1048576
                                                            // };
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "stringlib.h"
                                                            // #endif
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // write(char str[]) {
function write
(){
                                             write_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            // 	while (str[i] != 0) {
                                             while_0_end: {
while_0_test: while(true) {
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                                             compare_1_false: {
                                             compare_1_true: {
                        if(notequals())   break compare_1_true;
                        loadi             (0);
                        if(always())      break compare_1_false;
} // compare_1_true:
                        loadi             (1);
} // compare_1_false:
                        if(equals())      break while_0_end;
                                                            // 		fputc(str[i], stdout);
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        printCharCodeToStdout (A);
                                                            // 		i = i + 1;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (1+BP);
                                                            // 	}
                                                            // }
                        if(always())      continue while_0_test;
                                             break; } // while_0_test:
} // while_0_end:
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // writeln(char str[]) {
} // write_end:
return;    }
function writeln
(){
                                             writeln_end: {
                                                            // 	write(str);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            // 	fputc('\n', stdout);
                        loadi             (10);
                        printCharCodeToStdout (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // write_stderr(char str[]) {
} // writeln_end:
return;    }
function write_stderr
(){
                                             write_stderr_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            // 	while (str[i] != 0) {
                                             while_2_end: {
while_2_test: while(true) {
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                                             compare_3_false: {
                                             compare_3_true: {
                        if(notequals())   break compare_3_true;
                        loadi             (0);
                        if(always())      break compare_3_false;
} // compare_3_true:
                        loadi             (1);
} // compare_3_false:
                        if(equals())      break while_2_end;
                                                            // 		fputc(str[i], stderr);
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        printCharCodeToStderr (A);
                                                            // 		i = i + 1;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (1+BP);
                                                            // 	}
                                                            // }
                        if(always())      continue while_2_test;
                                             break; } // while_2_test:
} // while_2_end:
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // writeln_stderr(char str[]) {
} // write_stderr_end:
return;    }
function writeln_stderr
(){
                                             writeln_stderr_end: {
                                                            // 	write_stderr(str);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        write_stderr();   
                        movebp            (-9);
                                                            // 	fputc('\n', stderr);
                        loadi             (10);
                        printCharCodeToStderr (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // readln(char line[], int max_chars) {
} // writeln_stderr_end:
return;    }
function readln
(){
                                             readln_end: {
                                                            //     int i;
                                                            //     int c;
                                                            // 
                                                            //     i = 0;
                        loadi             (0);
                        store             (2+BP);
                                                            //     c = 0;
                        loadi             (0);
                        store             (3+BP);
                                                            //     line[i] = 0;
                        load              (2+BP);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (4+BP);
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (X);
                                                            //     while (i < max_chars && c != '\n' && c != -1) {
                                             while_4_end: {
while_4_test: while(true) {
                        load              (2+BP);
                        store             (4+BP);
                        load              (1+BP);
                        subtract          (4+BP);
                                             compare_5_false: {
                                             compare_5_true: {
                        if(less())        break compare_5_true;
                        loadi             (0);
                        if(always())      break compare_5_false;
} // compare_5_true:
                        loadi             (1);
} // compare_5_false:
                                             logical_and_6_true: {
                                             logical_and_6_false: {
                        if(equals())      break logical_and_6_false;
                        load              (3+BP);
                        store             (4+BP);
                        loadi             (10);
                        subtract          (4+BP);
                                             compare_7_false: {
                                             compare_7_true: {
                        if(notequals())   break compare_7_true;
                        loadi             (0);
                        if(always())      break compare_7_false;
} // compare_7_true:
                        loadi             (1);
} // compare_7_false:
                        if(equals())      break logical_and_6_false;
                        load              (3+BP);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                        subtract          (4+BP);
                                             compare_8_false: {
                                             compare_8_true: {
                        if(notequals())   break compare_8_true;
                        loadi             (0);
                        if(always())      break compare_8_false;
} // compare_8_true:
                        loadi             (1);
} // compare_8_false:
                        if(equals())      break logical_and_6_false;
                        loadi             (1);
                        if(always())      break logical_and_6_true;
} // logical_and_6_false:
                        loadi             (0);
} // logical_and_6_true:
                        if(equals())      break while_4_end;
                                                            //         c = fgetc(stdin);
                        A=readCharCodeFromStdin ();
                        store             (3+BP);
                                                            //         if (c != -1 && c != '\r') {
                        load              (3+BP);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                        subtract          (4+BP);
                                             compare_9_false: {
                                             compare_9_true: {
                        if(notequals())   break compare_9_true;
                        loadi             (0);
                        if(always())      break compare_9_false;
} // compare_9_true:
                        loadi             (1);
} // compare_9_false:
                                             logical_and_10_true: {
                                             logical_and_10_false: {
                        if(equals())      break logical_and_10_false;
                        load              (3+BP);
                        store             (4+BP);
                        loadi             (13);
                        subtract          (4+BP);
                                             compare_11_false: {
                                             compare_11_true: {
                        if(notequals())   break compare_11_true;
                        loadi             (0);
                        if(always())      break compare_11_false;
} // compare_11_true:
                        loadi             (1);
} // compare_11_false:
                        if(equals())      break logical_and_10_false;
                        loadi             (1);
                        if(always())      break logical_and_10_true;
} // logical_and_10_false:
                        loadi             (0);
} // logical_and_10_true:
                                             if_12_end: {
                                             if_12_next: {
                        if(equals())      break if_12_next;
                                                            //             line[i] = c;
                        load              (2+BP);
                        store             (4+BP);
                        load              (3+BP);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (4+BP);
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (X);
                                                            //             line[i + 1] = 0;
                        load              (2+BP);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (4+BP);
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (X);
                                                            //             i = i + 1;
                        load              (2+BP);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (2+BP);
                                                            //         }
                                                            //     }
} // if_12_next:
} // if_12_end:
                                                            //     return i;
                        if(always())      continue while_4_test;
                                             break; } // while_4_test:
} // while_4_end:
                        load              (2+BP);
                        if(always())      break readln_end;
                                                            // }
                                                            // // ---------------------------------------------------------------------------
                                                            // starts_with(char str[], char with_str[]) {
} // readln_end:
return;    }
function starts_with
(){
                                             starts_with_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (2+BP);
                                                            // 	while (str[i] != 0 && str[i] == with_str[i]) {
                                             while_13_end: {
while_13_test: while(true) {
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_14_false: {
                                             compare_14_true: {
                        if(notequals())   break compare_14_true;
                        loadi             (0);
                        if(always())      break compare_14_false;
} // compare_14_true:
                        loadi             (1);
} // compare_14_false:
                                             logical_and_15_true: {
                                             logical_and_15_false: {
                        if(equals())      break logical_and_15_false;
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (X);
                        subtract          (3+BP);
                                             compare_16_false: {
                                             compare_16_true: {
                        if(equals())      break compare_16_true;
                        loadi             (0);
                        if(always())      break compare_16_false;
} // compare_16_true:
                        loadi             (1);
} // compare_16_false:
                        if(equals())      break logical_and_15_false;
                        loadi             (1);
                        if(always())      break logical_and_15_true;
} // logical_and_15_false:
                        loadi             (0);
} // logical_and_15_true:
                        if(equals())      break while_13_end;
                                                            // 		i = i + 1;
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (2+BP);
                                                            //     }
                                                            // 
                                                            //     if (with_str[i] == 0) {
                        if(always())      continue while_13_test;
                                             break; } // while_13_test:
} // while_13_end:
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (1+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_17_false: {
                                             compare_17_true: {
                        if(equals())      break compare_17_true;
                        loadi             (0);
                        if(always())      break compare_17_false;
} // compare_17_true:
                        loadi             (1);
} // compare_17_false:
                                             if_18_end: {
                                             if_18_next: {
                        if(equals())      break if_18_next;
                                                            // 	    return True;
                        loadi             (1);
                        if(always())      break starts_with_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_18_next:
} // if_18_end:
                        loadi             (0);
                        if(always())      break starts_with_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // str_equals(char str1[], char str2[]) {
} // starts_with_end:
return;    }
function str_equals
(){
                                             str_equals_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (2+BP);
                                                            // 	while (str1[i] == str2[i]) {
                                             while_19_end: {
while_19_test: while(true) {
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (X);
                        subtract          (3+BP);
                                             compare_20_false: {
                                             compare_20_true: {
                        if(equals())      break compare_20_true;
                        loadi             (0);
                        if(always())      break compare_20_false;
} // compare_20_true:
                        loadi             (1);
} // compare_20_false:
                        if(equals())      break while_19_end;
                                                            // 		if (str1[i] == 0 && str2[i] == 0) {
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_21_false: {
                                             compare_21_true: {
                        if(equals())      break compare_21_true;
                        loadi             (0);
                        if(always())      break compare_21_false;
} // compare_21_true:
                        loadi             (1);
} // compare_21_false:
                                             logical_and_22_true: {
                                             logical_and_22_false: {
                        if(equals())      break logical_and_22_false;
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (1+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_23_false: {
                                             compare_23_true: {
                        if(equals())      break compare_23_true;
                        loadi             (0);
                        if(always())      break compare_23_false;
} // compare_23_true:
                        loadi             (1);
} // compare_23_false:
                        if(equals())      break logical_and_22_false;
                        loadi             (1);
                        if(always())      break logical_and_22_true;
} // logical_and_22_false:
                        loadi             (0);
} // logical_and_22_true:
                                             if_24_end: {
                                             if_24_next: {
                        if(equals())      break if_24_next;
                                                            // 			return True;
                        loadi             (1);
                        if(always())      break str_equals_end;
                                                            //         }
                                                            // 		if (str1[i] == 0 || str2[i] == 0) {
} // if_24_next:
} // if_24_end:
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_25_false: {
                                             compare_25_true: {
                        if(equals())      break compare_25_true;
                        loadi             (0);
                        if(always())      break compare_25_false;
} // compare_25_true:
                        loadi             (1);
} // compare_25_false:
                                             logical_or_26_false: {
                                             logical_or_26_true: {
                        if(notequals())   break logical_or_26_true;
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (1+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_27_false: {
                                             compare_27_true: {
                        if(equals())      break compare_27_true;
                        loadi             (0);
                        if(always())      break compare_27_false;
} // compare_27_true:
                        loadi             (1);
} // compare_27_false:
                        if(notequals())   break logical_or_26_true;
                        loadi             (0);
                        if(always())      break logical_or_26_false;
} // logical_or_26_true:
                        loadi             (1);
} // logical_or_26_false:
                                             if_28_end: {
                                             if_28_next: {
                        if(equals())      break if_28_next;
                                                            // 			return False;
                        loadi             (0);
                        if(always())      break str_equals_end;
                                                            //         }
                                                            // 		i = i + 1;
} // if_28_next:
} // if_28_end:
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (2+BP);
                                                            // 	}
                                                            // 
                                                            // 	return False;
                        if(always())      continue while_19_test;
                                             break; } // while_19_test:
} // while_19_end:
                        loadi             (0);
                        if(always())      break str_equals_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // copy_pos(char dest[], char src[], int dest_pos, int src_pos) {
} // str_equals_end:
return;    }
function copy_pos
(){
                                             copy_pos_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (4+BP);
                                                            // 	while (src[i + src_pos] != 0) {
                                             while_29_end: {
while_29_test: while(true) {
                        load              (4+BP);
                        store             (5+BP);
                        load              (3+BP);
                        add               (5+BP);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (1+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_30_false: {
                                             compare_30_true: {
                        if(notequals())   break compare_30_true;
                        loadi             (0);
                        if(always())      break compare_30_false;
} // compare_30_true:
                        loadi             (1);
} // compare_30_false:
                        if(equals())      break while_29_end;
                                                            // 		dest[i + dest_pos] = src[i + src_pos];
                        load              (4+BP);
                        store             (5+BP);
                        load              (2+BP);
                        add               (5+BP);
                        store             (5+BP);
                        load              (4+BP);
                        store             (6+BP);
                        load              (3+BP);
                        add               (6+BP);
                        loadx             ();
                        loadi             (X);
                        store             (6+BP);
                        load              (1+BP);
                        add               (6+BP);
                        loadx             ();
                        load              (X);
                        store             (6+BP);
                        load              (5+BP);
                        loadx             ();
                        load              (6+BP);
                        store             (5+BP);
                        loadi             (X);
                        store             (6+BP);
                        load              (0+BP);
                        add               (6+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (X);
                                                            // 		i = i + 1;
                        load              (4+BP);
                        store             (5+BP);
                        loadi             (1);
                        add               (5+BP);
                        store             (4+BP);
                                                            // 	}
                                                            // 
                                                            // 	dest[i + dest_pos] = 0;
                        if(always())      continue while_29_test;
                                             break; } // while_29_test:
} // while_29_end:
                        load              (4+BP);
                        store             (5+BP);
                        load              (2+BP);
                        add               (5+BP);
                        store             (5+BP);
                        loadi             (0);
                        store             (6+BP);
                        load              (5+BP);
                        loadx             ();
                        load              (6+BP);
                        store             (5+BP);
                        loadi             (X);
                        store             (6+BP);
                        load              (0+BP);
                        add               (6+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (X);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // copy(char dest[], char src[]) {
} // copy_pos_end:
return;    }
function copy
(){
                                             copy_end: {
                                                            // 
                                                            //     copy_pos(dest, src, 0, 0);
                        load              (0+BP);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (0);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy_pos();       
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // copy_from(char dest[], char src[], int src_pos) {
} // copy_end:
return;    }
function copy_from
(){
                                             copy_from_end: {
                                                            // 
                                                            //     copy_pos(dest, src, 0, src_pos);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (2+BP);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy_pos();       
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // copy_to(char dest[], char src[], int dest_pos) {
} // copy_from_end:
return;    }
function copy_to
(){
                                             copy_to_end: {
                                                            // 
                                                            //     copy_pos(dest, src, dest_pos, 0);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (2+BP);
                        store             (5+BP);
                        loadi             (0);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy_pos();       
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // append(char dest[], char src[]) {
} // copy_to_end:
return;    }
function append
(){
                                             append_end: {
                                                            //     int dest_length;
                                                            // 
                                                            //     dest_length = length(dest);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        length();         
                        movebp            (-10);
                        store             (2+BP);
                                                            //     copy_to(dest, src, dest_length);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy_to();        
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // append_char(char dest[], int c) {
} // append_end:
return;    }
function append_char
(){
                                             append_char_end: {
                                                            //     char s[2];
                                                            // 
                                                            //     s[0] = c;
                        loadi             (0);
                        store             (4+BP);
                        load              (1+BP);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (2+BP+X);
                                                            //     s[1] = 0;
                        loadi             (1);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (2+BP+X);
                                                            //     append(dest, s);
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        append();         
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // fill_until_col(char str[], int col) {
} // append_char_end:
return;    }
function fill_until_col
(){
                                             fill_until_col_end: {
                                                            // 	int i;
                                                            // 
                                                            //     i = length(str);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        length();         
                        movebp            (-10);
                        store             (2+BP);
                                                            // 	while (i < col) {
                                             while_31_end: {
while_31_test: while(true) {
                        load              (2+BP);
                        store             (3+BP);
                        load              (1+BP);
                        subtract          (3+BP);
                                             compare_32_false: {
                                             compare_32_true: {
                        if(less())        break compare_32_true;
                        loadi             (0);
                        if(always())      break compare_32_false;
} // compare_32_true:
                        loadi             (1);
} // compare_32_false:
                        if(equals())      break while_31_end;
                                                            //         str[i] = ' ';
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (32);
                        store             (4+BP);
                        load              (3+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (3+BP);
                        loadi             (X);
                        store             (4+BP);
                        load              (0+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (3+BP);
                        store             (X);
                                                            //         i = i + 1;
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (2+BP);
                                                            //     }
                                                            // 
                                                            //     str[i] = 0;
                        if(always())      continue while_31_test;
                                             break; } // while_31_test:
} // while_31_end:
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (0);
                        store             (4+BP);
                        load              (3+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (3+BP);
                        loadi             (X);
                        store             (4+BP);
                        load              (0+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (3+BP);
                        store             (X);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // contains(char str[], char substr[]) {
} // fill_until_col_end:
return;    }
function contains
(){
                                             contains_end: {
                                                            // 	int i;
                                                            // 	int j;
                                                            // 	int k;
                                                            // 
                                                            // 	if(substr[0] == 0) {
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (1+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_33_false: {
                                             compare_33_true: {
                        if(equals())      break compare_33_true;
                        loadi             (0);
                        if(always())      break compare_33_false;
} // compare_33_true:
                        loadi             (1);
} // compare_33_false:
                                             if_34_end: {
                                             if_34_next: {
                        if(equals())      break if_34_next;
                                                            // 		return True;
                        loadi             (1);
                        if(always())      break contains_end;
                                                            //     }
                                                            // 
                                                            // 	i = 0;
} // if_34_next:
} // if_34_end:
                        loadi             (0);
                        store             (2+BP);
                                                            // 	while (str[i] != 0) {
                                             while_35_end: {
while_35_test: while(true) {
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_36_false: {
                                             compare_36_true: {
                        if(notequals())   break compare_36_true;
                        loadi             (0);
                        if(always())      break compare_36_false;
} // compare_36_true:
                        loadi             (1);
} // compare_36_false:
                        if(equals())      break while_35_end;
                                                            // 		j = i;
                        load              (2+BP);
                        store             (3+BP);
                                                            // 		k = 0;
                        loadi             (0);
                        store             (4+BP);
                                                            // 		while (str[j] == substr[k]) {
                                             while_37_end: {
while_37_test: while(true) {
                        load              (3+BP);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        loadi             (X);
                        store             (6+BP);
                        load              (1+BP);
                        add               (6+BP);
                        loadx             ();
                        load              (X);
                        subtract          (5+BP);
                                             compare_38_false: {
                                             compare_38_true: {
                        if(equals())      break compare_38_true;
                        loadi             (0);
                        if(always())      break compare_38_false;
} // compare_38_true:
                        loadi             (1);
} // compare_38_false:
                        if(equals())      break while_37_end;
                                                            // 			j = j + 1;
                        load              (3+BP);
                        store             (5+BP);
                        loadi             (1);
                        add               (5+BP);
                        store             (3+BP);
                                                            // 			k = k + 1;
                        load              (4+BP);
                        store             (5+BP);
                        loadi             (1);
                        add               (5+BP);
                        store             (4+BP);
                                                            // 			if (substr[k] == 0) {
                        load              (4+BP);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (1+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_39_false: {
                                             compare_39_true: {
                        if(equals())      break compare_39_true;
                        loadi             (0);
                        if(always())      break compare_39_false;
} // compare_39_true:
                        loadi             (1);
} // compare_39_false:
                                             if_40_end: {
                                             if_40_next: {
                        if(equals())      break if_40_next;
                                                            // 				return True;
                        loadi             (1);
                        if(always())      break contains_end;
                                                            //             }
                                                            // 		}
} // if_40_next:
} // if_40_end:
                                                            // 		i = i + 1;
                        if(always())      continue while_37_test;
                                             break; } // while_37_test:
} // while_37_end:
                        load              (2+BP);
                        store             (5+BP);
                        loadi             (1);
                        add               (5+BP);
                        store             (2+BP);
                                                            // 	}
                                                            // 
                                                            // 	return False;
                        if(always())      continue while_35_test;
                                             break; } // while_35_test:
} // while_35_end:
                        loadi             (0);
                        if(always())      break contains_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // contains_char(char str[], int c) {
} // contains_end:
return;    }
function contains_char
(){
                                             contains_char_end: {
                                                            //     char s[2];
                                                            // 
                                                            //     s[0] = c;
                        loadi             (0);
                        store             (4+BP);
                        load              (1+BP);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (2+BP+X);
                                                            //     s[1] = 0;
                        loadi             (1);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (2+BP+X);
                                                            //     return contains(str, s);
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        contains();       
                        movebp            (-12);
                        if(always())      break contains_char_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // length(char str[]) {
} // contains_char_end:
return;    }
function length
(){
                                             length_end: {
                                                            // 	int i;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            // 	while (str[i] != 0) {
                                             while_41_end: {
while_41_test: while(true) {
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                                             compare_42_false: {
                                             compare_42_true: {
                        if(notequals())   break compare_42_true;
                        loadi             (0);
                        if(always())      break compare_42_false;
} // compare_42_true:
                        loadi             (1);
} // compare_42_false:
                        if(equals())      break while_41_end;
                                                            // 		i = i + 1;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (1+BP);
                                                            //     }
                                                            // 
                                                            // 	return i;
                        if(always())      continue while_41_test;
                                             break; } // while_41_test:
} // while_41_end:
                        load              (1+BP);
                        if(always())      break length_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // str_to_int(char str[]) {
} // length_end:
return;    }
function str_to_int
(){
                                             str_to_int_end: {
                                                            // 	int i;
                                                            // 	int n;
                                                            // 
                                                            // 	i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            // 	n = 0;
                        loadi             (0);
                        store             (2+BP);
                                                            // 	while (str[i] != 0) {
                                             while_43_end: {
while_43_test: while(true) {
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_44_false: {
                                             compare_44_true: {
                        if(notequals())   break compare_44_true;
                        loadi             (0);
                        if(always())      break compare_44_false;
} // compare_44_true:
                        loadi             (1);
} // compare_44_false:
                        if(equals())      break while_43_end;
                                                            // 		n = n * 10 + (str[i] - '0');
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (10);
                        multiply          (3+BP);
                        store             (3+BP);
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (4+BP);
                        load              (0+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (X);
                        store             (4+BP);
                        loadi             (48);
                        store             (5+BP);
                        load              (4+BP);
                        subtract          (5+BP);
                        add               (3+BP);
                        store             (2+BP);
                                                            // 		i = i + 1;
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (1+BP);
                                                            // 	}
                                                            // 
                                                            // 	return n;
                        if(always())      continue while_43_test;
                                             break; } // while_43_test:
} // while_43_end:
                        load              (2+BP);
                        if(always())      break str_to_int_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // int_to_str(int n, char str[]) {
} // str_to_int_end:
return;    }
function int_to_str
(){
                                             int_to_str_end: {
                                                            //     int pos;
                                                            //     int endpos;
                                                            // 	int n_mod_10;
                                                            //     int absn;
                                                            //     char tmp_str[Str_size];
                                                            // 
                                                            //     absn = n;
                        load              (0+BP);
                        store             (5+BP);
                                                            //     if (absn < 0) {
                        load              (5+BP);
                        store             (262+BP);
                        loadi             (0);
                        subtract          (262+BP);
                                             compare_45_false: {
                                             compare_45_true: {
                        if(less())        break compare_45_true;
                        loadi             (0);
                        if(always())      break compare_45_false;
} // compare_45_true:
                        loadi             (1);
} // compare_45_false:
                                             if_46_end: {
                                             if_46_next: {
                        if(equals())      break if_46_next;
                                                            //         absn = -absn;
                        load              (5+BP);
                        store             (262+BP);
                        loadi             (0);
                        subtract          (262+BP);
                        store             (5+BP);
                                                            //     }
                                                            // 
                                                            //     pos = Str_size - 1;
} // if_46_next:
} // if_46_end:
                        loadi             (256);
                        store             (262+BP);
                        loadi             (1);
                        store             (263+BP);
                        load              (262+BP);
                        subtract          (263+BP);
                        store             (2+BP);
                                                            //     tmp_str[pos] = 0;
                        load              (2+BP);
                        store             (262+BP);
                        loadi             (0);
                        store             (263+BP);
                        load              (262+BP);
                        loadx             ();
                        load              (263+BP);
                        store             (6+BP+X);
                                                            //     endpos = pos;
                        load              (2+BP);
                        store             (3+BP);
                                                            // 	while (pos == endpos || absn != 0) {
                                             while_47_end: {
while_47_test: while(true) {
                        load              (2+BP);
                        store             (262+BP);
                        load              (3+BP);
                        subtract          (262+BP);
                                             compare_48_false: {
                                             compare_48_true: {
                        if(equals())      break compare_48_true;
                        loadi             (0);
                        if(always())      break compare_48_false;
} // compare_48_true:
                        loadi             (1);
} // compare_48_false:
                                             logical_or_49_false: {
                                             logical_or_49_true: {
                        if(notequals())   break logical_or_49_true;
                        load              (5+BP);
                        store             (262+BP);
                        loadi             (0);
                        subtract          (262+BP);
                                             compare_50_false: {
                                             compare_50_true: {
                        if(notequals())   break compare_50_true;
                        loadi             (0);
                        if(always())      break compare_50_false;
} // compare_50_true:
                        loadi             (1);
} // compare_50_false:
                        if(notequals())   break logical_or_49_true;
                        loadi             (0);
                        if(always())      break logical_or_49_false;
} // logical_or_49_true:
                        loadi             (1);
} // logical_or_49_false:
                        if(equals())      break while_47_end;
                                                            // 		n_mod_10 = absn - (10 * ( absn / 10));
                        load              (5+BP);
                        store             (262+BP);
                        loadi             (10);
                        store             (263+BP);
                        load              (5+BP);
                        store             (264+BP);
                        loadi             (10);
                        store             (265+BP);
                        load              (264+BP);
                        divide            (265+BP);
                        multiply          (263+BP);
                        store             (263+BP);
                        load              (262+BP);
                        subtract          (263+BP);
                        store             (4+BP);
                                                            // 		pos = pos - 1;
                        load              (2+BP);
                        store             (262+BP);
                        loadi             (1);
                        store             (263+BP);
                        load              (262+BP);
                        subtract          (263+BP);
                        store             (2+BP);
                                                            // 		tmp_str[pos] = '0' + n_mod_10;
                        load              (2+BP);
                        store             (262+BP);
                        loadi             (48);
                        store             (263+BP);
                        load              (4+BP);
                        add               (263+BP);
                        store             (263+BP);
                        load              (262+BP);
                        loadx             ();
                        load              (263+BP);
                        store             (6+BP+X);
                                                            // 		absn = absn / 10;
                        load              (5+BP);
                        store             (262+BP);
                        loadi             (10);
                        store             (263+BP);
                        load              (262+BP);
                        divide            (263+BP);
                        store             (5+BP);
                                                            // 	}
                                                            // 
                                                            //     if (n < 0) {
                        if(always())      continue while_47_test;
                                             break; } // while_47_test:
} // while_47_end:
                        load              (0+BP);
                        store             (262+BP);
                        loadi             (0);
                        subtract          (262+BP);
                                             compare_51_false: {
                                             compare_51_true: {
                        if(less())        break compare_51_true;
                        loadi             (0);
                        if(always())      break compare_51_false;
} // compare_51_true:
                        loadi             (1);
} // compare_51_false:
                                             if_52_end: {
                                             if_52_next: {
                        if(equals())      break if_52_next;
                                                            // 		pos = pos - 1;
                        load              (2+BP);
                        store             (262+BP);
                        loadi             (1);
                        store             (263+BP);
                        load              (262+BP);
                        subtract          (263+BP);
                        store             (2+BP);
                                                            //         tmp_str[pos] = '-';
                        load              (2+BP);
                        store             (262+BP);
                        loadi             (45);
                        store             (263+BP);
                        load              (262+BP);
                        loadx             ();
                        load              (263+BP);
                        store             (6+BP+X);
                                                            //     }
                                                            // 
                                                            //     copy_from(str, tmp_str, pos);
} // if_52_next:
} // if_52_end:
                        load              (1+BP);
                        store             (262+BP);
                        loadi             (6+BP);
                        store             (263+BP);
                        load              (2+BP);
                        store             (264+BP);
                        load              (264+BP);
                        store             (273+BP);
                        load              (263+BP);
                        store             (272+BP);
                        load              (262+BP);
                        store             (271+BP);
                        movebp            (271);
                        copy_from();      
                        movebp            (-271);
                                                            // }
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "errormessages.h"
                                                            // #endif
                                                            // 
                                                            // int error_line_no;
} // int_to_str_end:
return;    }
                                                            // int error_line_pos;
                                                            // 
                                                            // char error_file_name[Str_size];
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_set_line(int line_no, int line_pos) {
function error_set_line
(){
                                             error_set_line_end: {
                                                            //     error_line_no = line_no;
                        load              (0+BP);
                        store             (-1+global);
                                                            //     error_line_pos = line_pos;
                        load              (1+BP);
                        store             (-2+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_set_file_name(char file_name[]) {
} // error_set_line_end:
return;    }
function error_set_file_name
(){
                                             error_set_file_name_end: {
                                                            //     copy(error_file_name, file_name);
                        loadi             (-258+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_print(char err_type[], char msg[]) {
} // error_set_file_name_end:
return;    }
function error_print
(){
                                             error_print_end: {
                                                            //     char str[Str_size];
                                                            // 
                                                            //     write_stderr(err_type); writeln_stderr(msg);
                        load              (0+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        write_stderr();   
                        movebp            (-265);
                        load              (1+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln_stderr(); 
                        movebp            (-265);
                                                            // 
                                                            //     write_stderr("File: "); writeln_stderr(error_file_name);
                        loadi             (0);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        write_stderr();   
                        movebp            (-265);
                        loadi             (-258+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln_stderr(); 
                        movebp            (-265);
                                                            // 
                                                            //     int_to_str(error_line_no, str);
                        load              (-1+global);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        int_to_str();     
                        movebp            (-266);
                                                            //     write_stderr("Line no: "); writeln_stderr(str);
                        loadi             (7);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        write_stderr();   
                        movebp            (-265);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln_stderr(); 
                        movebp            (-265);
                                                            // 
                                                            //     int_to_str(error_line_pos, str);
                        load              (-2+global);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        int_to_str();     
                        movebp            (-266);
                                                            //     write_stderr("Line pos: "); writeln_stderr(str);
                        loadi             (17);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        write_stderr();   
                        movebp            (-265);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln_stderr(); 
                        movebp            (-265);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_compiler(char msg[]) {
} // error_print_end:
return;    }
function error_compiler
(){
                                             error_compiler_end: {
                                                            //     error_print("Compile error: ", msg);
                        loadi             (28);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_syntax(char msg[]) {
} // error_compiler_end:
return;    }
function error_syntax
(){
                                             error_syntax_end: {
                                                            //     error_print("Syntax error: ", msg);
                        loadi             (44);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_parse(char msg[]) {
} // error_syntax_end:
return;    }
function error_parse
(){
                                             error_parse_end: {
                                                            //     error_print("Parse error: ", msg);
                        loadi             (59);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_preprocessor(char msg[]) {
} // error_parse_end:
return;    }
function error_preprocessor
(){
                                             error_preprocessor_end: {
                                                            //     error_print("Error while reading source: ", msg);
                        loadi             (73);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_target(char msg[]) {
} // error_preprocessor_end:
return;    }
function error_target
(){
                                             error_target_end: {
                                                            //     error_print("Code generation error: ", msg);
                        loadi             (102);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // error_internal() {
} // error_target_end:
return;    }
function error_internal
(){
                                             error_internal_end: {
                                                            //     error_print("Internal error", "");
                        loadi             (126);
                        store             (0+BP);
                        loadi             (141);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_print();    
                        movebp            (-10);
                                                            //     exit(1);
                        loadi             (1);
                        abortProgram      (A);
                                                            // }
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "preprocessor.h"
                                                            // #endif
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // char file_name[Str_size];
} // error_internal_end:
return;    }
                                                            // 
                                                            // int line_no;
                                                            // int line_pos;
                                                            // 
                                                            // char line[Str_size];
                                                            // int line_length;
                                                            // 
                                                            // char source_buffer[Source_buffer_length];
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_init() {
function preprocessor_init
(){
                                             preprocessor_init_end: {
                                                            //     line_no = 0;
                        loadi             (0);
                        store             (-515+global);
                                                            //     line_pos = 0;
                        loadi             (0);
                        store             (-516+global);
                                                            //     copy(source_buffer, "");
                        loadi             (-1049349+global);
                        store             (0+BP);
                        loadi             (142);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            //     copy(file_name, "N/A");
                        loadi             (-514+global);
                        store             (0+BP);
                        loadi             (143);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_get_line_no() {
} // preprocessor_init_end:
return;    }
function preprocessor_get_line_no
(){
                                             preprocessor_get_line_no_end: {
                                                            //     return line_no;
                        load              (-515+global);
                        if(always())      break preprocessor_get_line_no_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_get_line_pos() {
} // preprocessor_get_line_no_end:
return;    }
function preprocessor_get_line_pos
(){
                                             preprocessor_get_line_pos_end: {
                                                            //     return line_pos;
                        load              (-516+global);
                        if(always())      break preprocessor_get_line_pos_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_get_source_chunk(char src[]) {
} // preprocessor_get_line_pos_end:
return;    }
function preprocessor_get_source_chunk
(){
                                             preprocessor_get_source_chunk_end: {
                                                            //     copy(src, source_buffer);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (-1049349+global);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            //     copy(source_buffer, "");
                        loadi             (-1049349+global);
                        store             (1+BP);
                        loadi             (147);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_read_next_line() {
} // preprocessor_get_source_chunk_end:
return;    }
function preprocessor_read_next_line
(){
                                             preprocessor_read_next_line_end: {
                                                            //     int chars_read;
                                                            // 
                                                            //     chars_read = readln(line, Str_size - 1);
                        loadi             (-772+global);
                        store             (1+BP);
                        loadi             (256);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (2+BP);
                        subtract          (3+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        readln();         
                        movebp            (-11);
                        store             (0+BP);
                                                            //     if (chars_read == Str_size - 1) {
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (256);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (2+BP);
                        subtract          (3+BP);
                        subtract          (1+BP);
                                             compare_53_false: {
                                             compare_53_true: {
                        if(equals())      break compare_53_true;
                        loadi             (0);
                        if(always())      break compare_53_false;
} // compare_53_true:
                        loadi             (1);
} // compare_53_false:
                                             if_54_end: {
                                             if_54_next: {
                        if(equals())      break if_54_next;
                                                            //         error_preprocessor("line too long");
                        loadi             (148);
                        store             (1+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_preprocessor(); 
                        movebp            (-10);
                                                            //     }
                                                            // 
                                                            //     if (str_equals(line, ""))
} // if_54_next:
} // if_54_end:
                        loadi             (-772+global);
                        store             (1+BP);
                        loadi             (162);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        str_equals();     
                        movebp            (-11);
                                             if_55_end: {
                                             if_55_next: {
                        if(equals())      break if_55_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break preprocessor_read_next_line_end;
} // if_55_next:
} // if_55_end:
                                                            // 
                                                            //     line_no = line_no + 1;
                        load              (-515+global);
                        store             (1+BP);
                        loadi             (1);
                        add               (1+BP);
                        store             (-515+global);
                                                            //     line_pos = 0;
                        loadi             (0);
                        store             (-516+global);
                                                            //     line_length = length(line);
                        loadi             (-772+global);
                        store             (1+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        length();         
                        movebp            (-10);
                        store             (-773+global);
                                                            // 
                                                            //     append(source_buffer, line);
                        loadi             (-1049349+global);
                        store             (1+BP);
                        loadi             (-772+global);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append();         
                        movebp            (-11);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break preprocessor_read_next_line_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_read_char() {
} // preprocessor_read_next_line_end:
return;    }
function preprocessor_read_char
(){
                                             preprocessor_read_char_end: {
                                                            //     int c;
                                                            // 
                                                            //     if (line_pos >= line_length)
                        load              (-516+global);
                        store             (1+BP);
                        load              (-773+global);
                        subtract          (1+BP);
                                             compare_56_false: {
                                             compare_56_true: {
                        if(greater())     break compare_56_true;
                        if(equals())      break compare_56_true;
                        loadi             (0);
                        if(always())      break compare_56_false;
} // compare_56_true:
                        loadi             (1);
} // compare_56_false:
                                             if_57_end: {
                                             if_57_next: {
                        if(equals())      break if_57_next;
                                                            //         return '\n';
                        loadi             (10);
                        if(always())      break preprocessor_read_char_end;
} // if_57_next:
} // if_57_end:
                                                            // 
                                                            //     c = line[line_pos];
                        load              (-516+global);
                        loadx             ();
                        load              (-772+global+X);
                        store             (0+BP);
                                                            // 
                                                            //     line_pos = line_pos + 1;
                        load              (-516+global);
                        store             (1+BP);
                        loadi             (1);
                        add               (1+BP);
                        store             (-516+global);
                                                            //     return c;
                        load              (0+BP);
                        if(always())      break preprocessor_read_char_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_lookahead1() {
} // preprocessor_read_char_end:
return;    }
function preprocessor_lookahead1
(){
                                             preprocessor_lookahead1_end: {
                                                            //     if (line_pos >= line_length)
                        load              (-516+global);
                        store             (0+BP);
                        load              (-773+global);
                        subtract          (0+BP);
                                             compare_58_false: {
                                             compare_58_true: {
                        if(greater())     break compare_58_true;
                        if(equals())      break compare_58_true;
                        loadi             (0);
                        if(always())      break compare_58_false;
} // compare_58_true:
                        loadi             (1);
} // compare_58_false:
                                             if_59_end: {
                                             if_59_next: {
                        if(equals())      break if_59_next;
                                                            //         return '\n';
                        loadi             (10);
                        if(always())      break preprocessor_lookahead1_end;
} // if_59_next:
} // if_59_end:
                                                            // 
                                                            //     return line[line_pos];
                        load              (-516+global);
                        loadx             ();
                        load              (-772+global+X);
                        if(always())      break preprocessor_lookahead1_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_lookahead2() {
} // preprocessor_lookahead1_end:
return;    }
function preprocessor_lookahead2
(){
                                             preprocessor_lookahead2_end: {
                                                            //     if (line_pos + 1 >= line_length)
                        load              (-516+global);
                        store             (0+BP);
                        loadi             (1);
                        add               (0+BP);
                        store             (0+BP);
                        load              (-773+global);
                        subtract          (0+BP);
                                             compare_60_false: {
                                             compare_60_true: {
                        if(greater())     break compare_60_true;
                        if(equals())      break compare_60_true;
                        loadi             (0);
                        if(always())      break compare_60_false;
} // compare_60_true:
                        loadi             (1);
} // compare_60_false:
                                             if_61_end: {
                                             if_61_next: {
                        if(equals())      break if_61_next;
                                                            //         return '\n';
                        loadi             (10);
                        if(always())      break preprocessor_lookahead2_end;
} // if_61_next:
} // if_61_end:
                                                            // 
                                                            //     return line[line_pos + 1];
                        load              (-516+global);
                        store             (0+BP);
                        loadi             (1);
                        add               (0+BP);
                        loadx             ();
                        load              (-772+global+X);
                        if(always())      break preprocessor_lookahead2_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_compiler_directive() {
} // preprocessor_lookahead2_end:
return;    }
function preprocessor_compiler_directive
(){
                                             preprocessor_compiler_directive_end: {
                                                            //     int i;
                                                            // 
                                                            //     if (starts_with(line, "#line 2 ")) {
                        loadi             (-772+global);
                        store             (1+BP);
                        loadi             (163);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        starts_with();    
                        movebp            (-11);
                                             if_62_end: {
                                             if_62_next: {
                        if(equals())      break if_62_next;
                                                            //         line_no = 2;
                        loadi             (2);
                        store             (-515+global);
                                                            // 
                                                            //         copy(file_name, "");
                        loadi             (-514+global);
                        store             (1+BP);
                        loadi             (172);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        copy();           
                        movebp            (-11);
                                                            //         i = length("#line 2 ");
                        loadi             (173);
                        store             (1+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        length();         
                        movebp            (-10);
                        store             (0+BP);
                                                            // 
                                                            //         while (line[i] != ' ' && line[i] != '\n' && line[i] != 0) {
                                             while_63_end: {
while_63_test: while(true) {
                        load              (0+BP);
                        loadx             ();
                        load              (-772+global+X);
                        store             (1+BP);
                        loadi             (32);
                        subtract          (1+BP);
                                             compare_64_false: {
                                             compare_64_true: {
                        if(notequals())   break compare_64_true;
                        loadi             (0);
                        if(always())      break compare_64_false;
} // compare_64_true:
                        loadi             (1);
} // compare_64_false:
                                             logical_and_65_true: {
                                             logical_and_65_false: {
                        if(equals())      break logical_and_65_false;
                        load              (0+BP);
                        loadx             ();
                        load              (-772+global+X);
                        store             (1+BP);
                        loadi             (10);
                        subtract          (1+BP);
                                             compare_66_false: {
                                             compare_66_true: {
                        if(notequals())   break compare_66_true;
                        loadi             (0);
                        if(always())      break compare_66_false;
} // compare_66_true:
                        loadi             (1);
} // compare_66_false:
                        if(equals())      break logical_and_65_false;
                        load              (0+BP);
                        loadx             ();
                        load              (-772+global+X);
                        store             (1+BP);
                        loadi             (0);
                        subtract          (1+BP);
                                             compare_67_false: {
                                             compare_67_true: {
                        if(notequals())   break compare_67_true;
                        loadi             (0);
                        if(always())      break compare_67_false;
} // compare_67_true:
                        loadi             (1);
} // compare_67_false:
                        if(equals())      break logical_and_65_false;
                        loadi             (1);
                        if(always())      break logical_and_65_true;
} // logical_and_65_false:
                        loadi             (0);
} // logical_and_65_true:
                        if(equals())      break while_63_end;
                                                            //             append_char(file_name, line[i]);
                        loadi             (-514+global);
                        store             (1+BP);
                        load              (0+BP);
                        loadx             ();
                        load              (-772+global+X);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            //             i = i + 1; 
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1);
                        add               (1+BP);
                        store             (0+BP);
                                                            //         }
                                                            // 		error_set_file_name(file_name);
                        if(always())      continue while_63_test;
                                             break; } // while_63_test:
} // while_63_end:
                        loadi             (-514+global);
                        store             (1+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_set_file_name(); 
                        movebp            (-10);
                                                            //         error_set_line(2, 0);
                        loadi             (2);
                        store             (1+BP);
                        loadi             (0);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        error_set_line(); 
                        movebp            (-11);
                                                            // 	}
                                                            // }
} // if_62_next:
} // if_62_end:
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // preprocessor_skip() {
} // preprocessor_compiler_directive_end:
return;    }
function preprocessor_skip
(){
                                             preprocessor_skip_end: {
                                                            //     int c;
                                                            //     int c1;
                                                            // 
                                                            //     if (line_pos >= line_length) {
                        load              (-516+global);
                        store             (2+BP);
                        load              (-773+global);
                        subtract          (2+BP);
                                             compare_68_false: {
                                             compare_68_true: {
                        if(greater())     break compare_68_true;
                        if(equals())      break compare_68_true;
                        loadi             (0);
                        if(always())      break compare_68_false;
} // compare_68_true:
                        loadi             (1);
} // compare_68_false:
                                             if_69_end: {
                                             if_69_next: {
                        if(equals())      break if_69_next;
                                                            //         if (! preprocessor_read_next_line())
                        movebp            (10);
                        preprocessor_read_next_line(); 
                        movebp            (-10);
                                             logical_not_70_true: {
                                             logical_not_70_false: {
                        if(notequals())   break logical_not_70_false;
                        loadi             (1);
                        if(always())      break logical_not_70_true;
} // logical_not_70_false:
                        loadi             (0);
} // logical_not_70_true:
                                             if_71_end: {
                                             if_71_next: {
                        if(equals())      break if_71_next;
                                                            //             return False;
                        loadi             (0);
                        if(always())      break preprocessor_skip_end;
} // if_71_next:
} // if_71_end:
                                                            // 
                                                            //         if (line_length == 0)
                        load              (-773+global);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                                             compare_72_false: {
                                             compare_72_true: {
                        if(equals())      break compare_72_true;
                        loadi             (0);
                        if(always())      break compare_72_false;
} // compare_72_true:
                        loadi             (1);
} // compare_72_false:
                                             if_73_end: {
                                             if_73_next: {
                        if(equals())      break if_73_next;
                                                            //             return preprocessor_skip();
                        movebp            (10);
                        preprocessor_skip(); 
                        movebp            (-10);
                        if(always())      break preprocessor_skip_end;
} // if_73_next:
} // if_73_end:
                                                            // 
                                                            //         if (starts_with(line, "#")) {
                        loadi             (-772+global);
                        store             (2+BP);
                        loadi             (182);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        starts_with();    
                        movebp            (-12);
                                             if_74_end: {
                                             if_74_next: {
                        if(equals())      break if_74_next;
                                                            //             preprocessor_compiler_directive();
                        movebp            (10);
                        preprocessor_compiler_directive(); 
                        movebp            (-10);
                                                            // 
                                                            //             line_pos = 0;
                        loadi             (0);
                        store             (-516+global);
                                                            //             line_length = 0;
                        loadi             (0);
                        store             (-773+global);
                                                            //             return preprocessor_skip();
                        movebp            (10);
                        preprocessor_skip(); 
                        movebp            (-10);
                        if(always())      break preprocessor_skip_end;
                                                            //         }
                                                            //     }
} // if_74_next:
} // if_74_end:
                                                            // 
                                                            //     c = line[line_pos];
} // if_69_next:
} // if_69_end:
                        load              (-516+global);
                        loadx             ();
                        load              (-772+global+X);
                        store             (0+BP);
                                                            //     c1 = line[line_pos + 1];
                        load              (-516+global);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        loadx             ();
                        load              (-772+global+X);
                        store             (1+BP);
                                                            // 
                                                            //     if (c == ' ' || c == '\t' || c == '\n') {
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (32);
                        subtract          (2+BP);
                                             compare_75_false: {
                                             compare_75_true: {
                        if(equals())      break compare_75_true;
                        loadi             (0);
                        if(always())      break compare_75_false;
} // compare_75_true:
                        loadi             (1);
} // compare_75_false:
                                             logical_or_76_false: {
                                             logical_or_76_true: {
                        if(notequals())   break logical_or_76_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (9);
                        subtract          (2+BP);
                                             compare_77_false: {
                                             compare_77_true: {
                        if(equals())      break compare_77_true;
                        loadi             (0);
                        if(always())      break compare_77_false;
} // compare_77_true:
                        loadi             (1);
} // compare_77_false:
                        if(notequals())   break logical_or_76_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (10);
                        subtract          (2+BP);
                                             compare_78_false: {
                                             compare_78_true: {
                        if(equals())      break compare_78_true;
                        loadi             (0);
                        if(always())      break compare_78_false;
} // compare_78_true:
                        loadi             (1);
} // compare_78_false:
                        if(notequals())   break logical_or_76_true;
                        loadi             (0);
                        if(always())      break logical_or_76_false;
} // logical_or_76_true:
                        loadi             (1);
} // logical_or_76_false:
                                             if_79_end: {
                                             if_79_next: {
                        if(equals())      break if_79_next;
                                                            //         line_pos = line_pos + 1;
                        load              (-516+global);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (-516+global);
                                                            //         return preprocessor_skip();
                        movebp            (10);
                        preprocessor_skip(); 
                        movebp            (-10);
                        if(always())      break preprocessor_skip_end;
                                                            //     }
                                                            // 
                                                            //     if (c == '/' && c1 == '/') {
} // if_79_next:
} // if_79_end:
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (47);
                        subtract          (2+BP);
                                             compare_80_false: {
                                             compare_80_true: {
                        if(equals())      break compare_80_true;
                        loadi             (0);
                        if(always())      break compare_80_false;
} // compare_80_true:
                        loadi             (1);
} // compare_80_false:
                                             logical_and_81_true: {
                                             logical_and_81_false: {
                        if(equals())      break logical_and_81_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (47);
                        subtract          (2+BP);
                                             compare_82_false: {
                                             compare_82_true: {
                        if(equals())      break compare_82_true;
                        loadi             (0);
                        if(always())      break compare_82_false;
} // compare_82_true:
                        loadi             (1);
} // compare_82_false:
                        if(equals())      break logical_and_81_false;
                        loadi             (1);
                        if(always())      break logical_and_81_true;
} // logical_and_81_false:
                        loadi             (0);
} // logical_and_81_true:
                                             if_83_end: {
                                             if_83_next: {
                        if(equals())      break if_83_next;
                                                            //         line_pos = 0;
                        loadi             (0);
                        store             (-516+global);
                                                            //         line_length = 0;
                        loadi             (0);
                        store             (-773+global);
                                                            //         return preprocessor_skip();
                        movebp            (10);
                        preprocessor_skip(); 
                        movebp            (-10);
                        if(always())      break preprocessor_skip_end;
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_83_next:
} // if_83_end:
                        loadi             (1);
                        if(always())      break preprocessor_skip_end;
                                                            // }
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "token.h"
                                                            // #endif
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // //
                                                            // // token
                                                            // //             integer-constant
                                                            // //             character-constant
                                                            // //             string-literal
                                                            // //             identifier-or-keyword
                                                            // //             symbol
                                                            // //
                                                            // // integer-constant
                                                            // //             digit-list
                                                            // //
                                                            // // character-constant
                                                            // //             ' char-escape-sequence '
                                                            // //             ' any-except ' '
                                                            // //            
                                                            // // digit-list
                                                            // //             digit digit-list
                                                            // //             digit
                                                            // //
                                                            // // digit
                                                            // //             one-of 0 1 2 3 4 5 6 7 8 9
                                                            // //            
                                                            // // string-literal
                                                            // //             " string-literal-char-sequence "
                                                            // //
                                                            // // string-literal-char-sequence
                                                            // //             string-literal-char string-literal-char-sequence
                                                            // //             string-literal-char
                                                            // //
                                                            // // string-literal-char
                                                            // //             char-escape-sequence
                                                            // //             any-char-except "
                                                            // //
                                                            // // char-escape-sequence
                                                            // //             one-of \n \r \t \\ \' \"
                                                            // //
                                                            // // identifier-or-keyword
                                                            // //             identifier-nondigit-char identifier-any-char-sequence
                                                            // //             identifier-nondigit-char
                                                            // //            
                                                            // // identifier-nondigit-char
                                                            // //             one-of _ a b c d e f g h i j k l m n o p q r s t u v w x y z
                                                            // //                      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                                                            // //            
                                                            // // identifier-any-char
                                                            // //             one-of _ a b c d e f g h i j k l m n o p q r s t u v w x y z
                                                            // //                      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                                                            // //                      0 1 2 3 4 5 6 7 8 9
                                                            // //           
                                                            // // identifier-any-char-sequence
                                                            // //             identifier-any-char identifier-any-char-sequence
                                                            // //             identifier-any-char
                                                            // // 
                                                            // // symbol
                                                            // //             one-of  < > + - / * = <= >= ( ) { } [ ] != == ; , 
                                                            // //
                                                            // // keyword
                                                            // //             one-of  const int char if else while enum debug
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // 
                                                            // int token_type;
} // preprocessor_skip_end:
return;    }
                                                            // int token_lookahead_type;
                                                            // 
                                                            // int token_line_no;
                                                            // int token_lookahead_line_no;
                                                            // 
                                                            // int token_line_pos;
                                                            // int token_lookahead_line_pos;
                                                            // 
                                                            // char token_text[Str_size];
                                                            // char token_lookahead_text[Str_size];
                                                            // 
                                                            // enum {
                                                            //     Token_t_invalid,
                                                            //     Token_t_character_constant,
                                                            //     Token_t_integer_constant,
                                                            //     Token_t_string_literal,
                                                            //     Token_t_identifier,
                                                            //     Token_t_symbol,
                                                            //     Token_t_keyword,
                                                            //     Token_t_eof
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_init() {
function token_init
(){
                                             token_init_end: {
                                                            //     token_line_no = 0;
                        loadi             (0);
                        store             (-1049352+global);
                                                            //     token_line_pos = 0;
                        loadi             (0);
                        store             (-1049354+global);
                                                            //     token_lookahead_line_no = 0;
                        loadi             (0);
                        store             (-1049353+global);
                                                            //     token_lookahead_line_pos = 0;
                        loadi             (0);
                        store             (-1049355+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_char_escape_sequence() {
} // token_init_end:
return;    }
function token_char_escape_sequence
(){
                                             token_char_escape_sequence_end: {
                                                            //     int c1;
                                                            //     int c2;
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
                        movebp            (10);
                        preprocessor_lookahead1(); 
                        movebp            (-10);
                        store             (0+BP);
                                                            //     c2 = preprocessor_lookahead2();
                        movebp            (10);
                        preprocessor_lookahead2(); 
                        movebp            (-10);
                        store             (1+BP);
                                                            // 
                                                            //     if (c1 != '\\' || c2 == '\n') {
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (92);
                        subtract          (2+BP);
                                             compare_84_false: {
                                             compare_84_true: {
                        if(notequals())   break compare_84_true;
                        loadi             (0);
                        if(always())      break compare_84_false;
} // compare_84_true:
                        loadi             (1);
} // compare_84_false:
                                             logical_or_85_false: {
                                             logical_or_85_true: {
                        if(notequals())   break logical_or_85_true;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (10);
                        subtract          (2+BP);
                                             compare_86_false: {
                                             compare_86_true: {
                        if(equals())      break compare_86_true;
                        loadi             (0);
                        if(always())      break compare_86_false;
} // compare_86_true:
                        loadi             (1);
} // compare_86_false:
                        if(notequals())   break logical_or_85_true;
                        loadi             (0);
                        if(always())      break logical_or_85_false;
} // logical_or_85_true:
                        loadi             (1);
} // logical_or_85_false:
                                             if_87_end: {
                                             if_87_next: {
                        if(equals())      break if_87_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_char_escape_sequence_end;
                                                            //     }
                                                            // 
                                                            //     preprocessor_read_char();
} // if_87_next:
} // if_87_end:
                        movebp            (10);
                        preprocessor_read_char(); 
                        movebp            (-10);
                                                            //     preprocessor_read_char();
                        movebp            (10);
                        preprocessor_read_char(); 
                        movebp            (-10);
                                                            // 
                                                            //     if        (c2 == 'n') {
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (110);
                        subtract          (2+BP);
                                             compare_88_false: {
                                             compare_88_true: {
                        if(equals())      break compare_88_true;
                        loadi             (0);
                        if(always())      break compare_88_false;
} // compare_88_true:
                        loadi             (1);
} // compare_88_false:
                                             if_89_end: {
                                             if_89_next: {
                        if(equals())      break if_89_next;
                                                            //         c1 = 10;
                        loadi             (10);
                        store             (0+BP);
                                                            //     } else if (c2 == 'r') {
                        if(always())      break if_89_end;
} // if_89_next:
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (114);
                        subtract          (2+BP);
                                             compare_90_false: {
                                             compare_90_true: {
                        if(equals())      break compare_90_true;
                        loadi             (0);
                        if(always())      break compare_90_false;
} // compare_90_true:
                        loadi             (1);
} // compare_90_false:
                                             if_91_end: {
                                             if_91_next: {
                        if(equals())      break if_91_next;
                                                            //         c1 = 13;
                        loadi             (13);
                        store             (0+BP);
                                                            //     } else if (c2 == 't') {
                        if(always())      break if_91_end;
} // if_91_next:
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (116);
                        subtract          (2+BP);
                                             compare_92_false: {
                                             compare_92_true: {
                        if(equals())      break compare_92_true;
                        loadi             (0);
                        if(always())      break compare_92_false;
} // compare_92_true:
                        loadi             (1);
} // compare_92_false:
                                             if_93_end: {
                                             if_93_next: {
                        if(equals())      break if_93_next;
                                                            //         c1 = 9;
                        loadi             (9);
                        store             (0+BP);
                                                            //     } else if (c2 == '\\') {
                        if(always())      break if_93_end;
} // if_93_next:
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (92);
                        subtract          (2+BP);
                                             compare_94_false: {
                                             compare_94_true: {
                        if(equals())      break compare_94_true;
                        loadi             (0);
                        if(always())      break compare_94_false;
} // compare_94_true:
                        loadi             (1);
} // compare_94_false:
                                             if_95_end: {
                                             if_95_next: {
                        if(equals())      break if_95_next;
                                                            //         c1 = 92;
                        loadi             (92);
                        store             (0+BP);
                                                            //     } else if (c2 == '\'') {
                        if(always())      break if_95_end;
} // if_95_next:
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (39);
                        subtract          (2+BP);
                                             compare_96_false: {
                                             compare_96_true: {
                        if(equals())      break compare_96_true;
                        loadi             (0);
                        if(always())      break compare_96_false;
} // compare_96_true:
                        loadi             (1);
} // compare_96_false:
                                             if_97_end: {
                                             if_97_next: {
                        if(equals())      break if_97_next;
                                                            //         c1 = 39;
                        loadi             (39);
                        store             (0+BP);
                                                            //     } else if (c2 == '\"') {
                        if(always())      break if_97_end;
} // if_97_next:
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (34);
                        subtract          (2+BP);
                                             compare_98_false: {
                                             compare_98_true: {
                        if(equals())      break compare_98_true;
                        loadi             (0);
                        if(always())      break compare_98_false;
} // compare_98_true:
                        loadi             (1);
} // compare_98_false:
                                             if_99_end: {
                                             if_99_next: {
                        if(equals())      break if_99_next;
                                                            //         c1 = 34;
                        loadi             (34);
                        store             (0+BP);
                                                            //     } else {
                        if(always())      break if_99_end;
} // if_99_next:
                                                            //         error_parse("invalid character escape sequence");
                        loadi             (184);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        error_parse();    
                        movebp            (-11);
                                                            //     }
                                                            // 
                                                            //     append_char(token_lookahead_text, c1);
} // if_99_end:
} // if_97_end:
} // if_95_end:
} // if_93_end:
} // if_91_end:
} // if_89_end:
                        loadi             (-1049867+global);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        append_char();    
                        movebp            (-12);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_char_escape_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_string_literal_char() {
} // token_char_escape_sequence_end:
return;    }
function token_string_literal_char
(){
                                             token_string_literal_char_end: {
                                                            //     int c1;
                                                            // 
                                                            //     if (token_char_escape_sequence()) {
                        movebp            (9);
                        token_char_escape_sequence(); 
                        movebp            (-9);
                                             if_100_end: {
                                             if_100_next: {
                        if(equals())      break if_100_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_string_literal_char_end;
                                                            //     }
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
} // if_100_next:
} // if_100_end:
                        movebp            (9);
                        preprocessor_lookahead1(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     if (c1 != '"') {
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (34);
                        subtract          (1+BP);
                                             compare_101_false: {
                                             compare_101_true: {
                        if(notequals())   break compare_101_true;
                        loadi             (0);
                        if(always())      break compare_101_false;
} // compare_101_true:
                        loadi             (1);
} // compare_101_false:
                                             if_102_end: {
                                             if_102_next: {
                        if(equals())      break if_102_next;
                                                            //         append_char(token_lookahead_text, c1);
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            //         preprocessor_read_char();
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_string_literal_char_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_102_next:
} // if_102_end:
                        loadi             (0);
                        if(always())      break token_string_literal_char_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_string_literal_char_sequence() {
} // token_string_literal_char_end:
return;    }
function token_string_literal_char_sequence
(){
                                             token_string_literal_char_sequence_end: {
                                                            // 
                                                            //     if (token_string_literal_char()) {
                        movebp            (8);
                        token_string_literal_char(); 
                        movebp            (-8);
                                             if_103_end: {
                                             if_103_next: {
                        if(equals())      break if_103_next;
                                                            //         token_string_literal_char_sequence();
                        movebp            (8);
                        token_string_literal_char_sequence(); 
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_string_literal_char_sequence_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_103_next:
} // if_103_end:
                        loadi             (0);
                        if(always())      break token_string_literal_char_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_string_literal() {
} // token_string_literal_char_sequence_end:
return;    }
function token_string_literal
(){
                                             token_string_literal_end: {
                                                            // 
                                                            //     if (preprocessor_lookahead1() != '"') {
                        movebp            (8);
                        preprocessor_lookahead1(); 
                        movebp            (-8);
                        store             (0+BP);
                        loadi             (34);
                        subtract          (0+BP);
                                             compare_104_false: {
                                             compare_104_true: {
                        if(notequals())   break compare_104_true;
                        loadi             (0);
                        if(always())      break compare_104_false;
} // compare_104_true:
                        loadi             (1);
} // compare_104_false:
                                             if_105_end: {
                                             if_105_next: {
                        if(equals())      break if_105_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_string_literal_end;
                                                            //     }
                                                            // 
                                                            //     preprocessor_read_char();
} // if_105_next:
} // if_105_end:
                        movebp            (8);
                        preprocessor_read_char(); 
                        movebp            (-8);
                                                            //     token_string_literal_char_sequence();
                        movebp            (8);
                        token_string_literal_char_sequence(); 
                        movebp            (-8);
                                                            // 
                                                            //     if (preprocessor_read_char() != '"') {
                        movebp            (8);
                        preprocessor_read_char(); 
                        movebp            (-8);
                        store             (0+BP);
                        loadi             (34);
                        subtract          (0+BP);
                                             compare_106_false: {
                                             compare_106_true: {
                        if(notequals())   break compare_106_true;
                        loadi             (0);
                        if(always())      break compare_106_false;
} // compare_106_true:
                        loadi             (1);
} // compare_106_false:
                                             if_107_end: {
                                             if_107_next: {
                        if(equals())      break if_107_next;
                                                            //         error_parse("string literal not terminated");
                        loadi             (218);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_parse();    
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     token_lookahead_type = Token_t_string_literal;
} // if_107_next:
} // if_107_end:
                        loadi             (3);
                        store             (-1049351+global);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_string_literal_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_identifier_any_char() {
} // token_string_literal_end:
return;    }
function token_identifier_any_char
(){
                                             token_identifier_any_char_end: {
                                                            //     int c1;
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
                        movebp            (9);
                        preprocessor_lookahead1(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     if (! contains_char("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", c1)) {
                        loadi             (248);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        contains_char();  
                        movebp            (-11);
                                             logical_not_108_true: {
                                             logical_not_108_false: {
                        if(notequals())   break logical_not_108_false;
                        loadi             (1);
                        if(always())      break logical_not_108_true;
} // logical_not_108_false:
                        loadi             (0);
} // logical_not_108_true:
                                             if_109_end: {
                                             if_109_next: {
                        if(equals())      break if_109_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_identifier_any_char_end;
                                                            //     }
                                                            // 
                                                            //     append_char(token_lookahead_text, c1);
} // if_109_next:
} // if_109_end:
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            //     preprocessor_read_char();
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_identifier_any_char_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_identifier_any_char_sequence() {
} // token_identifier_any_char_end:
return;    }
function token_identifier_any_char_sequence
(){
                                             token_identifier_any_char_sequence_end: {
                                                            // 
                                                            //     if (! token_identifier_any_char()) {
                        movebp            (8);
                        token_identifier_any_char(); 
                        movebp            (-8);
                                             logical_not_110_true: {
                                             logical_not_110_false: {
                        if(notequals())   break logical_not_110_false;
                        loadi             (1);
                        if(always())      break logical_not_110_true;
} // logical_not_110_false:
                        loadi             (0);
} // logical_not_110_true:
                                             if_111_end: {
                                             if_111_next: {
                        if(equals())      break if_111_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_identifier_any_char_sequence_end;
                                                            //     }
                                                            // 
                                                            //     token_identifier_any_char_sequence();
} // if_111_next:
} // if_111_end:
                        movebp            (8);
                        token_identifier_any_char_sequence(); 
                        movebp            (-8);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_identifier_any_char_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_identifier_non_digit_char() {
} // token_identifier_any_char_sequence_end:
return;    }
function token_identifier_non_digit_char
(){
                                             token_identifier_non_digit_char_end: {
                                                            //     int c1;
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
                        movebp            (9);
                        preprocessor_lookahead1(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     if (! contains_char("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", c1)) {
                        loadi             (312);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        contains_char();  
                        movebp            (-11);
                                             logical_not_112_true: {
                                             logical_not_112_false: {
                        if(notequals())   break logical_not_112_false;
                        loadi             (1);
                        if(always())      break logical_not_112_true;
} // logical_not_112_false:
                        loadi             (0);
} // logical_not_112_true:
                                             if_113_end: {
                                             if_113_next: {
                        if(equals())      break if_113_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_identifier_non_digit_char_end;
                                                            //     }
                                                            // 
                                                            //     append_char(token_lookahead_text, c1);
} // if_113_next:
} // if_113_end:
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            //     preprocessor_read_char();
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_identifier_non_digit_char_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_identifier_or_keyword() {
} // token_identifier_non_digit_char_end:
return;    }
function token_identifier_or_keyword
(){
                                             token_identifier_or_keyword_end: {
                                                            //     char tmp_str[Str_size];
                                                            // 
                                                            //     if (! token_identifier_non_digit_char()) {
                        movebp            (264);
                        token_identifier_non_digit_char(); 
                        movebp            (-264);
                                             logical_not_114_true: {
                                             logical_not_114_false: {
                        if(notequals())   break logical_not_114_false;
                        loadi             (1);
                        if(always())      break logical_not_114_true;
} // logical_not_114_false:
                        loadi             (0);
} // logical_not_114_true:
                                             if_115_end: {
                                             if_115_next: {
                        if(equals())      break if_115_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_identifier_or_keyword_end;
                                                            //     }
                                                            // 
                                                            //     token_identifier_any_char_sequence();
} // if_115_next:
} // if_115_end:
                        movebp            (264);
                        token_identifier_any_char_sequence(); 
                        movebp            (-264);
                                                            //     copy(tmp_str, " ");
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (366);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     append(tmp_str, token_lookahead_text);
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (-1049867+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     append(tmp_str, " ");
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (368);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            // 
                                                            //     if (contains(" int char if else while enum return ", tmp_str)) {
                        loadi             (370);
                        store             (256+BP);
                        loadi             (0+BP);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        contains();       
                        movebp            (-266);
                                             if_116_end: {
                                             if_116_next: {
                        if(equals())      break if_116_next;
                                                            //         token_lookahead_type = Token_t_keyword;
                        loadi             (6);
                        store             (-1049351+global);
                                                            //     } else {
                        if(always())      break if_116_end;
} // if_116_next:
                                                            //         token_lookahead_type = Token_t_identifier;
                        loadi             (4);
                        store             (-1049351+global);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_116_end:
                        loadi             (1);
                        if(always())      break token_identifier_or_keyword_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_character_constant() {
} // token_identifier_or_keyword_end:
return;    }
function token_character_constant
(){
                                             token_character_constant_end: {
                                                            //     int c1;
                                                            // 
                                                            //     if (preprocessor_lookahead1() != '\'') {
                        movebp            (9);
                        preprocessor_lookahead1(); 
                        movebp            (-9);
                        store             (1+BP);
                        loadi             (39);
                        subtract          (1+BP);
                                             compare_117_false: {
                                             compare_117_true: {
                        if(notequals())   break compare_117_true;
                        loadi             (0);
                        if(always())      break compare_117_false;
} // compare_117_true:
                        loadi             (1);
} // compare_117_false:
                                             if_118_end: {
                                             if_118_next: {
                        if(equals())      break if_118_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_character_constant_end;
                                                            //     }
                                                            // 
                                                            //     token_lookahead_type = Token_t_character_constant;
} // if_118_next:
} // if_118_end:
                        loadi             (1);
                        store             (-1049351+global);
                                                            //     preprocessor_read_char();
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                                                            // 
                                                            //     if (! token_char_escape_sequence()) {
                        movebp            (9);
                        token_char_escape_sequence(); 
                        movebp            (-9);
                                             logical_not_119_true: {
                                             logical_not_119_false: {
                        if(notequals())   break logical_not_119_false;
                        loadi             (1);
                        if(always())      break logical_not_119_true;
} // logical_not_119_false:
                        loadi             (0);
} // logical_not_119_true:
                                             if_120_end: {
                                             if_120_next: {
                        if(equals())      break if_120_next;
                                                            //         c1 = preprocessor_read_char();
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //         append_char(token_lookahead_text, c1);
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            //     }
                                                            // 
                                                            //     c1 = preprocessor_read_char();
} // if_120_next:
} // if_120_end:
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     if (c1 != '\'') {
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (39);
                        subtract          (1+BP);
                                             compare_121_false: {
                                             compare_121_true: {
                        if(notequals())   break compare_121_true;
                        loadi             (0);
                        if(always())      break compare_121_false;
} // compare_121_true:
                        loadi             (1);
} // compare_121_false:
                                             if_122_end: {
                                             if_122_next: {
                        if(equals())      break if_122_next;
                                                            //         error_parse("character constant not terminated");
                        loadi             (407);
                        store             (1+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_parse();    
                        movebp            (-10);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_122_next:
} // if_122_end:
                        loadi             (1);
                        if(always())      break token_character_constant_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_digit() {
} // token_character_constant_end:
return;    }
function token_digit
(){
                                             token_digit_end: {
                                                            //     int c1;
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
                        movebp            (9);
                        preprocessor_lookahead1(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            // 
                                                            //     if (! contains_char("0123456789", c1)) {
                        loadi             (441);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        contains_char();  
                        movebp            (-11);
                                             logical_not_123_true: {
                                             logical_not_123_false: {
                        if(notequals())   break logical_not_123_false;
                        loadi             (1);
                        if(always())      break logical_not_123_true;
} // logical_not_123_false:
                        loadi             (0);
} // logical_not_123_true:
                                             if_124_end: {
                                             if_124_next: {
                        if(equals())      break if_124_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_digit_end;
                                                            //     }
                                                            // 
                                                            //     c1 = preprocessor_read_char();
} // if_124_next:
} // if_124_end:
                        movebp            (9);
                        preprocessor_read_char(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     append_char(token_lookahead_text, c1);
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        append_char();    
                        movebp            (-11);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_digit_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_digit_sequence() {
} // token_digit_end:
return;    }
function token_digit_sequence
(){
                                             token_digit_sequence_end: {
                                                            //     if (! token_digit()) {
                        movebp            (8);
                        token_digit();    
                        movebp            (-8);
                                             logical_not_125_true: {
                                             logical_not_125_false: {
                        if(notequals())   break logical_not_125_false;
                        loadi             (1);
                        if(always())      break logical_not_125_true;
} // logical_not_125_false:
                        loadi             (0);
} // logical_not_125_true:
                                             if_126_end: {
                                             if_126_next: {
                        if(equals())      break if_126_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_digit_sequence_end;
                                                            //     }
                                                            // 
                                                            //     token_digit_sequence();
} // if_126_next:
} // if_126_end:
                        movebp            (8);
                        token_digit_sequence(); 
                        movebp            (-8);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_digit_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_integer_constant() {
} // token_digit_sequence_end:
return;    }
function token_integer_constant
(){
                                             token_integer_constant_end: {
                                                            //     if (! token_digit_sequence()) {
                        movebp            (8);
                        token_digit_sequence(); 
                        movebp            (-8);
                                             logical_not_127_true: {
                                             logical_not_127_false: {
                        if(notequals())   break logical_not_127_false;
                        loadi             (1);
                        if(always())      break logical_not_127_true;
} // logical_not_127_false:
                        loadi             (0);
} // logical_not_127_true:
                                             if_128_end: {
                                             if_128_next: {
                        if(equals())      break if_128_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break token_integer_constant_end;
                                                            //     }
                                                            // 
                                                            //     token_lookahead_type = Token_t_integer_constant;
} // if_128_next:
} // if_128_end:
                        loadi             (2);
                        store             (-1049351+global);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break token_integer_constant_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_symbol() {
} // token_integer_constant_end:
return;    }
function token_symbol
(){
                                             token_symbol_end: {
                                                            //     int c1;
                                                            //     int c2;
                                                            // 
                                                            //     c1 = preprocessor_lookahead1();
                        movebp            (10);
                        preprocessor_lookahead1(); 
                        movebp            (-10);
                        store             (0+BP);
                                                            //     c2 = preprocessor_lookahead2();
                        movebp            (10);
                        preprocessor_lookahead2(); 
                        movebp            (-10);
                        store             (1+BP);
                                                            // 
                                                            //     if (c1 == '<' && c2 == '=' ||
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (60);
                        subtract          (2+BP);
                                             compare_129_false: {
                                             compare_129_true: {
                        if(equals())      break compare_129_true;
                        loadi             (0);
                        if(always())      break compare_129_false;
} // compare_129_true:
                        loadi             (1);
} // compare_129_false:
                                             logical_and_130_true: {
                                             logical_and_130_false: {
                        if(equals())      break logical_and_130_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (61);
                        subtract          (2+BP);
                                             compare_131_false: {
                                             compare_131_true: {
                        if(equals())      break compare_131_true;
                        loadi             (0);
                        if(always())      break compare_131_false;
} // compare_131_true:
                        loadi             (1);
} // compare_131_false:
                        if(equals())      break logical_and_130_false;
                        loadi             (1);
                        if(always())      break logical_and_130_true;
} // logical_and_130_false:
                        loadi             (0);
} // logical_and_130_true:
                                             logical_or_132_false: {
                                             logical_or_132_true: {
                        if(notequals())   break logical_or_132_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (62);
                        subtract          (2+BP);
                                             compare_133_false: {
                                             compare_133_true: {
                        if(equals())      break compare_133_true;
                        loadi             (0);
                        if(always())      break compare_133_false;
} // compare_133_true:
                        loadi             (1);
} // compare_133_false:
                                             logical_and_134_true: {
                                             logical_and_134_false: {
                        if(equals())      break logical_and_134_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (61);
                        subtract          (2+BP);
                                             compare_135_false: {
                                             compare_135_true: {
                        if(equals())      break compare_135_true;
                        loadi             (0);
                        if(always())      break compare_135_false;
} // compare_135_true:
                        loadi             (1);
} // compare_135_false:
                        if(equals())      break logical_and_134_false;
                        loadi             (1);
                        if(always())      break logical_and_134_true;
} // logical_and_134_false:
                        loadi             (0);
} // logical_and_134_true:
                        if(notequals())   break logical_or_132_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (61);
                        subtract          (2+BP);
                                             compare_136_false: {
                                             compare_136_true: {
                        if(equals())      break compare_136_true;
                        loadi             (0);
                        if(always())      break compare_136_false;
} // compare_136_true:
                        loadi             (1);
} // compare_136_false:
                                             logical_and_137_true: {
                                             logical_and_137_false: {
                        if(equals())      break logical_and_137_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (61);
                        subtract          (2+BP);
                                             compare_138_false: {
                                             compare_138_true: {
                        if(equals())      break compare_138_true;
                        loadi             (0);
                        if(always())      break compare_138_false;
} // compare_138_true:
                        loadi             (1);
} // compare_138_false:
                        if(equals())      break logical_and_137_false;
                        loadi             (1);
                        if(always())      break logical_and_137_true;
} // logical_and_137_false:
                        loadi             (0);
} // logical_and_137_true:
                        if(notequals())   break logical_or_132_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (33);
                        subtract          (2+BP);
                                             compare_139_false: {
                                             compare_139_true: {
                        if(equals())      break compare_139_true;
                        loadi             (0);
                        if(always())      break compare_139_false;
} // compare_139_true:
                        loadi             (1);
} // compare_139_false:
                                             logical_and_140_true: {
                                             logical_and_140_false: {
                        if(equals())      break logical_and_140_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (61);
                        subtract          (2+BP);
                                             compare_141_false: {
                                             compare_141_true: {
                        if(equals())      break compare_141_true;
                        loadi             (0);
                        if(always())      break compare_141_false;
} // compare_141_true:
                        loadi             (1);
} // compare_141_false:
                        if(equals())      break logical_and_140_false;
                        loadi             (1);
                        if(always())      break logical_and_140_true;
} // logical_and_140_false:
                        loadi             (0);
} // logical_and_140_true:
                        if(notequals())   break logical_or_132_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (38);
                        subtract          (2+BP);
                                             compare_142_false: {
                                             compare_142_true: {
                        if(equals())      break compare_142_true;
                        loadi             (0);
                        if(always())      break compare_142_false;
} // compare_142_true:
                        loadi             (1);
} // compare_142_false:
                                             logical_and_143_true: {
                                             logical_and_143_false: {
                        if(equals())      break logical_and_143_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (38);
                        subtract          (2+BP);
                                             compare_144_false: {
                                             compare_144_true: {
                        if(equals())      break compare_144_true;
                        loadi             (0);
                        if(always())      break compare_144_false;
} // compare_144_true:
                        loadi             (1);
} // compare_144_false:
                        if(equals())      break logical_and_143_false;
                        loadi             (1);
                        if(always())      break logical_and_143_true;
} // logical_and_143_false:
                        loadi             (0);
} // logical_and_143_true:
                        if(notequals())   break logical_or_132_true;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (124);
                        subtract          (2+BP);
                                             compare_145_false: {
                                             compare_145_true: {
                        if(equals())      break compare_145_true;
                        loadi             (0);
                        if(always())      break compare_145_false;
} // compare_145_true:
                        loadi             (1);
} // compare_145_false:
                                             logical_and_146_true: {
                                             logical_and_146_false: {
                        if(equals())      break logical_and_146_false;
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (124);
                        subtract          (2+BP);
                                             compare_147_false: {
                                             compare_147_true: {
                        if(equals())      break compare_147_true;
                        loadi             (0);
                        if(always())      break compare_147_false;
} // compare_147_true:
                        loadi             (1);
} // compare_147_false:
                        if(equals())      break logical_and_146_false;
                        loadi             (1);
                        if(always())      break logical_and_146_true;
} // logical_and_146_false:
                        loadi             (0);
} // logical_and_146_true:
                        if(notequals())   break logical_or_132_true;
                        loadi             (0);
                        if(always())      break logical_or_132_false;
} // logical_or_132_true:
                        loadi             (1);
} // logical_or_132_false:
                                             if_148_end: {
                                             if_148_next: {
                        if(equals())      break if_148_next;
                                                            //         c1 == '>' && c2 == '=' ||
                                                            //         c1 == '=' && c2 == '=' ||
                                                            //         c1 == '!' && c2 == '=' ||
                                                            //         c1 == '&' && c2 == '&' ||
                                                            //         c1 == '|' && c2 == '|') {
                                                            // 
                                                            //         copy(token_lookahead_text, "");
                        loadi             (-1049867+global);
                        store             (2+BP);
                        loadi             (452);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy();           
                        movebp            (-12);
                                                            //         append_char(token_lookahead_text, c1);
                        loadi             (-1049867+global);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        append_char();    
                        movebp            (-12);
                                                            //         append_char(token_lookahead_text, c2);
                        loadi             (-1049867+global);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        append_char();    
                        movebp            (-12);
                                                            // 
                                                            //         preprocessor_read_char();
                        movebp            (10);
                        preprocessor_read_char(); 
                        movebp            (-10);
                                                            //         preprocessor_read_char();
                        movebp            (10);
                        preprocessor_read_char(); 
                        movebp            (-10);
                                                            // 
                                                            //         token_lookahead_type = Token_t_symbol;
                        loadi             (5);
                        store             (-1049351+global);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_symbol_end;
                                                            //     }
                                                            // 
                                                            //     if (contains_char("<>=+-/*()[]{}!;,", c1)) {
} // if_148_next:
} // if_148_end:
                        loadi             (453);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        contains_char();  
                        movebp            (-12);
                                             if_149_end: {
                                             if_149_next: {
                        if(equals())      break if_149_next;
                                                            //         copy(token_lookahead_text, "");
                        loadi             (-1049867+global);
                        store             (2+BP);
                        loadi             (470);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        copy();           
                        movebp            (-12);
                                                            //         append_char(token_lookahead_text, c1);
                        loadi             (-1049867+global);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        append_char();    
                        movebp            (-12);
                                                            // 
                                                            //         token_lookahead_type = Token_t_symbol;
                        loadi             (5);
                        store             (-1049351+global);
                                                            // 
                                                            //         preprocessor_read_char();
                        movebp            (10);
                        preprocessor_read_char(); 
                        movebp            (-10);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_symbol_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_149_next:
} // if_149_end:
                        loadi             (0);
                        if(always())      break token_symbol_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_token() {
} // token_symbol_end:
return;    }
function token_token
(){
                                             token_token_end: {
                                                            // 
                                                            //     if (token_integer_constant()) {
                        movebp            (8);
                        token_integer_constant(); 
                        movebp            (-8);
                                             if_150_end: {
                                             if_150_next: {
                        if(equals())      break if_150_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_token_end;
                                                            //     }
                                                            // 
                                                            //     if (token_character_constant()) {
} // if_150_next:
} // if_150_end:
                        movebp            (8);
                        token_character_constant(); 
                        movebp            (-8);
                                             if_151_end: {
                                             if_151_next: {
                        if(equals())      break if_151_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_token_end;
                                                            //     }
                                                            // 
                                                            //     if (token_string_literal()) {
} // if_151_next:
} // if_151_end:
                        movebp            (8);
                        token_string_literal(); 
                        movebp            (-8);
                                             if_152_end: {
                                             if_152_next: {
                        if(equals())      break if_152_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_token_end;
                                                            //     }
                                                            // 
                                                            //     if (token_identifier_or_keyword()) {
} // if_152_next:
} // if_152_end:
                        movebp            (8);
                        token_identifier_or_keyword(); 
                        movebp            (-8);
                                             if_153_end: {
                                             if_153_next: {
                        if(equals())      break if_153_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_token_end;
                                                            //     }
                                                            // 
                                                            //     if (token_symbol()) {
} // if_153_next:
} // if_153_end:
                        movebp            (8);
                        token_symbol();   
                        movebp            (-8);
                                             if_154_end: {
                                             if_154_next: {
                        if(equals())      break if_154_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_token_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_154_next:
} // if_154_end:
                        loadi             (0);
                        if(always())      break token_token_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_get_next() {
} // token_token_end:
return;    }
function token_get_next
(){
                                             token_get_next_end: {
                                                            //     token_lookahead_type = Token_t_invalid;
                        loadi             (0);
                        store             (-1049351+global);
                                                            //     copy(token_lookahead_text, "");
                        loadi             (-1049867+global);
                        store             (0+BP);
                        loadi             (471);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // 
                                                            //     if (! preprocessor_skip()) {
                        movebp            (8);
                        preprocessor_skip(); 
                        movebp            (-8);
                                             logical_not_155_true: {
                                             logical_not_155_false: {
                        if(notequals())   break logical_not_155_false;
                        loadi             (1);
                        if(always())      break logical_not_155_true;
} // logical_not_155_false:
                        loadi             (0);
} // logical_not_155_true:
                                             if_156_end: {
                                             if_156_next: {
                        if(equals())      break if_156_next;
                                                            //         token_lookahead_type = Token_t_eof;
                        loadi             (7);
                        store             (-1049351+global);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_get_next_end;
                                                            //     }
                                                            // 
                                                            //     token_lookahead_line_no = preprocessor_get_line_no();
} // if_156_next:
} // if_156_end:
                        movebp            (8);
                        preprocessor_get_line_no(); 
                        movebp            (-8);
                        store             (-1049353+global);
                                                            //     token_lookahead_line_pos = preprocessor_get_line_pos();
                        movebp            (8);
                        preprocessor_get_line_pos(); 
                        movebp            (-8);
                        store             (-1049355+global);
                                                            // 
                                                            //     if (token_token()) {
                        movebp            (8);
                        token_token();    
                        movebp            (-8);
                                             if_157_end: {
                                             if_157_next: {
                        if(equals())      break if_157_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_get_next_end;
                                                            //     }
                                                            // 
                                                            //     token_lookahead_type = Token_t_invalid;
} // if_157_next:
} // if_157_end:
                        loadi             (0);
                        store             (-1049351+global);
                                                            //     return False;
                        loadi             (0);
                        if(always())      break token_get_next_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_text_is(char s[]) {
} // token_get_next_end:
return;    }
function token_text_is
(){
                                             token_text_is_end: {
                                                            //     if (token_type == Token_t_identifier || token_type == Token_t_symbol || token_type == Token_t_keyword) {
                        load              (-1049350+global);
                        store             (1+BP);
                        loadi             (4);
                        subtract          (1+BP);
                                             compare_158_false: {
                                             compare_158_true: {
                        if(equals())      break compare_158_true;
                        loadi             (0);
                        if(always())      break compare_158_false;
} // compare_158_true:
                        loadi             (1);
} // compare_158_false:
                                             logical_or_159_false: {
                                             logical_or_159_true: {
                        if(notequals())   break logical_or_159_true;
                        load              (-1049350+global);
                        store             (1+BP);
                        loadi             (5);
                        subtract          (1+BP);
                                             compare_160_false: {
                                             compare_160_true: {
                        if(equals())      break compare_160_true;
                        loadi             (0);
                        if(always())      break compare_160_false;
} // compare_160_true:
                        loadi             (1);
} // compare_160_false:
                        if(notequals())   break logical_or_159_true;
                        load              (-1049350+global);
                        store             (1+BP);
                        loadi             (6);
                        subtract          (1+BP);
                                             compare_161_false: {
                                             compare_161_true: {
                        if(equals())      break compare_161_true;
                        loadi             (0);
                        if(always())      break compare_161_false;
} // compare_161_true:
                        loadi             (1);
} // compare_161_false:
                        if(notequals())   break logical_or_159_true;
                        loadi             (0);
                        if(always())      break logical_or_159_false;
} // logical_or_159_true:
                        loadi             (1);
} // logical_or_159_false:
                                             if_162_end: {
                                             if_162_next: {
                        if(equals())      break if_162_next;
                                                            //         if (str_equals(token_text, s)) {
                        loadi             (-1049611+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        str_equals();     
                        movebp            (-10);
                                             if_163_end: {
                                             if_163_next: {
                        if(equals())      break if_163_next;
                                                            //             return True;
                        loadi             (1);
                        if(always())      break token_text_is_end;
                                                            //         }
                                                            //     }
} // if_163_next:
} // if_163_end:
                                                            // 
                                                            //     return False;
} // if_162_next:
} // if_162_end:
                        loadi             (0);
                        if(always())      break token_text_is_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_lookahead_text_is(char s[]) {
} // token_text_is_end:
return;    }
function token_lookahead_text_is
(){
                                             token_lookahead_text_is_end: {
                                                            //     if (str_equals(token_lookahead_text, s)) {
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        str_equals();     
                        movebp            (-10);
                                             if_164_end: {
                                             if_164_next: {
                        if(equals())      break if_164_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_lookahead_text_is_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_164_next:
} // if_164_end:
                        loadi             (0);
                        if(always())      break token_lookahead_text_is_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_type_is(int t) {
} // token_lookahead_text_is_end:
return;    }
function token_type_is
(){
                                             token_type_is_end: {
                                                            //     if (token_type == t) {
                        load              (-1049350+global);
                        store             (1+BP);
                        load              (0+BP);
                        subtract          (1+BP);
                                             compare_165_false: {
                                             compare_165_true: {
                        if(equals())      break compare_165_true;
                        loadi             (0);
                        if(always())      break compare_165_false;
} // compare_165_true:
                        loadi             (1);
} // compare_165_false:
                                             if_166_end: {
                                             if_166_next: {
                        if(equals())      break if_166_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_type_is_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_166_next:
} // if_166_end:
                        loadi             (0);
                        if(always())      break token_type_is_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_lookahead_type_is(int t) {
} // token_type_is_end:
return;    }
function token_lookahead_type_is
(){
                                             token_lookahead_type_is_end: {
                                                            //     if (token_lookahead_type == t) {
                        load              (-1049351+global);
                        store             (1+BP);
                        load              (0+BP);
                        subtract          (1+BP);
                                             compare_167_false: {
                                             compare_167_true: {
                        if(equals())      break compare_167_true;
                        loadi             (0);
                        if(always())      break compare_167_false;
} // compare_167_true:
                        loadi             (1);
} // compare_167_false:
                                             if_168_end: {
                                             if_168_next: {
                        if(equals())      break if_168_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_lookahead_type_is_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_168_next:
} // if_168_end:
                        loadi             (0);
                        if(always())      break token_lookahead_type_is_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_advance() {
} // token_lookahead_type_is_end:
return;    }
function token_advance
(){
                                             token_advance_end: {
                                                            //     if (token_lookahead_line_no == 0) {
                        load              (-1049353+global);
                        store             (0+BP);
                        loadi             (0);
                        subtract          (0+BP);
                                             compare_169_false: {
                                             compare_169_true: {
                        if(equals())      break compare_169_true;
                        loadi             (0);
                        if(always())      break compare_169_false;
} // compare_169_true:
                        loadi             (1);
} // compare_169_false:
                                             if_170_end: {
                                             if_170_next: {
                        if(equals())      break if_170_next;
                                                            //         token_get_next();
                        movebp            (8);
                        token_get_next(); 
                        movebp            (-8);
                                                            //     }
                                                            // 
                                                            //     copy(token_text,token_lookahead_text);
} // if_170_next:
} // if_170_end:
                        loadi             (-1049611+global);
                        store             (0+BP);
                        loadi             (-1049867+global);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            //     token_type = token_lookahead_type;
                        load              (-1049351+global);
                        store             (-1049350+global);
                                                            //     token_line_no = token_lookahead_line_no;
                        load              (-1049353+global);
                        store             (-1049352+global);
                                                            //     token_line_pos = token_lookahead_line_pos;
                        load              (-1049355+global);
                        store             (-1049354+global);
                                                            // 
                                                            //     error_set_line(token_line_no, token_line_pos);
                        load              (-1049352+global);
                        store             (0+BP);
                        load              (-1049354+global);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_set_line(); 
                        movebp            (-10);
                                                            // 
                                                            //     token_get_next();
                        movebp            (8);
                        token_get_next(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // token_advance_if(char s[]) {
} // token_advance_end:
return;    }
function token_advance_if
(){
                                             token_advance_if_end: {
                                                            //     if (token_text_is(s)) {
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_text_is();  
                        movebp            (-9);
                                             if_171_end: {
                                             if_171_next: {
                        if(equals())      break if_171_next;
                                                            //         token_advance();
                        movebp            (8);
                        token_advance();  
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break token_advance_if_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_171_next:
} // if_171_end:
                        loadi             (0);
                        if(always())      break token_advance_if_end;
                                                            // }
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "target_javascript.h"
                                                            // #endif
                                                            // 
                                                            // // memory layout
                                                            // // the size local storage area (stack frames) is fixed
                                                            // // the size of the string table and global storage is allocated by the compiler
                                                            // // ---------------------------------------------------------------------------
                                                            // // | string table ------> | local storage -------> | <------- global storage |
                                                            // // ---------------------------------------------------------------------------
                                                            // enum {
} // token_advance_if_end:
return;    }
                                                            //     Target_local_storage_size = 1048576        // 1 * 1024 * 1024
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // addressing modes
                                                            // enum {
                                                            //     Target_t_ix,
                                                            //     Target_t_local,
                                                            //     Target_t_local_ix,
                                                            //     Target_t_global,
                                                            //     Target_t_global_ix,
                                                            //     Target_t_indirect
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // enum {
                                                            //     Target_string_table_size = 1048576        // 1 * 1024 * 1024
                                                            // };
                                                            // 
                                                            // int target_string_table_length;
                                                            // char target_string_table[Target_string_table_size];
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // 
                                                            // int target_label_sequence_no;
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_init() {
function target_init
(){
                                             target_init_end: {
                                                            // 
                                                            //     target_string_table_length = 0;
                        loadi             (0);
                        store             (-1049868+global);
                                                            //     target_label_sequence_no = 0;
                        loadi             (0);
                        store             (-2098445+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // target_program_begin() {
} // target_init_end:
return;    }
function target_program_begin
(){
                                             target_program_begin_end: {
                                                            //     writeln("");
                        loadi             (472);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("var A;");
                        loadi             (473);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("var X;");
                        loadi             (480);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("var BP;");
                        loadi             (487);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("var RAM = [];");
                        loadi             (495);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (509);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function loadi       (n) { A = n; }");
                        loadi             (510);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (546);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function load        (n) { A = RAM[n]; }");
                        loadi             (547);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function store       (n) { RAM[n] = A; }");
                        loadi             (588);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (629);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function add         (n) { A += RAM[n]; }");
                        loadi             (630);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function subtract    (n) { A -= RAM[n]; }");
                        loadi             (672);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function multiply    (n) { A *= RAM[n]; }");
                        loadi             (714);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function divide      (n) { A = (A / RAM[n]) | 0; }");
                        loadi             (756);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (807);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function loadx       ()  { X = A; }");
                        loadi             (808);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function movebp      (n) { BP += n; }");
                        loadi             (844);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (882);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function less        ()  { return A > 0; }");
                        loadi             (883);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function greater     ()  { return A < 0; }");
                        loadi             (926);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function equals      ()  { return A == 0; }");
                        loadi             (969);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function notequals   ()  { return A != 0; }");
                        loadi             (1013);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("function always      ()  { return true; }");
                        loadi             (1057);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (1099);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("var global;");
                        loadi             (1100);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("");
                        loadi             (1112);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            // }
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // target_program_end(int global_data_size) {
} // target_program_begin_end:
return;    }
function target_program_end
(){
                                             target_program_end_end: {
                                                            //     int i;
                                                            //     int ch;
                                                            //     char s[Str_size];
                                                            //     int memory_size;
                                                            // 
                                                            //     memory_size = target_string_table_length + Target_local_storage_size + global_data_size;
                        load              (-1049868+global);
                        store             (260+BP);
                        loadi             (1048576);
                        add               (260+BP);
                        store             (260+BP);
                        load              (0+BP);
                        add               (260+BP);
                        store             (259+BP);
                                                            // 
                                                            //     writeln("");
                        loadi             (1113);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("");
                        loadi             (1114);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            //     writeln("function init_memory() {");
                        loadi             (1115);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            //     write("global = ");
                        loadi             (1140);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     int_to_str(memory_size, s);
                        load              (259+BP);
                        store             (260+BP);
                        loadi             (3+BP);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        int_to_str();     
                        movebp            (-269);
                                                            //     write(s);
                        loadi             (3+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     writeln(";");
                        loadi             (1150);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("");
                        loadi             (1152);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            //     write("BP = ");
                        loadi             (1153);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     int_to_str(target_string_table_length, s);
                        load              (-1049868+global);
                        store             (260+BP);
                        loadi             (3+BP);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        int_to_str();     
                        movebp            (-269);
                                                            //     write(s);
                        loadi             (3+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     writeln(";");
                        loadi             (1159);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("");
                        loadi             (1161);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            //     writeln("RAM = [");
                        loadi             (1162);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            //     i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            //     while (i < target_string_table_length) {
                                             while_172_end: {
while_172_test: while(true) {
                        load              (1+BP);
                        store             (260+BP);
                        load              (-1049868+global);
                        subtract          (260+BP);
                                             compare_173_false: {
                                             compare_173_true: {
                        if(less())        break compare_173_true;
                        loadi             (0);
                        if(always())      break compare_173_false;
} // compare_173_true:
                        loadi             (1);
} // compare_173_false:
                        if(equals())      break while_172_end;
                                                            //         ch = target_string_table[i];
                        load              (1+BP);
                        loadx             ();
                        load              (-2098444+global+X);
                        store             (2+BP);
                                                            // 
                                                            //         if (ch == '\\' || ch == '\'' || ch == '\"' ) { 
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (92);
                        subtract          (260+BP);
                                             compare_174_false: {
                                             compare_174_true: {
                        if(equals())      break compare_174_true;
                        loadi             (0);
                        if(always())      break compare_174_false;
} // compare_174_true:
                        loadi             (1);
} // compare_174_false:
                                             logical_or_175_false: {
                                             logical_or_175_true: {
                        if(notequals())   break logical_or_175_true;
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (39);
                        subtract          (260+BP);
                                             compare_176_false: {
                                             compare_176_true: {
                        if(equals())      break compare_176_true;
                        loadi             (0);
                        if(always())      break compare_176_false;
} // compare_176_true:
                        loadi             (1);
} // compare_176_false:
                        if(notequals())   break logical_or_175_true;
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (34);
                        subtract          (260+BP);
                                             compare_177_false: {
                                             compare_177_true: {
                        if(equals())      break compare_177_true;
                        loadi             (0);
                        if(always())      break compare_177_false;
} // compare_177_true:
                        loadi             (1);
} // compare_177_false:
                        if(notequals())   break logical_or_175_true;
                        loadi             (0);
                        if(always())      break logical_or_175_false;
} // logical_or_175_true:
                        loadi             (1);
} // logical_or_175_false:
                                             if_178_end: {
                                             if_178_next: {
                        if(equals())      break if_178_next;
                                                            //             copy(s, "\"\\ \"");
                        loadi             (3+BP);
                        store             (260+BP);
                        loadi             (1170);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        copy();           
                        movebp            (-269);
                                                            //             s[2] = ch;
                        loadi             (2);
                        store             (260+BP);
                        load              (2+BP);
                        store             (261+BP);
                        load              (260+BP);
                        loadx             ();
                        load              (261+BP);
                        store             (3+BP+X);
                                                            //             append(s,".charCodeAt(0)");
                        loadi             (3+BP);
                        store             (260+BP);
                        loadi             (1175);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        append();         
                        movebp            (-269);
                                                            //         }
                                                            //         else if (ch >= ' ' && ch <= '~') {
                        if(always())      break if_178_end;
} // if_178_next:
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (32);
                        subtract          (260+BP);
                                             compare_179_false: {
                                             compare_179_true: {
                        if(greater())     break compare_179_true;
                        if(equals())      break compare_179_true;
                        loadi             (0);
                        if(always())      break compare_179_false;
} // compare_179_true:
                        loadi             (1);
} // compare_179_false:
                                             logical_and_180_true: {
                                             logical_and_180_false: {
                        if(equals())      break logical_and_180_false;
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (126);
                        subtract          (260+BP);
                                             compare_181_false: {
                                             compare_181_true: {
                        if(less())        break compare_181_true;
                        if(equals())      break compare_181_true;
                        loadi             (0);
                        if(always())      break compare_181_false;
} // compare_181_true:
                        loadi             (1);
} // compare_181_false:
                        if(equals())      break logical_and_180_false;
                        loadi             (1);
                        if(always())      break logical_and_180_true;
} // logical_and_180_false:
                        loadi             (0);
} // logical_and_180_true:
                                             if_182_end: {
                                             if_182_next: {
                        if(equals())      break if_182_next;
                                                            //             copy(s, "\" \"");
                        loadi             (3+BP);
                        store             (260+BP);
                        loadi             (1190);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        copy();           
                        movebp            (-269);
                                                            //             s[1] = ch;
                        loadi             (1);
                        store             (260+BP);
                        load              (2+BP);
                        store             (261+BP);
                        load              (260+BP);
                        loadx             ();
                        load              (261+BP);
                        store             (3+BP+X);
                                                            //             append(s,".charCodeAt(0)");
                        loadi             (3+BP);
                        store             (260+BP);
                        loadi             (1194);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        append();         
                        movebp            (-269);
                                                            //         }
                                                            //         else {
                        if(always())      break if_182_end;
} // if_182_next:
                                                            //             int_to_str(ch, s);
                        load              (2+BP);
                        store             (260+BP);
                        loadi             (3+BP);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        int_to_str();     
                        movebp            (-269);
                                                            //         }
                                                            // 
                                                            //         i = i + 1;
} // if_182_end:
} // if_178_end:
                        load              (1+BP);
                        store             (260+BP);
                        loadi             (1);
                        add               (260+BP);
                        store             (1+BP);
                                                            //         if (i < target_string_table_length) {
                        load              (1+BP);
                        store             (260+BP);
                        load              (-1049868+global);
                        subtract          (260+BP);
                                             compare_183_false: {
                                             compare_183_true: {
                        if(less())        break compare_183_true;
                        loadi             (0);
                        if(always())      break compare_183_false;
} // compare_183_true:
                        loadi             (1);
} // compare_183_false:
                                             if_184_end: {
                                             if_184_next: {
                        if(equals())      break if_184_next;
                                                            //             append(s, ",");
                        loadi             (3+BP);
                        store             (260+BP);
                        loadi             (1209);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        append();         
                        movebp            (-269);
                                                            //         }
                                                            // 
                                                            //         writeln(s);
} // if_184_next:
} // if_184_end:
                        loadi             (3+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     }
                                                            // 
                                                            //     writeln("];");
                        if(always())      continue while_172_test;
                                             break; } // while_172_test:
} // while_172_end:
                        loadi             (1211);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("");
                        loadi             (1214);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // 
                                                            // 
                                                            //     write("for (i = ");
                        loadi             (1215);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     int_to_str(target_string_table_length, s);
                        load              (-1049868+global);
                        store             (260+BP);
                        loadi             (3+BP);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        int_to_str();     
                        movebp            (-269);
                                                            //     write(s);
                        loadi             (3+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     write("; i < ");
                        loadi             (1225);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     int_to_str(memory_size, s);
                        load              (259+BP);
                        store             (260+BP);
                        loadi             (3+BP);
                        store             (261+BP);
                        load              (261+BP);
                        store             (270+BP);
                        load              (260+BP);
                        store             (269+BP);
                        movebp            (269);
                        int_to_str();     
                        movebp            (-269);
                                                            //     write(s);
                        loadi             (3+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        write();          
                        movebp            (-268);
                                                            //     writeln("; i ++) {");
                        loadi             (1232);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("RAM[i] = 0;");
                        loadi             (1242);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("}");
                        loadi             (1254);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            //     writeln("}");
                        loadi             (1256);
                        store             (260+BP);
                        load              (260+BP);
                        store             (268+BP);
                        movebp            (268);
                        writeln();        
                        movebp            (-268);
                                                            // } 
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // target_comment_print(char comment_block[]) {
} // target_program_end_end:
return;    }
function target_comment_print
(){
                                             target_comment_print_end: {
                                                            //     int i;
                                                            //     char line[Str_size];
                                                            // 
                                                            //     i = 0;
                        loadi             (0);
                        store             (1+BP);
                                                            //     copy(line, "");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1258);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            // 
                                                            //     while (comment_block[i] != 0) {
                                             while_185_end: {
while_185_test: while(true) {
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (258+BP);
                        load              (0+BP);
                        add               (258+BP);
                        loadx             ();
                        load              (X);
                        store             (258+BP);
                        loadi             (0);
                        subtract          (258+BP);
                                             compare_186_false: {
                                             compare_186_true: {
                        if(notequals())   break compare_186_true;
                        loadi             (0);
                        if(always())      break compare_186_false;
} // compare_186_true:
                        loadi             (1);
} // compare_186_false:
                        if(equals())      break while_185_end;
                                                            // 
                                                            //         if (str_equals(line, "")) {
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1259);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_187_end: {
                                             if_187_next: {
                        if(equals())      break if_187_next;
                                                            //             fill_until_col(line, 60);
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (60);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        fill_until_col(); 
                        movebp            (-267);
                                                            //             append(line, "// ");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1260);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        append();         
                        movebp            (-267);
                                                            //         }
                                                            // 
                                                            //         if (comment_block[i] != '\n') {
} // if_187_next:
} // if_187_end:
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (258+BP);
                        load              (0+BP);
                        add               (258+BP);
                        loadx             ();
                        load              (X);
                        store             (258+BP);
                        loadi             (10);
                        subtract          (258+BP);
                                             compare_188_false: {
                                             compare_188_true: {
                        if(notequals())   break compare_188_true;
                        loadi             (0);
                        if(always())      break compare_188_false;
} // compare_188_true:
                        loadi             (1);
} // compare_188_false:
                                             if_189_end: {
                                             if_189_next: {
                        if(equals())      break if_189_next;
                                                            //             append_char(line, comment_block[i]);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (259+BP);
                        load              (0+BP);
                        add               (259+BP);
                        loadx             ();
                        load              (X);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        append_char();    
                        movebp            (-267);
                                                            //         }
                                                            // 
                                                            //         if (comment_block[i] == '\n' || comment_block[i + 1] == 0) {
} // if_189_next:
} // if_189_end:
                        load              (1+BP);
                        loadx             ();
                        loadi             (X);
                        store             (258+BP);
                        load              (0+BP);
                        add               (258+BP);
                        loadx             ();
                        load              (X);
                        store             (258+BP);
                        loadi             (10);
                        subtract          (258+BP);
                                             compare_190_false: {
                                             compare_190_true: {
                        if(equals())      break compare_190_true;
                        loadi             (0);
                        if(always())      break compare_190_false;
} // compare_190_true:
                        loadi             (1);
} // compare_190_false:
                                             logical_or_191_false: {
                                             logical_or_191_true: {
                        if(notequals())   break logical_or_191_true;
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1);
                        add               (258+BP);
                        loadx             ();
                        loadi             (X);
                        store             (258+BP);
                        load              (0+BP);
                        add               (258+BP);
                        loadx             ();
                        load              (X);
                        store             (258+BP);
                        loadi             (0);
                        subtract          (258+BP);
                                             compare_192_false: {
                                             compare_192_true: {
                        if(equals())      break compare_192_true;
                        loadi             (0);
                        if(always())      break compare_192_false;
} // compare_192_true:
                        loadi             (1);
} // compare_192_false:
                        if(notequals())   break logical_or_191_true;
                        loadi             (0);
                        if(always())      break logical_or_191_false;
} // logical_or_191_true:
                        loadi             (1);
} // logical_or_191_false:
                                             if_193_end: {
                                             if_193_next: {
                        if(equals())      break if_193_next;
                                                            //             writeln(line);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        writeln();        
                        movebp            (-266);
                                                            //             copy(line, "");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1264);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //         }
                                                            // 
                                                            //         i = i + 1;
} // if_193_next:
} // if_193_end:
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1);
                        add               (258+BP);
                        store             (1+BP);
                                                            //     }
                                                            // }
                        if(always())      continue while_185_test;
                                             break; } // while_185_test:
} // while_185_end:
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // target_instruction_print_line(char field1[], char field2[]) {
} // target_comment_print_end:
return;    }
function target_instruction_print_line
(){
                                             target_instruction_print_line_end: {
                                                            //     char line[Str_size];
                                                            // 
                                                            //     copy(line, "");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1265);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            // 
                                                            //     append(line, " ");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1266);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     fill_until_col(line, 24);
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (24);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        fill_until_col(); 
                        movebp            (-266);
                                                            // 
                                                            //     append(line, field1);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (0+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     append(line, " ");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1268);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     fill_until_col(line, 42);
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (42);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        fill_until_col(); 
                        movebp            (-266);
                                                            //     append(line, field2);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (1+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            // 
                                                            //     writeln(line);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln();        
                        movebp            (-265);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_instruction_branch(char condition[], char label[], char label_postfix[], char loop_control_statement[]) {
} // target_instruction_print_line_end:
return;    }
function target_instruction_branch
(){
                                             target_instruction_branch_end: {
                                                            //     char instruction[Str_size];
                                                            //     char operand_field[Str_size];
                                                            // 
                                                            //     copy(instruction, "if(");
                        loadi             (4+BP);
                        store             (516+BP);
                        loadi             (1270);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            //     append(instruction, condition);
                        loadi             (4+BP);
                        store             (516+BP);
                        load              (0+BP);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(instruction, "())");
                        loadi             (4+BP);
                        store             (516+BP);
                        loadi             (1274);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //         
                                                            //     copy(operand_field, loop_control_statement);
                        loadi             (260+BP);
                        store             (516+BP);
                        load              (3+BP);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            //     append(operand_field, " ");
                        loadi             (260+BP);
                        store             (516+BP);
                        loadi             (1278);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(operand_field, label);
                        loadi             (260+BP);
                        store             (516+BP);
                        load              (1+BP);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(operand_field, label_postfix);
                        loadi             (260+BP);
                        store             (516+BP);
                        load              (2+BP);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(operand_field, ";");
                        loadi             (260+BP);
                        store             (516+BP);
                        loadi             (1280);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     target_instruction_print_line(instruction, operand_field);
                        loadi             (4+BP);
                        store             (516+BP);
                        loadi             (260+BP);
                        store             (517+BP);
                        load              (517+BP);
                        store             (523+BP);
                        load              (516+BP);
                        store             (522+BP);
                        movebp            (522);
                        target_instruction_print_line(); 
                        movebp            (-522);
                                                            // }
                                                            // 
                                                            // target_instruction_memory_operand(char instruction[], int operand, int address_mode) {
} // target_instruction_branch_end:
return;    }
function target_instruction_memory_operand
(){
                                             target_instruction_memory_operand_end: {
                                                            //     char operand_str[Str_size];
                                                            //     char operand_field[Str_size];
                                                            // 
                                                            //     int_to_str(operand, operand_str);
                        load              (1+BP);
                        store             (515+BP);
                        loadi             (3+BP);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        int_to_str();     
                        movebp            (-522);
                                                            // 
                                                            //     if (address_mode == Target_t_global) {
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (3);
                        subtract          (515+BP);
                                             compare_194_false: {
                                             compare_194_true: {
                        if(equals())      break compare_194_true;
                        loadi             (0);
                        if(always())      break compare_194_false;
} // compare_194_true:
                        loadi             (1);
} // compare_194_false:
                                             if_195_end: {
                                             if_195_next: {
                        if(equals())      break if_195_next;
                                                            //         if (operand < 0) {
                        load              (1+BP);
                        store             (515+BP);
                        loadi             (0);
                        subtract          (515+BP);
                                             compare_196_false: {
                                             compare_196_true: {
                        if(less())        break compare_196_true;
                        loadi             (0);
                        if(always())      break compare_196_false;
} // compare_196_true:
                        loadi             (1);
} // compare_196_false:
                                             if_197_end: {
                                             if_197_next: {
                        if(equals())      break if_197_next;
                                                            //             append(operand_str, "+global");
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1282);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //         }
                                                            //     } else if (address_mode == Target_t_global_ix) {
} // if_197_next:
} // if_197_end:
                        if(always())      break if_195_end;
} // if_195_next:
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (4);
                        subtract          (515+BP);
                                             compare_198_false: {
                                             compare_198_true: {
                        if(equals())      break compare_198_true;
                        loadi             (0);
                        if(always())      break compare_198_false;
} // compare_198_true:
                        loadi             (1);
} // compare_198_false:
                                             if_199_end: {
                                             if_199_next: {
                        if(equals())      break if_199_next;
                                                            //         if (operand < 0) {
                        load              (1+BP);
                        store             (515+BP);
                        loadi             (0);
                        subtract          (515+BP);
                                             compare_200_false: {
                                             compare_200_true: {
                        if(less())        break compare_200_true;
                        loadi             (0);
                        if(always())      break compare_200_false;
} // compare_200_true:
                        loadi             (1);
} // compare_200_false:
                                             if_201_end: {
                                             if_201_next: {
                        if(equals())      break if_201_next;
                                                            //             append(operand_str, "+global");
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1290);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //         }
                                                            //         append(operand_str, "+X");
} // if_201_next:
} // if_201_end:
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1298);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     } else if (address_mode == Target_t_local) {
                        if(always())      break if_199_end;
} // if_199_next:
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (1);
                        subtract          (515+BP);
                                             compare_202_false: {
                                             compare_202_true: {
                        if(equals())      break compare_202_true;
                        loadi             (0);
                        if(always())      break compare_202_false;
} // compare_202_true:
                        loadi             (1);
} // compare_202_false:
                                             if_203_end: {
                                             if_203_next: {
                        if(equals())      break if_203_next;
                                                            //         append(operand_str, "+BP");
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1301);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     } else if (address_mode == Target_t_local_ix) {
                        if(always())      break if_203_end;
} // if_203_next:
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (2);
                        subtract          (515+BP);
                                             compare_204_false: {
                                             compare_204_true: {
                        if(equals())      break compare_204_true;
                        loadi             (0);
                        if(always())      break compare_204_false;
} // compare_204_true:
                        loadi             (1);
} // compare_204_false:
                                             if_205_end: {
                                             if_205_next: {
                        if(equals())      break if_205_next;
                                                            //         append(operand_str, "+BP+X");
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1305);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     } else if (address_mode == Target_t_ix || address_mode == Target_t_indirect) {
                        if(always())      break if_205_end;
} // if_205_next:
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (0);
                        subtract          (515+BP);
                                             compare_206_false: {
                                             compare_206_true: {
                        if(equals())      break compare_206_true;
                        loadi             (0);
                        if(always())      break compare_206_false;
} // compare_206_true:
                        loadi             (1);
} // compare_206_false:
                                             logical_or_207_false: {
                                             logical_or_207_true: {
                        if(notequals())   break logical_or_207_true;
                        load              (2+BP);
                        store             (515+BP);
                        loadi             (5);
                        subtract          (515+BP);
                                             compare_208_false: {
                                             compare_208_true: {
                        if(equals())      break compare_208_true;
                        loadi             (0);
                        if(always())      break compare_208_false;
} // compare_208_true:
                        loadi             (1);
} // compare_208_false:
                        if(notequals())   break logical_or_207_true;
                        loadi             (0);
                        if(always())      break logical_or_207_false;
} // logical_or_207_true:
                        loadi             (1);
} // logical_or_207_false:
                                             if_209_end: {
                                             if_209_next: {
                        if(equals())      break if_209_next;
                                                            //         copy(operand_str, "X");
                        loadi             (3+BP);
                        store             (515+BP);
                        loadi             (1311);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            // 
                                                            //     } else {
                        if(always())      break if_209_end;
} // if_209_next:
                                                            //         error_internal();
                        movebp            (520);
                        error_internal(); 
                        movebp            (-520);
                                                            //     }
                                                            // 
                                                            //     copy(operand_field, "(");
} // if_209_end:
} // if_205_end:
} // if_203_end:
} // if_199_end:
} // if_195_end:
                        loadi             (259+BP);
                        store             (515+BP);
                        loadi             (1313);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            //     append(operand_field, operand_str);
                        loadi             (259+BP);
                        store             (515+BP);
                        loadi             (3+BP);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(operand_field, ");");
                        loadi             (259+BP);
                        store             (515+BP);
                        loadi             (1315);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     target_instruction_print_line(instruction, operand_field);
                        load              (0+BP);
                        store             (515+BP);
                        loadi             (259+BP);
                        store             (516+BP);
                        load              (516+BP);
                        store             (523+BP);
                        load              (515+BP);
                        store             (522+BP);
                        movebp            (522);
                        target_instruction_print_line(); 
                        movebp            (-522);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_instruction_operand(char instruction[], int operand) {
} // target_instruction_memory_operand_end:
return;    }
function target_instruction_operand
(){
                                             target_instruction_operand_end: {
                                                            //     char operand_str[Str_size];
                                                            //     char operand_field[Str_size];
                                                            // 
                                                            //     int_to_str(operand, operand_str);
                        load              (1+BP);
                        store             (514+BP);
                        loadi             (2+BP);
                        store             (515+BP);
                        load              (515+BP);
                        store             (523+BP);
                        load              (514+BP);
                        store             (522+BP);
                        movebp            (522);
                        int_to_str();     
                        movebp            (-522);
                                                            // 
                                                            //     copy(operand_field, "(");
                        loadi             (258+BP);
                        store             (514+BP);
                        loadi             (1318);
                        store             (515+BP);
                        load              (515+BP);
                        store             (523+BP);
                        load              (514+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            //     append(operand_field, operand_str);
                        loadi             (258+BP);
                        store             (514+BP);
                        loadi             (2+BP);
                        store             (515+BP);
                        load              (515+BP);
                        store             (523+BP);
                        load              (514+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            //     append(operand_field, ");");
                        loadi             (258+BP);
                        store             (514+BP);
                        loadi             (1320);
                        store             (515+BP);
                        load              (515+BP);
                        store             (523+BP);
                        load              (514+BP);
                        store             (522+BP);
                        movebp            (522);
                        append();         
                        movebp            (-522);
                                                            // 
                                                            //     target_instruction_print_line(instruction, operand_field);
                        load              (0+BP);
                        store             (514+BP);
                        loadi             (258+BP);
                        store             (515+BP);
                        load              (515+BP);
                        store             (523+BP);
                        load              (514+BP);
                        store             (522+BP);
                        movebp            (522);
                        target_instruction_print_line(); 
                        movebp            (-522);
                                                            // }
                                                            // 
                                                            // target_instruction(char instruction[]) {
} // target_instruction_operand_end:
return;    }
function target_instruction
(){
                                             target_instruction_end: {
                                                            // 
                                                            //     target_instruction_print_line(instruction, "();");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1323);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_op_branch(char label[], char postfix[]) {
} // target_instruction_end:
return;    }
function target_op_branch
(){
                                             target_op_branch_end: {
                                                            //     target_instruction_branch("always", label, postfix, "break");
                        loadi             (1327);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1334);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_back(char label[], char postfix[]) {
} // target_op_branch_end:
return;    }
function target_op_branch_back
(){
                                             target_op_branch_back_end: {
                                                            //     target_instruction_branch("always", label, postfix, "continue");
                        loadi             (1340);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1347);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_less(char label[], char postfix[]) {
} // target_op_branch_back_end:
return;    }
function target_op_branch_if_less
(){
                                             target_op_branch_if_less_end: {
                                                            //     target_instruction_branch("less", label, postfix, "break");
                        loadi             (1356);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1361);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_greater(char label[], char postfix[]) {
} // target_op_branch_if_less_end:
return;    }
function target_op_branch_if_greater
(){
                                             target_op_branch_if_greater_end: {
                                                            //     target_instruction_branch("greater", label, postfix, "break");
                        loadi             (1367);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1375);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_equals(char label[], char postfix[]) {
} // target_op_branch_if_greater_end:
return;    }
function target_op_branch_if_equals
(){
                                             target_op_branch_if_equals_end: {
                                                            //     target_instruction_branch("equals", label, postfix, "break");
                        loadi             (1381);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1388);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_not_equals(char label[], char postfix[]) {
} // target_op_branch_if_equals_end:
return;    }
function target_op_branch_if_not_equals
(){
                                             target_op_branch_if_not_equals_end: {
                                                            //     target_instruction_branch("notequals", label, postfix, "break");
                        loadi             (1394);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1404);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_instruction_branch(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_true(char label[], char postfix[]) {
} // target_op_branch_if_not_equals_end:
return;    }
function target_op_branch_if_true
(){
                                             target_op_branch_if_true_end: {
                                                            //     target_op_branch_if_not_equals(label, postfix);
                        load              (0+BP);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (11+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_not_equals(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_op_branch_if_false(char label[], char postfix[]) {
} // target_op_branch_if_true_end:
return;    }
function target_op_branch_if_false
(){
                                             target_op_branch_if_false_end: {
                                                            //     target_op_branch_if_equals(label, postfix);
                        load              (0+BP);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (11+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_equals(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // target_op_loadx() {
} // target_op_branch_if_false_end:
return;    }
function target_op_loadx
(){
                                             target_op_loadx_end: {
                                                            //     target_instruction("loadx");
                        loadi             (1410);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_instruction(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // target_op_load_constant(int operand) {
} // target_op_loadx_end:
return;    }
function target_op_load_constant
(){
                                             target_op_load_constant_end: {
                                                            //     target_instruction_operand("loadi", operand);
                        loadi             (1416);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_operand(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_op_load_address(int operand, int address_mode_type) {
} // target_op_load_constant_end:
return;    }
function target_op_load_address
(){
                                             target_op_load_address_end: {
                                                            //     target_instruction_memory_operand("loadi", operand, address_mode_type);
                        loadi             (1422);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_load(int operand, int address_mode_type) {
} // target_op_load_address_end:
return;    }
function target_op_load
(){
                                             target_op_load_end: {
                                                            //     target_instruction_memory_operand("load", operand, address_mode_type);
                        loadi             (1428);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_store(int operand, int address_mode_type) {
} // target_op_load_end:
return;    }
function target_op_store
(){
                                             target_op_store_end: {
                                                            //     target_instruction_memory_operand("store", operand, address_mode_type);
                        loadi             (1433);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_add(int operand, int address_mode_type) {
} // target_op_store_end:
return;    }
function target_op_add
(){
                                             target_op_add_end: {
                                                            //     target_instruction_memory_operand("add", operand, address_mode_type);
                        loadi             (1439);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_subtract(int operand, int address_mode_type) {
} // target_op_add_end:
return;    }
function target_op_subtract
(){
                                             target_op_subtract_end: {
                                                            //     target_instruction_memory_operand("subtract", operand, address_mode_type);
                        loadi             (1443);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_multiply (int operand, int address_mode_type) {
} // target_op_subtract_end:
return;    }
function target_op_multiply
(){
                                             target_op_multiply_end: {
                                                            //     target_instruction_memory_operand("multiply", operand, address_mode_type);
                        loadi             (1452);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_divide(int operand, int address_mode_type) {
} // target_op_multiply_end:
return;    }
function target_op_divide
(){
                                             target_op_divide_end: {
                                                            //     target_instruction_memory_operand("divide", operand, address_mode_type);
                        loadi             (1461);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // target_op_test() {
} // target_op_divide_end:
return;    }
function target_op_test
(){
                                             target_op_test_end: {
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_op_subroutine_begin(char function_name[], int argument_count, int local_frame_size) {
} // target_op_test_end:
return;    }
function target_op_subroutine_begin
(){
                                             target_op_subroutine_begin_end: {
                                                            // 
                                                            //     write("function ");
                        loadi             (1468);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //     writeln(function_name);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            //     writeln("(){");
                        loadi             (1478);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // target_op_subroutine_end(char function_name[], int argument_count, int local_frame_size) {
} // target_op_subroutine_begin_end:
return;    }
function target_op_subroutine_end
(){
                                             target_op_subroutine_end_end: {
                                                            // 
                                                            //     writeln("return;    }");
                        loadi             (1482);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // target_op_call_subroutine(char function_name[], int argument_count, int local_frame_size) {
} // target_op_subroutine_end_end:
return;    }
function target_op_call_subroutine
(){
                                             target_op_call_subroutine_end: {
                                                            //     char instruction_field[Str_size];
                                                            // 
                                                            //     target_instruction_operand("movebp", argument_count + local_frame_size);
                        loadi             (1495);
                        store             (259+BP);
                        load              (1+BP);
                        store             (260+BP);
                        load              (2+BP);
                        add               (260+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (267+BP);
                        load              (259+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_instruction_operand(); 
                        movebp            (-266);
                                                            // 
                                                            //     copy(instruction_field, function_name);
                        loadi             (3+BP);
                        store             (259+BP);
                        load              (0+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (267+BP);
                        load              (259+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     append(instruction_field, "();");
                        loadi             (3+BP);
                        store             (259+BP);
                        loadi             (1502);
                        store             (260+BP);
                        load              (260+BP);
                        store             (267+BP);
                        load              (259+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     target_instruction_print_line(instruction_field, "");
                        loadi             (3+BP);
                        store             (259+BP);
                        loadi             (1506);
                        store             (260+BP);
                        load              (260+BP);
                        store             (267+BP);
                        load              (259+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_instruction_print_line(); 
                        movebp            (-266);
                                                            // 
                                                            //     target_instruction_operand("movebp", -(argument_count + local_frame_size));
                        loadi             (1507);
                        store             (259+BP);
                        load              (1+BP);
                        store             (260+BP);
                        load              (2+BP);
                        add               (260+BP);
                        store             (260+BP);
                        loadi             (0);
                        subtract          (260+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (267+BP);
                        load              (259+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_instruction_operand(); 
                        movebp            (-266);
                                                            // 
                                                            // }
                                                            // 
                                                            // target_op_pass_argument(int argument_no, int argument_count, int local_frame_size) {
} // target_op_call_subroutine_end:
return;    }
function target_op_pass_argument
(){
                                             target_op_pass_argument_end: {
                                                            // 
                                                            //     target_instruction_memory_operand("store", (argument_count + local_frame_size) + (argument_no - 1), Target_t_local);
                        loadi             (1514);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (2+BP);
                        add               (4+BP);
                        store             (4+BP);
                        load              (0+BP);
                        store             (5+BP);
                        loadi             (1);
                        store             (6+BP);
                        load              (5+BP);
                        subtract          (6+BP);
                        add               (4+BP);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_instruction_memory_operand(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_begin_branch_block(char label[], char label_postfix[]) {
} // target_op_pass_argument_end:
return;    }
function target_begin_branch_block
(){
                                             target_begin_branch_block_end: {
                                                            //         char s[Str_size];
                                                            // 
                                                            //         copy(s, "");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1520);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //         fill_until_col(s, 45);
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (45);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        fill_until_col(); 
                        movebp            (-266);
                                                            //         append(s, label);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (0+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         append(s, label_postfix);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (1+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         append(s, ": {");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1521);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         writeln(s);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln();        
                        movebp            (-265);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_end_branch_block(char label[], char label_postfix[]) {
} // target_begin_branch_block_end:
return;    }
function target_end_branch_block
(){
                                             target_end_branch_block_end: {
                                                            //         write("} // ");
                        loadi             (1525);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //         write(label);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //         write(label_postfix);
                        load              (1+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //         writeln(":");
                        loadi             (1531);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_begin_back_branch_block(char label[], char label_postfix[]) {
} // target_end_branch_block_end:
return;    }
function target_begin_back_branch_block
(){
                                             target_begin_back_branch_block_end: {
                                                            // 
                                                            //         write(label);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //         write(label_postfix);
                        load              (1+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        write();          
                        movebp            (-9);
                                                            //         writeln(": while(true) {");
                        loadi             (1533);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        writeln();        
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_end_back_branch_block(char label[], char label_postfix[]) {
} // target_begin_back_branch_block_end:
return;    }
function target_end_back_branch_block
(){
                                             target_end_back_branch_block_end: {
                                                            //         char s[Str_size];
                                                            // 
                                                            //         copy(s, "");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1549);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //         fill_until_col(s, 45);
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (45);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        fill_until_col(); 
                        movebp            (-266);
                                                            //         append(s, "break; } // ");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1550);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         append(s, label);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (0+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         append(s, label_postfix);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (1+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         append(s, ":");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1563);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //         writeln(s);
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        writeln();        
                        movebp            (-265);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_built_in_function_debug() {
} // target_end_back_branch_block_end:
return;    }
function target_built_in_function_debug
(){
                                             target_built_in_function_debug_end: {
                                                            // 
                                                            //     target_instruction_print_line("printIntegerNumber", "(A);");
                        loadi             (1565);
                        store             (0+BP);
                        loadi             (1584);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_built_in_function_exit() {
} // target_built_in_function_debug_end:
return;    }
function target_built_in_function_exit
(){
                                             target_built_in_function_exit_end: {
                                                            // 
                                                            //     target_instruction_print_line("abortProgram", "(A);");
                        loadi             (1589);
                        store             (0+BP);
                        loadi             (1602);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_built_in_function_fgetc() {
} // target_built_in_function_exit_end:
return;    }
function target_built_in_function_fgetc
(){
                                             target_built_in_function_fgetc_end: {
                                                            // 
                                                            //     target_instruction_print_line("A=readCharCodeFromStdin", "();");
                        loadi             (1607);
                        store             (0+BP);
                        loadi             (1631);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_built_in_function_fputc_stdout() {
} // target_built_in_function_fgetc_end:
return;    }
function target_built_in_function_fputc_stdout
(){
                                             target_built_in_function_fputc_stdout_end: {
                                                            // 
                                                            //     target_instruction_print_line("printCharCodeToStdout", "(A);");
                        loadi             (1635);
                        store             (0+BP);
                        loadi             (1657);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // target_built_in_function_fputc_stderr() {
} // target_built_in_function_fputc_stdout_end:
return;    }
function target_built_in_function_fputc_stderr
(){
                                             target_built_in_function_fputc_stderr_end: {
                                                            // 
                                                            //     target_instruction_print_line("printCharCodeToStderr", "(A);");
                        loadi             (1662);
                        store             (0+BP);
                        loadi             (1684);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_instruction_print_line(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_allocate_string(char string[], int string_length) {
} // target_built_in_function_fputc_stderr_end:
return;    }
function target_allocate_string
(){
                                             target_allocate_string_end: {
                                                            //     int i;
                                                            //     int address;
                                                            // 
                                                            //     if (target_string_table_length + string_length > Target_string_table_size) {
                        load              (-1049868+global);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        store             (4+BP);
                        loadi             (1048576);
                        subtract          (4+BP);
                                             compare_210_false: {
                                             compare_210_true: {
                        if(greater())     break compare_210_true;
                        loadi             (0);
                        if(always())      break compare_210_false;
} // compare_210_true:
                        loadi             (1);
} // compare_210_false:
                                             if_211_end: {
                                             if_211_next: {
                        if(equals())      break if_211_next;
                                                            //         error_target("out of initialised (string) storage space");
                        loadi             (1689);
                        store             (4+BP);
                        load              (4+BP);
                        store             (11+BP);
                        movebp            (11);
                        error_target();   
                        movebp            (-11);
                                                            //     }
                                                            // 
                                                            //     i = 0;
} // if_211_next:
} // if_211_end:
                        loadi             (0);
                        store             (2+BP);
                                                            //     while(i <= string_length) {
                                             while_212_end: {
while_212_test: while(true) {
                        load              (2+BP);
                        store             (4+BP);
                        load              (1+BP);
                        subtract          (4+BP);
                                             compare_213_false: {
                                             compare_213_true: {
                        if(less())        break compare_213_true;
                        if(equals())      break compare_213_true;
                        loadi             (0);
                        if(always())      break compare_213_false;
} // compare_213_true:
                        loadi             (1);
} // compare_213_false:
                        if(equals())      break while_212_end;
                                                            //         target_string_table[target_string_table_length + i] = string[i];
                        load              (-1049868+global);
                        store             (4+BP);
                        load              (2+BP);
                        add               (4+BP);
                        store             (4+BP);
                        load              (2+BP);
                        loadx             ();
                        loadi             (X);
                        store             (5+BP);
                        load              (0+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (X);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (-2098444+global+X);
                                                            //         i = i + 1;
                        load              (2+BP);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (2+BP);
                                                            //     }
                                                            // 
                                                            //     address = target_string_table_length;
                        if(always())      continue while_212_test;
                                             break; } // while_212_test:
} // while_212_end:
                        load              (-1049868+global);
                        store             (3+BP);
                                                            //     target_string_table_length = target_string_table_length + string_length;
                        load              (-1049868+global);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        store             (-1049868+global);
                                                            // 
                                                            //     return address;
                        load              (3+BP);
                        if(always())      break target_allocate_string_end;
                                                            // }
                                                            // 
                                                            // target_allocate_global_address(int offset, int var_size) {
} // target_allocate_string_end:
return;    }
function target_allocate_global_address
(){
                                             target_allocate_global_address_end: {
                                                            //     
                                                            //     return -offset - var_size;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (2+BP);
                        subtract          (3+BP);
                        if(always())      break target_allocate_global_address_end;
                                                            // }
                                                            // 
                                                            // target_allocate_local_address(int offset, int var_size, int function_argument_count) {
} // target_allocate_global_address_end:
return;    }
function target_allocate_local_address
(){
                                             target_allocate_local_address_end: {
                                                            // 
                                                            //     return function_argument_count + offset;
                        load              (2+BP);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        if(always())      break target_allocate_local_address_end;
                                                            // }
                                                            // 
                                                            // target_allocate_function_argument_address(int argument_no, int var_size) {
} // target_allocate_local_address_end:
return;    }
function target_allocate_function_argument_address
(){
                                             target_allocate_function_argument_address_end: {
                                                            // 
                                                            //     return argument_no - 1;
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (2+BP);
                        subtract          (3+BP);
                        if(always())      break target_allocate_function_argument_address_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // target_get_label(char start_with[], char out_label[]) {
} // target_allocate_function_argument_address_end:
return;    }
function target_get_label
(){
                                             target_get_label_end: {
                                                            //     char sequence_no_str[Str_size];
                                                            // 
                                                            //     int_to_str(target_label_sequence_no, sequence_no_str);
                        load              (-2098445+global);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        int_to_str();     
                        movebp            (-266);
                                                            //     copy(out_label, start_with);
                        load              (1+BP);
                        store             (258+BP);
                        load              (0+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     append(out_label, "_");
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1731);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     append(out_label, sequence_no_str);
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            // 
                                                            //     target_label_sequence_no = target_label_sequence_no + 1;
                        load              (-2098445+global);
                        store             (258+BP);
                        loadi             (1);
                        add               (258+BP);
                        store             (-2098445+global);
                                                            // }
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "compiler.h"
                                                            // #endif
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // enum {
} // target_get_label_end:
return;    }
                                                            //     Compiler_t_integer_pointer,
                                                            //     Compiler_t_integer,
                                                            //     Compiler_t_integer_array,
                                                            //     Compiler_t_integer_constant,
                                                            //     Compiler_t_function
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // enum {
                                                            //     Compiler_t_global,
                                                            //     Compiler_t_local
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // 
                                                            // enum {
                                                            //     Compiler_max_identifiers = 8192
                                                            // };
                                                            // 
                                                            // int compiler_col_value[Compiler_max_identifiers];
                                                            // int compiler_col_type[Compiler_max_identifiers];
                                                            // char compiler_col_name[2097152];   // Compiler_max_identifiers * Str_size
                                                            // char compiler_col_parent[2097152]; // Compiler_max_identifiers * Str_size
                                                            // 
                                                            // int compiler_identifier_table_size;
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // char compiler_function_name[Str_size];
                                                            // int compiler_function_argument_count;
                                                            // int compiler_function_local_data_size;
                                                            // int compiler_function_temp_data_size;
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // int compiler_global_data_size;
                                                            // 
                                                            // enum {
                                                            //     Compiler_max_temp_data_size = 8
                                                            // };
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // char compiler_source_chunk[Source_buffer_length];
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // int compiler_current_enum_value;
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // int compiler_label_sequence_no;
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_init() {
function compiler_init
(){
                                             compiler_init_end: {
                                                            // 
                                                            //     compiler_identifier_table_size = 0;
                        loadi             (0);
                        store             (-6309134+global);
                                                            //     compiler_global_data_size = 0;
                        loadi             (0);
                        store             (-6309394+global);
                                                            // 
                                                            //     compiler_current_enum_value = 0;
                        loadi             (0);
                        store             (-7357971+global);
                                                            //     compiler_label_sequence_no = 0;
                        loadi             (0);
                        store             (-7357972+global);
                                                            // 
                                                            //     copy(compiler_function_name, "");
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (1733);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            //     compiler_function_argument_count = 0;
                        loadi             (0);
                        store             (-6309391+global);
                                                            //     compiler_function_local_data_size = 0;
                        loadi             (0);
                        store             (-6309392+global);
                                                            //     compiler_function_temp_data_size = 0;
                        loadi             (0);
                        store             (-6309393+global);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // compiler_get_current_scope() {
} // compiler_init_end:
return;    }
function compiler_get_current_scope
(){
                                             compiler_get_current_scope_end: {
                                                            //     if (! str_equals(compiler_function_name, "")) {
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (1734);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        str_equals();     
                        movebp            (-10);
                                             logical_not_214_true: {
                                             logical_not_214_false: {
                        if(notequals())   break logical_not_214_false;
                        loadi             (1);
                        if(always())      break logical_not_214_true;
} // logical_not_214_false:
                        loadi             (0);
} // logical_not_214_true:
                                             if_215_end: {
                                             if_215_next: {
                        if(equals())      break if_215_next;
                                                            //         return Compiler_t_local;
                        loadi             (1);
                        if(always())      break compiler_get_current_scope_end;
                                                            //     }
                                                            // 
                                                            //     return Compiler_t_global;
} // if_215_next:
} // if_215_end:
                        loadi             (0);
                        if(always())      break compiler_get_current_scope_end;
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // compiler_find_identifier_with_parent(char name[], char parent[], int out_value[], int out_type[]) {
} // compiler_get_current_scope_end:
return;    }
function compiler_find_identifier_with_parent
(){
                                             compiler_find_identifier_with_parent_end: {
                                                            //     int i;
                                                            //     char str[Str_size];
                                                            // 
                                                            //     i = 0;
                        loadi             (0);
                        store             (4+BP);
                                                            //     while (i < compiler_identifier_table_size) {
                                             while_216_end: {
while_216_test: while(true) {
                        load              (4+BP);
                        store             (261+BP);
                        load              (-6309134+global);
                        subtract          (261+BP);
                                             compare_217_false: {
                                             compare_217_true: {
                        if(less())        break compare_217_true;
                        loadi             (0);
                        if(always())      break compare_217_false;
} // compare_217_true:
                        loadi             (1);
} // compare_217_false:
                        if(equals())      break while_216_end;
                                                            //         copy_from(str, compiler_col_name, i * Str_size);
                        loadi             (5+BP);
                        store             (261+BP);
                        loadi             (-4211981+global);
                        store             (262+BP);
                        load              (4+BP);
                        store             (263+BP);
                        loadi             (256);
                        multiply          (263+BP);
                        store             (263+BP);
                        load              (263+BP);
                        store             (270+BP);
                        load              (262+BP);
                        store             (269+BP);
                        load              (261+BP);
                        store             (268+BP);
                        movebp            (268);
                        copy_from();      
                        movebp            (-268);
                                                            //         if (str_equals(str, name)) {
                        loadi             (5+BP);
                        store             (261+BP);
                        load              (0+BP);
                        store             (262+BP);
                        load              (262+BP);
                        store             (268+BP);
                        load              (261+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_218_end: {
                                             if_218_next: {
                        if(equals())      break if_218_next;
                                                            //             out_value[0] = compiler_col_value[i];
                        loadi             (0);
                        store             (261+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (-2106637+global+X);
                        store             (262+BP);
                        load              (261+BP);
                        loadx             ();
                        load              (262+BP);
                        store             (261+BP);
                        loadi             (X);
                        store             (262+BP);
                        load              (2+BP);
                        add               (262+BP);
                        loadx             ();
                        load              (261+BP);
                        store             (X);
                                                            //             out_type[0] = compiler_col_type[i];
                        loadi             (0);
                        store             (261+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (-2114829+global+X);
                        store             (262+BP);
                        load              (261+BP);
                        loadx             ();
                        load              (262+BP);
                        store             (261+BP);
                        loadi             (X);
                        store             (262+BP);
                        load              (3+BP);
                        add               (262+BP);
                        loadx             ();
                        load              (261+BP);
                        store             (X);
                                                            //             copy_from(str, compiler_col_parent, i * Str_size);
                        loadi             (5+BP);
                        store             (261+BP);
                        loadi             (-6309133+global);
                        store             (262+BP);
                        load              (4+BP);
                        store             (263+BP);
                        loadi             (256);
                        multiply          (263+BP);
                        store             (263+BP);
                        load              (263+BP);
                        store             (270+BP);
                        load              (262+BP);
                        store             (269+BP);
                        load              (261+BP);
                        store             (268+BP);
                        movebp            (268);
                        copy_from();      
                        movebp            (-268);
                                                            //             if (str_equals(str, parent)) {
                        loadi             (5+BP);
                        store             (261+BP);
                        load              (1+BP);
                        store             (262+BP);
                        load              (262+BP);
                        store             (268+BP);
                        load              (261+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_219_end: {
                                             if_219_next: {
                        if(equals())      break if_219_next;
                                                            //                 return True;
                        loadi             (1);
                        if(always())      break compiler_find_identifier_with_parent_end;
                                                            //             }
                                                            //         }
} // if_219_next:
} // if_219_end:
                                                            //         i = i + 1;
} // if_218_next:
} // if_218_end:
                        load              (4+BP);
                        store             (261+BP);
                        loadi             (1);
                        add               (261+BP);
                        store             (4+BP);
                                                            //     }
                                                            // 
                                                            //     return False;
                        if(always())      continue while_216_test;
                                             break; } // while_216_test:
} // while_216_end:
                        loadi             (0);
                        if(always())      break compiler_find_identifier_with_parent_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_find_identifier(char name[], int out_value[], int out_type[], int out_scope[]) {
} // compiler_find_identifier_with_parent_end:
return;    }
function compiler_find_identifier
(){
                                             compiler_find_identifier_end: {
                                                            // 
                                                            //     if (compiler_get_current_scope() == Compiler_t_local) {
                        movebp            (8);
                        compiler_get_current_scope(); 
                        movebp            (-8);
                        store             (4+BP);
                        loadi             (1);
                        subtract          (4+BP);
                                             compare_220_false: {
                                             compare_220_true: {
                        if(equals())      break compare_220_true;
                        loadi             (0);
                        if(always())      break compare_220_false;
} // compare_220_true:
                        loadi             (1);
} // compare_220_false:
                                             if_221_end: {
                                             if_221_next: {
                        if(equals())      break if_221_next;
                                                            //         if (compiler_find_identifier_with_parent(name, compiler_function_name, out_value, out_type)) {
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (-6309390+global);
                        store             (5+BP);
                        load              (1+BP);
                        store             (6+BP);
                        load              (2+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (15+BP);
                        load              (6+BP);
                        store             (14+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_find_identifier_with_parent(); 
                        movebp            (-12);
                                             if_222_end: {
                                             if_222_next: {
                        if(equals())      break if_222_next;
                                                            //             out_scope[0] = Compiler_t_local;
                        loadi             (0);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (4+BP);
                        loadi             (X);
                        store             (5+BP);
                        load              (3+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (X);
                                                            //             return True;
                        loadi             (1);
                        if(always())      break compiler_find_identifier_end;
                                                            //         }
                                                            //     }
} // if_222_next:
} // if_222_end:
                                                            // 
                                                            //     if (compiler_find_identifier_with_parent(name, "", out_value, out_type)) {
} // if_221_next:
} // if_221_end:
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (1735);
                        store             (5+BP);
                        load              (1+BP);
                        store             (6+BP);
                        load              (2+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (15+BP);
                        load              (6+BP);
                        store             (14+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_find_identifier_with_parent(); 
                        movebp            (-12);
                                             if_223_end: {
                                             if_223_next: {
                        if(equals())      break if_223_next;
                                                            //         out_scope[0] = Compiler_t_global;
                        loadi             (0);
                        store             (4+BP);
                        loadi             (0);
                        store             (5+BP);
                        load              (4+BP);
                        loadx             ();
                        load              (5+BP);
                        store             (4+BP);
                        loadi             (X);
                        store             (5+BP);
                        load              (3+BP);
                        add               (5+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (X);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break compiler_find_identifier_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_223_next:
} // if_223_end:
                        loadi             (0);
                        if(always())      break compiler_find_identifier_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_identifier_must_not_be_defined_in_current_scope(char name[]) {
} // compiler_find_identifier_end:
return;    }
function compiler_identifier_must_not_be_defined_in_current_scope
(){
                                             compiler_identifier_must_not_be_defined_in_current_scope_end: {
                                                            //     int value[1];
                                                            //     int type[1];
                                                            //     int scope[1];
                                                            // 
                                                            //     if (! compiler_find_identifier(name, value, type, scope)) {
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (1+BP);
                        store             (5+BP);
                        loadi             (2+BP);
                        store             (6+BP);
                        loadi             (3+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (18+BP);
                        load              (6+BP);
                        store             (17+BP);
                        load              (5+BP);
                        store             (16+BP);
                        load              (4+BP);
                        store             (15+BP);
                        movebp            (15);
                        compiler_find_identifier(); 
                        movebp            (-15);
                                             logical_not_224_true: {
                                             logical_not_224_false: {
                        if(notequals())   break logical_not_224_false;
                        loadi             (1);
                        if(always())      break logical_not_224_true;
} // logical_not_224_false:
                        loadi             (0);
} // logical_not_224_true:
                                             if_225_end: {
                                             if_225_next: {
                        if(equals())      break if_225_next;
                                                            //         return;
                        if(always())      break compiler_identifier_must_not_be_defined_in_current_scope_end;
                                                            //     }
                                                            // 
                                                            //     if (scope[0] == compiler_get_current_scope())  {
} // if_225_next:
} // if_225_end:
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (4+BP);
                        movebp            (11);
                        compiler_get_current_scope(); 
                        movebp            (-11);
                        subtract          (4+BP);
                                             compare_226_false: {
                                             compare_226_true: {
                        if(equals())      break compare_226_true;
                        loadi             (0);
                        if(always())      break compare_226_false;
} // compare_226_true:
                        loadi             (1);
} // compare_226_false:
                                             if_227_end: {
                                             if_227_next: {
                        if(equals())      break if_227_next;
                                                            //         error_compiler("name already defined");
                        loadi             (1736);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        error_compiler(); 
                        movebp            (-12);
                                                            //     }
                                                            // }
} // if_227_next:
} // if_227_end:
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_add_identifier(char name[], int type, int value) {
} // compiler_identifier_must_not_be_defined_in_current_scope_end:
return;    }
function compiler_add_identifier
(){
                                             compiler_add_identifier_end: {
                                                            // 
                                                            //     compiler_identifier_must_not_be_defined_in_current_scope(name);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_identifier_must_not_be_defined_in_current_scope(); 
                        movebp            (-9);
                                                            // 
                                                            //     if (compiler_identifier_table_size >= Compiler_max_identifiers) {
                        load              (-6309134+global);
                        store             (3+BP);
                        loadi             (8192);
                        subtract          (3+BP);
                                             compare_228_false: {
                                             compare_228_true: {
                        if(greater())     break compare_228_true;
                        if(equals())      break compare_228_true;
                        loadi             (0);
                        if(always())      break compare_228_false;
} // compare_228_true:
                        loadi             (1);
} // compare_228_false:
                                             if_229_end: {
                                             if_229_next: {
                        if(equals())      break if_229_next;
                                                            //         error_compiler("out of symbol table space");
                        loadi             (1757);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_compiler(); 
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     copy_to(compiler_col_name, name, compiler_identifier_table_size * Str_size);
} // if_229_next:
} // if_229_end:
                        loadi             (-4211981+global);
                        store             (3+BP);
                        load              (0+BP);
                        store             (4+BP);
                        load              (-6309134+global);
                        store             (5+BP);
                        loadi             (256);
                        multiply          (5+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        copy_to();        
                        movebp            (-11);
                                                            //     copy_to(compiler_col_parent, compiler_function_name, compiler_identifier_table_size * Str_size);
                        loadi             (-6309133+global);
                        store             (3+BP);
                        loadi             (-6309390+global);
                        store             (4+BP);
                        load              (-6309134+global);
                        store             (5+BP);
                        loadi             (256);
                        multiply          (5+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        copy_to();        
                        movebp            (-11);
                                                            //     compiler_col_type[compiler_identifier_table_size] = type;
                        load              (-6309134+global);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (3+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (-2114829+global+X);
                                                            //     compiler_col_value[compiler_identifier_table_size] = value;
                        load              (-6309134+global);
                        store             (3+BP);
                        load              (2+BP);
                        store             (4+BP);
                        load              (3+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (-2106637+global+X);
                                                            // 
                                                            //     compiler_identifier_table_size = compiler_identifier_table_size + 1;
                        load              (-6309134+global);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (-6309134+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_must_find_identifier(char name[], int out_type[], int out_scope[]) {
} // compiler_add_identifier_end:
return;    }
function compiler_must_find_identifier
(){
                                             compiler_must_find_identifier_end: {
                                                            //     int value[1];
                                                            // 
                                                            //     if (! compiler_find_identifier(name, value, out_type, out_scope)) {
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (3+BP);
                        store             (5+BP);
                        load              (1+BP);
                        store             (6+BP);
                        load              (2+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        movebp            (13);
                        compiler_find_identifier(); 
                        movebp            (-13);
                                             logical_not_230_true: {
                                             logical_not_230_false: {
                        if(notequals())   break logical_not_230_false;
                        loadi             (1);
                        if(always())      break logical_not_230_true;
} // logical_not_230_false:
                        loadi             (0);
} // logical_not_230_true:
                                             if_231_end: {
                                             if_231_next: {
                        if(equals())      break if_231_next;
                                                            //         error_compiler("name not defined");
                        loadi             (1783);
                        store             (4+BP);
                        load              (4+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_compiler(); 
                        movebp            (-10);
                                                            //     }
                                                            // 
                                                            //     return value[0];
} // if_231_next:
} // if_231_end:
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        if(always())      break compiler_must_find_identifier_end;
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_allocate_temp_local() {
} // compiler_must_find_identifier_end:
return;    }
function compiler_allocate_temp_local
(){
                                             compiler_allocate_temp_local_end: {
                                                            //     int temp_local_address;
                                                            //     int offset;
                                                            //     
                                                            //     if (compiler_function_temp_data_size >= Compiler_max_temp_data_size) {
                        load              (-6309393+global);
                        store             (2+BP);
                        loadi             (8);
                        subtract          (2+BP);
                                             compare_232_false: {
                                             compare_232_true: {
                        if(greater())     break compare_232_true;
                        if(equals())      break compare_232_true;
                        loadi             (0);
                        if(always())      break compare_232_false;
} // compare_232_true:
                        loadi             (1);
} // compare_232_false:
                                             if_233_end: {
                                             if_233_next: {
                        if(equals())      break if_233_next;
                                                            //         error_compiler("too many local temporary variables");
                        loadi             (1800);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        error_compiler(); 
                        movebp            (-11);
                                                            //     }
                                                            // 
                                                            //     offset = compiler_function_local_data_size + compiler_function_temp_data_size;
} // if_233_next:
} // if_233_end:
                        load              (-6309392+global);
                        store             (2+BP);
                        load              (-6309393+global);
                        add               (2+BP);
                        store             (1+BP);
                                                            //     temp_local_address = target_allocate_local_address(offset, 1, compiler_function_argument_count);
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (-6309391+global);
                        store             (4+BP);
                        load              (4+BP);
                        store             (15+BP);
                        load              (3+BP);
                        store             (14+BP);
                        load              (2+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_allocate_local_address(); 
                        movebp            (-13);
                        store             (0+BP);
                                                            // 
                                                            //     compiler_function_temp_data_size = compiler_function_temp_data_size + 1;
                        load              (-6309393+global);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (-6309393+global);
                                                            // 
                                                            //     return temp_local_address;
                        load              (0+BP);
                        if(always())      break compiler_allocate_temp_local_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_free_temp_local(int temp_local_address) {
} // compiler_allocate_temp_local_end:
return;    }
function compiler_free_temp_local
(){
                                             compiler_free_temp_local_end: {
                                                            //     int sanity_check_address;
                                                            //     int offset;
                                                            //     
                                                            //     compiler_function_temp_data_size = compiler_function_temp_data_size - 1;
                        load              (-6309393+global);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (3+BP);
                        subtract          (4+BP);
                        store             (-6309393+global);
                                                            // 
                                                            //     offset = compiler_function_local_data_size + compiler_function_temp_data_size;
                        load              (-6309392+global);
                        store             (3+BP);
                        load              (-6309393+global);
                        add               (3+BP);
                        store             (2+BP);
                                                            //     sanity_check_address = target_allocate_local_address(offset, 1, compiler_function_argument_count);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (-6309391+global);
                        store             (5+BP);
                        load              (5+BP);
                        store             (15+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_allocate_local_address(); 
                        movebp            (-13);
                        store             (1+BP);
                                                            // 
                                                            //     if (temp_local_address != sanity_check_address) {
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        subtract          (3+BP);
                                             compare_234_false: {
                                             compare_234_true: {
                        if(notequals())   break compare_234_true;
                        loadi             (0);
                        if(always())      break compare_234_false;
} // compare_234_true:
                        loadi             (1);
} // compare_234_false:
                                             if_235_end: {
                                             if_235_next: {
                        if(equals())      break if_235_next;
                                                            //         error_internal();
                        movebp            (10);
                        error_internal(); 
                        movebp            (-10);
                                                            //     }
                                                            // }
} // if_235_next:
} // if_235_end:
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_get_label(char start_with[], char out_label[]) {
} // compiler_free_temp_local_end:
return;    }
function compiler_get_label
(){
                                             compiler_get_label_end: {
                                                            //     char sequence_no_str[Str_size];
                                                            // 
                                                            //     int_to_str(compiler_label_sequence_no, sequence_no_str);
                        load              (-7357972+global);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        int_to_str();     
                        movebp            (-266);
                                                            //     copy(out_label, start_with);
                        load              (1+BP);
                        store             (258+BP);
                        load              (0+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     append(out_label, "_");
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1835);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            //     append(out_label, sequence_no_str);
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        append();         
                        movebp            (-266);
                                                            // 
                                                            //     compiler_label_sequence_no = compiler_label_sequence_no + 1;
                        load              (-7357972+global);
                        store             (258+BP);
                        loadi             (1);
                        add               (258+BP);
                        store             (-7357972+global);
                                                            // }
                                                            // 
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_enumerator(char name[]) {
} // compiler_get_label_end:
return;    }
function compiler_enumerator
(){
                                             compiler_enumerator_end: {
                                                            // 
                                                            //     compiler_identifier_must_not_be_defined_in_current_scope(name);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_identifier_must_not_be_defined_in_current_scope(); 
                        movebp            (-9);
                                                            // 
                                                            //     compiler_add_identifier(name, Compiler_t_integer_constant, compiler_current_enum_value);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (3);
                        store             (2+BP);
                        load              (-7357971+global);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        compiler_add_identifier(); 
                        movebp            (-11);
                                                            //     compiler_current_enum_value = compiler_current_enum_value + 1;
                        load              (-7357971+global);
                        store             (1+BP);
                        loadi             (1);
                        add               (1+BP);
                        store             (-7357971+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_enumerator_assigned_value(char name[], char value[]) {
} // compiler_enumerator_end:
return;    }
function compiler_enumerator_assigned_value
(){
                                             compiler_enumerator_assigned_value_end: {
                                                            // 
                                                            //     compiler_current_enum_value = str_to_int(value);
                        load              (1+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        str_to_int();     
                        movebp            (-9);
                        store             (-7357971+global);
                                                            //     compiler_enumerator(name);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_enumerator(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_enumerator_list_end() {
} // compiler_enumerator_assigned_value_end:
return;    }
function compiler_enumerator_list_end
(){
                                             compiler_enumerator_list_end_end: {
                                                            // 
                                                            //     compiler_current_enum_value = 0;
                        loadi             (0);
                        store             (-7357971+global);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_declaration_integer(char variable_name[]) {
} // compiler_enumerator_list_end_end:
return;    }
function compiler_declaration_integer
(){
                                             compiler_declaration_integer_end: {
                                                            //     int address;
                                                            // 
                                                            //     if (compiler_get_current_scope() == Compiler_t_local) {
                        movebp            (9);
                        compiler_get_current_scope(); 
                        movebp            (-9);
                        store             (2+BP);
                        loadi             (1);
                        subtract          (2+BP);
                                             compare_236_false: {
                                             compare_236_true: {
                        if(equals())      break compare_236_true;
                        loadi             (0);
                        if(always())      break compare_236_false;
} // compare_236_true:
                        loadi             (1);
} // compare_236_false:
                                             if_237_end: {
                                             if_237_next: {
                        if(equals())      break if_237_next;
                                                            //         address = target_allocate_local_address(compiler_function_local_data_size, 1, compiler_function_argument_count);
                        load              (-6309392+global);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (-6309391+global);
                        store             (4+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_allocate_local_address(); 
                        movebp            (-12);
                        store             (1+BP);
                                                            //         compiler_function_local_data_size = compiler_function_local_data_size + 1;
                        load              (-6309392+global);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (-6309392+global);
                                                            //         compiler_add_identifier(variable_name, Compiler_t_integer, address);
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_add_identifier(); 
                        movebp            (-12);
                                                            //         return;
                        if(always())      break compiler_declaration_integer_end;
                                                            //     }
                                                            // 
                                                            //     if (compiler_get_current_scope() == Compiler_t_global) {
} // if_237_next:
} // if_237_end:
                        movebp            (9);
                        compiler_get_current_scope(); 
                        movebp            (-9);
                        store             (2+BP);
                        loadi             (0);
                        subtract          (2+BP);
                                             compare_238_false: {
                                             compare_238_true: {
                        if(equals())      break compare_238_true;
                        loadi             (0);
                        if(always())      break compare_238_false;
} // compare_238_true:
                        loadi             (1);
} // compare_238_false:
                                             if_239_end: {
                                             if_239_next: {
                        if(equals())      break if_239_next;
                                                            //         address = target_allocate_global_address(compiler_global_data_size, 1);
                        load              (-6309394+global);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_allocate_global_address(); 
                        movebp            (-11);
                        store             (1+BP);
                                                            //         compiler_global_data_size = compiler_global_data_size + 1;
                        load              (-6309394+global);
                        store             (2+BP);
                        loadi             (1);
                        add               (2+BP);
                        store             (-6309394+global);
                                                            //         compiler_add_identifier(variable_name, Compiler_t_integer, address);
                        load              (0+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (14+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_add_identifier(); 
                        movebp            (-12);
                                                            //         return;
                        if(always())      break compiler_declaration_integer_end;
                                                            //     }
                                                            // 
                                                            //     error_internal();
} // if_239_next:
} // if_239_end:
                        movebp            (9);
                        error_internal(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_declaration_integer_array(char array_name[], int array_length) {
} // compiler_declaration_integer_end:
return;    }
function compiler_declaration_integer_array
(){
                                             compiler_declaration_integer_array_end: {
                                                            //     int address;
                                                            // 
                                                            //     if (array_length <= 0) {
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_240_false: {
                                             compare_240_true: {
                        if(less())        break compare_240_true;
                        if(equals())      break compare_240_true;
                        loadi             (0);
                        if(always())      break compare_240_false;
} // compare_240_true:
                        loadi             (1);
} // compare_240_false:
                                             if_241_end: {
                                             if_241_next: {
                        if(equals())      break if_241_next;
                                                            //         error_compiler("array length must be greater than zero");
                        loadi             (1837);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        error_compiler(); 
                        movebp            (-10);
                                                            //     }
                                                            // 
                                                            //     if (compiler_get_current_scope() == Compiler_t_local) {
} // if_241_next:
} // if_241_end:
                        movebp            (9);
                        compiler_get_current_scope(); 
                        movebp            (-9);
                        store             (3+BP);
                        loadi             (1);
                        subtract          (3+BP);
                                             compare_242_false: {
                                             compare_242_true: {
                        if(equals())      break compare_242_true;
                        loadi             (0);
                        if(always())      break compare_242_false;
} // compare_242_true:
                        loadi             (1);
} // compare_242_false:
                                             if_243_end: {
                                             if_243_next: {
                        if(equals())      break if_243_next;
                                                            //         address = target_allocate_local_address(compiler_function_local_data_size, array_length, compiler_function_argument_count);
                        load              (-6309392+global);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (-6309391+global);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_allocate_local_address(); 
                        movebp            (-12);
                        store             (2+BP);
                                                            //         compiler_function_local_data_size = compiler_function_local_data_size + array_length;
                        load              (-6309392+global);
                        store             (3+BP);
                        load              (1+BP);
                        add               (3+BP);
                        store             (-6309392+global);
                                                            //         compiler_add_identifier(array_name, Compiler_t_integer_array, address);
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2);
                        store             (4+BP);
                        load              (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_add_identifier(); 
                        movebp            (-12);
                                                            //         return;
                        if(always())      break compiler_declaration_integer_array_end;
                                                            //     }
                                                            // 
                                                            //     if (compiler_get_current_scope() == Compiler_t_global) {
} // if_243_next:
} // if_243_end:
                        movebp            (9);
                        compiler_get_current_scope(); 
                        movebp            (-9);
                        store             (3+BP);
                        loadi             (0);
                        subtract          (3+BP);
                                             compare_244_false: {
                                             compare_244_true: {
                        if(equals())      break compare_244_true;
                        loadi             (0);
                        if(always())      break compare_244_false;
} // compare_244_true:
                        loadi             (1);
} // compare_244_false:
                                             if_245_end: {
                                             if_245_next: {
                        if(equals())      break if_245_next;
                                                            //         address = target_allocate_global_address(compiler_global_data_size, array_length);
                        load              (-6309394+global);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_allocate_global_address(); 
                        movebp            (-11);
                        store             (2+BP);
                                                            //         compiler_global_data_size = compiler_global_data_size + array_length;
                        load              (-6309394+global);
                        store             (3+BP);
                        load              (1+BP);
                        add               (3+BP);
                        store             (-6309394+global);
                                                            //         compiler_add_identifier(array_name, Compiler_t_integer_array, address);
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2);
                        store             (4+BP);
                        load              (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_add_identifier(); 
                        movebp            (-12);
                                                            //         return;
                        if(always())      break compiler_declaration_integer_array_end;
                                                            //     }
                                                            // 
                                                            //     error_internal();
} // if_245_next:
} // if_245_end:
                        movebp            (9);
                        error_internal(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_declaration_integer_array_constant_length_specifier(char array_name[], char array_length_integer_constant[])  {
} // compiler_declaration_integer_array_end:
return;    }
function compiler_declaration_integer_array_constant_length_specifier
(){
                                             compiler_declaration_integer_array_constant_length_specifier_end: {
                                                            //     int length;
                                                            // 
                                                            //     length = str_to_int(array_length_integer_constant);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        str_to_int();     
                        movebp            (-10);
                        store             (2+BP);
                                                            //     compiler_declaration_integer_array(array_name, length);
                        load              (0+BP);
                        store             (3+BP);
                        load              (2+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        compiler_declaration_integer_array(); 
                        movebp            (-11);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_declaration_integer_array_identifier_length_specifier(char array_name[], char array_length_identifier[])  {
} // compiler_declaration_integer_array_constant_length_specifier_end:
return;    }
function compiler_declaration_integer_array_identifier_length_specifier
(){
                                             compiler_declaration_integer_array_identifier_length_specifier_end: {
                                                            //     int array_length;
                                                            //     int type[1];
                                                            //     int scope[1];
                                                            // 
                                                            //     array_length = compiler_must_find_identifier(array_length_identifier, type, scope);
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (3+BP);
                        store             (6+BP);
                        loadi             (4+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        compiler_must_find_identifier(); 
                        movebp            (-14);
                        store             (2+BP);
                                                            // 
                                                            //     if (type[0] != Compiler_t_integer_constant) {
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (3);
                        subtract          (5+BP);
                                             compare_246_false: {
                                             compare_246_true: {
                        if(notequals())   break compare_246_true;
                        loadi             (0);
                        if(always())      break compare_246_false;
} // compare_246_true:
                        loadi             (1);
} // compare_246_false:
                                             if_247_end: {
                                             if_247_next: {
                        if(equals())      break if_247_next;
                                                            //         error_compiler("constant array length specifier expected");
                        loadi             (1876);
                        store             (5+BP);
                        load              (5+BP);
                        store             (12+BP);
                        movebp            (12);
                        error_compiler(); 
                        movebp            (-12);
                                                            //     }
                                                            // 
                                                            //     compiler_declaration_integer_array(array_name, array_length);
} // if_247_next:
} // if_247_end:
                        load              (0+BP);
                        store             (5+BP);
                        load              (2+BP);
                        store             (6+BP);
                        load              (6+BP);
                        store             (14+BP);
                        load              (5+BP);
                        store             (13+BP);
                        movebp            (13);
                        compiler_declaration_integer_array(); 
                        movebp            (-13);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_definition_begin(char function_name[]) {
} // compiler_declaration_integer_array_identifier_length_specifier_end:
return;    }
function compiler_function_definition_begin
(){
                                             compiler_function_definition_begin_end: {
                                                            // 
                                                            //     compiler_identifier_must_not_be_defined_in_current_scope(function_name);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_identifier_must_not_be_defined_in_current_scope(); 
                        movebp            (-9);
                                                            //     compiler_add_identifier(function_name, Compiler_t_function, 0);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (4);
                        store             (2+BP);
                        loadi             (0);
                        store             (3+BP);
                        load              (3+BP);
                        store             (13+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        compiler_add_identifier(); 
                        movebp            (-11);
                                                            // 
                                                            //     copy(compiler_function_name, function_name);
                        loadi             (-6309390+global);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            //     compiler_function_local_data_size = 0;
                        loadi             (0);
                        store             (-6309392+global);
                                                            //     compiler_function_temp_data_size = 0;
                        loadi             (0);
                        store             (-6309393+global);
                                                            //     compiler_function_argument_count = 0;
                        loadi             (0);
                        store             (-6309391+global);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_argument_declaration_item(char argument_name[], int argument_type, int argument_no) {
} // compiler_function_definition_begin_end:
return;    }
function compiler_function_argument_declaration_item
(){
                                             compiler_function_argument_declaration_item_end: {
                                                            //     int address;
                                                            // 
                                                            //     compiler_function_argument_count = compiler_function_argument_count + 1;
                        load              (-6309391+global);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (-6309391+global);
                                                            // 
                                                            //     address = target_allocate_function_argument_address(argument_no, 1);
                        load              (2+BP);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        load              (5+BP);
                        store             (12+BP);
                        load              (4+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_allocate_function_argument_address(); 
                        movebp            (-11);
                        store             (3+BP);
                                                            //     compiler_add_identifier(argument_name, argument_type, address);
                        load              (0+BP);
                        store             (4+BP);
                        load              (1+BP);
                        store             (5+BP);
                        load              (3+BP);
                        store             (6+BP);
                        load              (6+BP);
                        store             (14+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_add_identifier(); 
                        movebp            (-12);
                                                            // }
                                                            //     
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_compound_statement_locals_declared() {
} // compiler_function_argument_declaration_item_end:
return;    }
function compiler_function_compound_statement_locals_declared
(){
                                             compiler_function_compound_statement_locals_declared_end: {
                                                            // 
                                                            //     target_op_subroutine_begin(compiler_function_name,
                        loadi             (-6309390+global);
                        store             (0+BP);
                        load              (-6309391+global);
                        store             (1+BP);
                        load              (-6309392+global);
                        store             (2+BP);
                        loadi             (8);
                        add               (2+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (13+BP);
                        load              (1+BP);
                        store             (12+BP);
                        load              (0+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_subroutine_begin(); 
                        movebp            (-11);
                                                            //                                compiler_function_argument_count,
                                                            //                                compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            //     
                                                            //     target_begin_branch_block(compiler_function_name, "_end");
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (1917);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_definition_end() {
} // compiler_function_compound_statement_locals_declared_end:
return;    }
function compiler_function_definition_end
(){
                                             compiler_function_definition_end_end: {
                                                            // 
                                                            //     target_end_branch_block(compiler_function_name, "_end");
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (1922);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // 
                                                            //     target_op_subroutine_end(compiler_function_name,
                        loadi             (-6309390+global);
                        store             (0+BP);
                        load              (-6309391+global);
                        store             (1+BP);
                        load              (-6309392+global);
                        store             (2+BP);
                        loadi             (8);
                        add               (2+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (13+BP);
                        load              (1+BP);
                        store             (12+BP);
                        load              (0+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_subroutine_end(); 
                        movebp            (-11);
                                                            //                              compiler_function_argument_count,
                                                            //                              compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            // 
                                                            //     copy(compiler_function_name, "");
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (1927);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // 
                                                            //     if (compiler_function_temp_data_size != 0) {
                        load              (-6309393+global);
                        store             (0+BP);
                        loadi             (0);
                        subtract          (0+BP);
                                             compare_248_false: {
                                             compare_248_true: {
                        if(notequals())   break compare_248_true;
                        loadi             (0);
                        if(always())      break compare_248_false;
} // compare_248_true:
                        loadi             (1);
} // compare_248_false:
                                             if_249_end: {
                                             if_249_next: {
                        if(equals())      break if_249_next;
                                                            //         error_internal();
                        movebp            (8);
                        error_internal(); 
                        movebp            (-8);
                                                            //     }
                                                            // }
} // if_249_next:
} // if_249_end:
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_program_begin() {
} // compiler_function_definition_end_end:
return;    }
function compiler_program_begin
(){
                                             compiler_program_begin_end: {
                                                            // 
                                                            //     target_program_begin();
                        movebp            (8);
                        target_program_begin(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // compiler_program_end() {
} // compiler_program_begin_end:
return;    }
function compiler_program_end
(){
                                             compiler_program_end_end: {
                                                            // 
                                                            //     target_program_end(compiler_global_data_size);
                        load              (-6309394+global);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_program_end(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_output_source_as_comment() {
} // compiler_program_end_end:
return;    }
function compiler_output_source_as_comment
(){
                                             compiler_output_source_as_comment_end: {
                                                            // 
                                                            //     preprocessor_get_source_chunk(compiler_source_chunk);
                        loadi             (-7357970+global);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        preprocessor_get_source_chunk(); 
                        movebp            (-9);
                                                            // 
                                                            //     target_comment_print(compiler_source_chunk);
                        loadi             (-7357970+global);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_comment_print(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // 
                                                            // compiler_built_in_function_fgetc() {
} // compiler_output_source_as_comment_end:
return;    }
function compiler_built_in_function_fgetc
(){
                                             compiler_built_in_function_fgetc_end: {
                                                            // 
                                                            //     target_built_in_function_fgetc();
                        movebp            (8);
                        target_built_in_function_fgetc(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // compiler_built_in_function_fputc_stdout() {
} // compiler_built_in_function_fgetc_end:
return;    }
function compiler_built_in_function_fputc_stdout
(){
                                             compiler_built_in_function_fputc_stdout_end: {
                                                            // 
                                                            //     target_built_in_function_fputc_stdout();
                        movebp            (8);
                        target_built_in_function_fputc_stdout(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // compiler_built_in_function_fputc_stderr() {
} // compiler_built_in_function_fputc_stdout_end:
return;    }
function compiler_built_in_function_fputc_stderr
(){
                                             compiler_built_in_function_fputc_stderr_end: {
                                                            // 
                                                            //     target_built_in_function_fputc_stderr();
                        movebp            (8);
                        target_built_in_function_fputc_stderr(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // compiler_built_in_function_exit() {
} // compiler_built_in_function_fputc_stderr_end:
return;    }
function compiler_built_in_function_exit
(){
                                             compiler_built_in_function_exit_end: {
                                                            // 
                                                            //     target_built_in_function_exit();
                        movebp            (8);
                        target_built_in_function_exit(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // compiler_built_in_function_debug() {
} // compiler_built_in_function_exit_end:
return;    }
function compiler_built_in_function_debug
(){
                                             compiler_built_in_function_debug_end: {
                                                            // 
                                                            //     target_built_in_function_debug();
                        movebp            (8);
                        target_built_in_function_debug(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_prepare(char function_name[], char out_function_name_cookie[]) {
} // compiler_built_in_function_debug_end:
return;    }
function compiler_function_call_prepare
(){
                                             compiler_function_call_prepare_end: {
                                                            // 
                                                            //     copy(out_function_name_cookie, function_name);
                        load              (1+BP);
                        store             (2+BP);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (11+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        copy();           
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_string_literal_argument(char string_literal[]) {
} // compiler_function_call_prepare_end:
return;    }
function compiler_function_call_string_literal_argument
(){
                                             compiler_function_call_string_literal_argument_end: {
                                                            //     int string_length;
                                                            //     int address;
                                                            // 
                                                            //     string_length = length(string_literal);
                        load              (0+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        length();         
                        movebp            (-11);
                        store             (1+BP);
                                                            //     address = target_allocate_string(string_literal, string_length + 1);
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_allocate_string(); 
                        movebp            (-12);
                        store             (2+BP);
                                                            // 
                                                            //     target_op_load_address(address, Target_t_global);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (3);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        target_op_load_address(); 
                        movebp            (-12);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_pointer_argument(char identifier[]) {
} // compiler_function_call_string_literal_argument_end:
return;    }
function compiler_function_call_pointer_argument
(){
                                             compiler_function_call_pointer_argument_end: {
                                                            //     int value[1];
                                                            //     int type[1];
                                                            //     int scope[1];
                                                            // 
                                                            //     if (! compiler_find_identifier(identifier, value, type, scope)) {
                        load              (0+BP);
                        store             (4+BP);
                        loadi             (1+BP);
                        store             (5+BP);
                        loadi             (2+BP);
                        store             (6+BP);
                        loadi             (3+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (18+BP);
                        load              (6+BP);
                        store             (17+BP);
                        load              (5+BP);
                        store             (16+BP);
                        load              (4+BP);
                        store             (15+BP);
                        movebp            (15);
                        compiler_find_identifier(); 
                        movebp            (-15);
                                             logical_not_250_true: {
                                             logical_not_250_false: {
                        if(notequals())   break logical_not_250_false;
                        loadi             (1);
                        if(always())      break logical_not_250_true;
} // logical_not_250_false:
                        loadi             (0);
} // logical_not_250_true:
                                             if_251_end: {
                                             if_251_next: {
                        if(equals())      break if_251_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break compiler_function_call_pointer_argument_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
} // if_251_next:
} // if_251_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (4+BP);
                        loadi             (2);
                        subtract          (4+BP);
                                             compare_252_false: {
                                             compare_252_true: {
                        if(equals())      break compare_252_true;
                        loadi             (0);
                        if(always())      break compare_252_false;
} // compare_252_true:
                        loadi             (1);
} // compare_252_false:
                                             logical_and_253_true: {
                                             logical_and_253_false: {
                        if(equals())      break logical_and_253_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (4+BP);
                        loadi             (1);
                        subtract          (4+BP);
                                             compare_254_false: {
                                             compare_254_true: {
                        if(equals())      break compare_254_true;
                        loadi             (0);
                        if(always())      break compare_254_false;
} // compare_254_true:
                        loadi             (1);
} // compare_254_false:
                        if(equals())      break logical_and_253_false;
                        loadi             (1);
                        if(always())      break logical_and_253_true;
} // logical_and_253_false:
                        loadi             (0);
} // logical_and_253_true:
                                             if_255_end: {
                                             if_255_next: {
                        if(equals())      break if_255_next;
                                                            //         target_op_load_address(value[0], Target_t_local);
                        loadi             (0);
                        loadx             ();
                        load              (1+BP+X);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_op_load_address(); 
                        movebp            (-13);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break compiler_function_call_pointer_argument_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
} // if_255_next:
} // if_255_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (4+BP);
                        loadi             (2);
                        subtract          (4+BP);
                                             compare_256_false: {
                                             compare_256_true: {
                        if(equals())      break compare_256_true;
                        loadi             (0);
                        if(always())      break compare_256_false;
} // compare_256_true:
                        loadi             (1);
} // compare_256_false:
                                             logical_and_257_true: {
                                             logical_and_257_false: {
                        if(equals())      break logical_and_257_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (4+BP);
                        loadi             (0);
                        subtract          (4+BP);
                                             compare_258_false: {
                                             compare_258_true: {
                        if(equals())      break compare_258_true;
                        loadi             (0);
                        if(always())      break compare_258_false;
} // compare_258_true:
                        loadi             (1);
} // compare_258_false:
                        if(equals())      break logical_and_257_false;
                        loadi             (1);
                        if(always())      break logical_and_257_true;
} // logical_and_257_false:
                        loadi             (0);
} // logical_and_257_true:
                                             if_259_end: {
                                             if_259_next: {
                        if(equals())      break if_259_next;
                                                            //         target_op_load_address(value[0], Target_t_global);
                        loadi             (0);
                        loadx             ();
                        load              (1+BP+X);
                        store             (4+BP);
                        loadi             (3);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_op_load_address(); 
                        movebp            (-13);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break compiler_function_call_pointer_argument_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
} // if_259_next:
} // if_259_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (4+BP);
                        loadi             (0);
                        subtract          (4+BP);
                                             compare_260_false: {
                                             compare_260_true: {
                        if(equals())      break compare_260_true;
                        loadi             (0);
                        if(always())      break compare_260_false;
} // compare_260_true:
                        loadi             (1);
} // compare_260_false:
                                             logical_and_261_true: {
                                             logical_and_261_false: {
                        if(equals())      break logical_and_261_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (4+BP);
                        loadi             (1);
                        subtract          (4+BP);
                                             compare_262_false: {
                                             compare_262_true: {
                        if(equals())      break compare_262_true;
                        loadi             (0);
                        if(always())      break compare_262_false;
} // compare_262_true:
                        loadi             (1);
} // compare_262_false:
                        if(equals())      break logical_and_261_false;
                        loadi             (1);
                        if(always())      break logical_and_261_true;
} // logical_and_261_false:
                        loadi             (0);
} // logical_and_261_true:
                                             if_263_end: {
                                             if_263_next: {
                        if(equals())      break if_263_next;
                                                            //         target_op_load(value[0], Target_t_local);
                        loadi             (0);
                        loadx             ();
                        load              (1+BP+X);
                        store             (4+BP);
                        loadi             (1);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_op_load(); 
                        movebp            (-13);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break compiler_function_call_pointer_argument_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_263_next:
} // if_263_end:
                        loadi             (0);
                        if(always())      break compiler_function_call_pointer_argument_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_argument_prepare(int out_argument_temp_local_cookie[]) {
} // compiler_function_call_pointer_argument_end:
return;    }
function compiler_function_call_argument_prepare
(){
                                             compiler_function_call_argument_prepare_end: {
                                                            //     int temp_local;
                                                            // 
                                                            //     temp_local = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (1+BP);
                                                            //     target_op_store(temp_local, Target_t_local);
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            // 
                                                            //     out_argument_temp_local_cookie[0] = temp_local;
                        loadi             (0);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (2+BP);
                        loadx             ();
                        load              (3+BP);
                        store             (2+BP);
                        loadi             (X);
                        store             (3+BP);
                        load              (0+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (2+BP);
                        store             (X);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_argument_pass(int argument_number, int argument_count, int argument_temp_local_cookie[]) {
} // compiler_function_call_argument_prepare_end:
return;    }
function compiler_function_call_argument_pass
(){
                                             compiler_function_call_argument_pass_end: {
                                                            // 
                                                            //     target_op_load(argument_temp_local_cookie[0], Target_t_local);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (2+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (11+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_load(); 
                        movebp            (-10);
                                                            //     
                                                            //     target_op_pass_argument(argument_number,
                        load              (0+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (-6309392+global);
                        store             (5+BP);
                        loadi             (8);
                        add               (5+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_pass_argument(); 
                        movebp            (-11);
                                                            //                             argument_count,
                                                            //                             compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            // 
                                                            //     compiler_free_temp_local(argument_temp_local_cookie[0]);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (3+BP);
                        load              (2+BP);
                        add               (3+BP);
                        loadx             ();
                        load              (X);
                        store             (3+BP);
                        load              (3+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_free_temp_local(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_function_call_execute(char function_name_cookie[], int function_argument_count) {
} // compiler_function_call_argument_pass_end:
return;    }
function compiler_function_call_execute
(){
                                             compiler_function_call_execute_end: {
                                                            // 
                                                            //     target_op_call_subroutine(function_name_cookie,
                        load              (0+BP);
                        store             (2+BP);
                        load              (1+BP);
                        store             (3+BP);
                        load              (-6309392+global);
                        store             (4+BP);
                        loadi             (8);
                        add               (4+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_call_subroutine(); 
                        movebp            (-11);
                                                            //                               function_argument_count,
                                                            //                               compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_primary_expression_array_index() {
} // compiler_function_call_execute_end:
return;    }
function compiler_primary_expression_array_index
(){
                                             compiler_primary_expression_array_index_end: {
                                                            // 
                                                            //     target_op_loadx();
                        movebp            (8);
                        target_op_loadx(); 
                        movebp            (-8);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_primary_expression_identifier(char identifier[]) {
} // compiler_primary_expression_array_index_end:
return;    }
function compiler_primary_expression_identifier
(){
                                             compiler_primary_expression_identifier_end: {
                                                            //     int value;
                                                            //     int type[1];
                                                            //     int scope[1];
                                                            //     int temp_array_index;
                                                            // 
                                                            //     value = compiler_must_find_identifier(identifier, type, scope);
                        load              (0+BP);
                        store             (5+BP);
                        loadi             (2+BP);
                        store             (6+BP);
                        loadi             (3+BP);
                        store             (7+BP);
                        load              (7+BP);
                        store             (17+BP);
                        load              (6+BP);
                        store             (16+BP);
                        load              (5+BP);
                        store             (15+BP);
                        movebp            (15);
                        compiler_must_find_identifier(); 
                        movebp            (-15);
                        store             (1+BP);
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_constant) {
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (3);
                        subtract          (5+BP);
                                             compare_264_false: {
                                             compare_264_true: {
                        if(equals())      break compare_264_true;
                        loadi             (0);
                        if(always())      break compare_264_false;
} // compare_264_true:
                        loadi             (1);
} // compare_264_false:
                                             if_265_end: {
                                             if_265_next: {
                        if(equals())      break if_265_next;
                                                            //         target_op_load_constant(value);
                        load              (1+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        movebp            (13);
                        target_op_load_constant(); 
                        movebp            (-13);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_local) {
} // if_265_next:
} // if_265_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (1);
                        subtract          (5+BP);
                                             compare_266_false: {
                                             compare_266_true: {
                        if(equals())      break compare_266_true;
                        loadi             (0);
                        if(always())      break compare_266_false;
} // compare_266_true:
                        loadi             (1);
} // compare_266_false:
                                             logical_and_267_true: {
                                             logical_and_267_false: {
                        if(equals())      break logical_and_267_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (1);
                        subtract          (5+BP);
                                             compare_268_false: {
                                             compare_268_true: {
                        if(equals())      break compare_268_true;
                        loadi             (0);
                        if(always())      break compare_268_false;
} // compare_268_true:
                        loadi             (1);
} // compare_268_false:
                        if(equals())      break logical_and_267_false;
                        loadi             (1);
                        if(always())      break logical_and_267_true;
} // logical_and_267_false:
                        loadi             (0);
} // logical_and_267_true:
                                             if_269_end: {
                                             if_269_next: {
                        if(equals())      break if_269_next;
                                                            //         target_op_load(value, Target_t_local);
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (1);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_global) {
} // if_269_next:
} // if_269_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (1);
                        subtract          (5+BP);
                                             compare_270_false: {
                                             compare_270_true: {
                        if(equals())      break compare_270_true;
                        loadi             (0);
                        if(always())      break compare_270_false;
} // compare_270_true:
                        loadi             (1);
} // compare_270_false:
                                             logical_and_271_true: {
                                             logical_and_271_false: {
                        if(equals())      break logical_and_271_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_272_false: {
                                             compare_272_true: {
                        if(equals())      break compare_272_true;
                        loadi             (0);
                        if(always())      break compare_272_false;
} // compare_272_true:
                        loadi             (1);
} // compare_272_false:
                        if(equals())      break logical_and_271_false;
                        loadi             (1);
                        if(always())      break logical_and_271_true;
} // logical_and_271_false:
                        loadi             (0);
} // logical_and_271_true:
                                             if_273_end: {
                                             if_273_next: {
                        if(equals())      break if_273_next;
                                                            //         target_op_load(value, Target_t_global);
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (3);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
} // if_273_next:
} // if_273_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (2);
                        subtract          (5+BP);
                                             compare_274_false: {
                                             compare_274_true: {
                        if(equals())      break compare_274_true;
                        loadi             (0);
                        if(always())      break compare_274_false;
} // compare_274_true:
                        loadi             (1);
} // compare_274_false:
                                             logical_and_275_true: {
                                             logical_and_275_false: {
                        if(equals())      break logical_and_275_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (1);
                        subtract          (5+BP);
                                             compare_276_false: {
                                             compare_276_true: {
                        if(equals())      break compare_276_true;
                        loadi             (0);
                        if(always())      break compare_276_false;
} // compare_276_true:
                        loadi             (1);
} // compare_276_false:
                        if(equals())      break logical_and_275_false;
                        loadi             (1);
                        if(always())      break logical_and_275_true;
} // logical_and_275_false:
                        loadi             (0);
} // logical_and_275_true:
                                             if_277_end: {
                                             if_277_next: {
                        if(equals())      break if_277_next;
                                                            //         target_op_load(value, Target_t_local_ix);
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (2);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
} // if_277_next:
} // if_277_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (2);
                        subtract          (5+BP);
                                             compare_278_false: {
                                             compare_278_true: {
                        if(equals())      break compare_278_true;
                        loadi             (0);
                        if(always())      break compare_278_false;
} // compare_278_true:
                        loadi             (1);
} // compare_278_false:
                                             logical_and_279_true: {
                                             logical_and_279_false: {
                        if(equals())      break logical_and_279_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_280_false: {
                                             compare_280_true: {
                        if(equals())      break compare_280_true;
                        loadi             (0);
                        if(always())      break compare_280_false;
} // compare_280_true:
                        loadi             (1);
} // compare_280_false:
                        if(equals())      break logical_and_279_false;
                        loadi             (1);
                        if(always())      break logical_and_279_true;
} // logical_and_279_false:
                        loadi             (0);
} // logical_and_279_true:
                                             if_281_end: {
                                             if_281_next: {
                        if(equals())      break if_281_next;
                                                            //         target_op_load(value, Target_t_global_ix);
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (4);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
} // if_281_next:
} // if_281_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (5+BP);
                        loadi             (0);
                        subtract          (5+BP);
                                             compare_282_false: {
                                             compare_282_true: {
                        if(equals())      break compare_282_true;
                        loadi             (0);
                        if(always())      break compare_282_false;
} // compare_282_true:
                        loadi             (1);
} // compare_282_false:
                                             logical_and_283_true: {
                                             logical_and_283_false: {
                        if(equals())      break logical_and_283_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (5+BP);
                        loadi             (1);
                        subtract          (5+BP);
                                             compare_284_false: {
                                             compare_284_true: {
                        if(equals())      break compare_284_true;
                        loadi             (0);
                        if(always())      break compare_284_false;
} // compare_284_true:
                        loadi             (1);
} // compare_284_false:
                        if(equals())      break logical_and_283_false;
                        loadi             (1);
                        if(always())      break logical_and_283_true;
} // logical_and_283_false:
                        loadi             (0);
} // logical_and_283_true:
                                             if_285_end: {
                                             if_285_next: {
                        if(equals())      break if_285_next;
                                                            //         temp_array_index = compiler_allocate_temp_local();
                        movebp            (12);
                        compiler_allocate_temp_local(); 
                        movebp            (-12);
                        store             (4+BP);
                                                            //         target_op_load_address(0, Target_t_ix);                 // temp_array_index = X
                        loadi             (0);
                        store             (5+BP);
                        loadi             (0);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load_address(); 
                        movebp            (-14);
                                                            //         target_op_store(temp_array_index, Target_t_local);
                        load              (4+BP);
                        store             (5+BP);
                        loadi             (1);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_store(); 
                        movebp            (-14);
                                                            //         target_op_load(value, Target_t_local);                  // A = address held in local pointer variable
                        load              (1+BP);
                        store             (5+BP);
                        loadi             (1);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         target_op_add(temp_array_index, Target_t_local);        // X = A + temp_array_index
                        load              (4+BP);
                        store             (5+BP);
                        loadi             (1);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_add();  
                        movebp            (-14);
                                                            //         target_op_loadx();
                        movebp            (12);
                        target_op_loadx(); 
                        movebp            (-12);
                                                            //         target_op_load(0, Target_t_indirect);                         // load (X)
                        loadi             (0);
                        store             (5+BP);
                        loadi             (5);
                        store             (6+BP);
                        load              (6+BP);
                        store             (15+BP);
                        load              (5+BP);
                        store             (14+BP);
                        movebp            (14);
                        target_op_load(); 
                        movebp            (-14);
                                                            //         compiler_free_temp_local(temp_array_index);
                        load              (4+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        movebp            (13);
                        compiler_free_temp_local(); 
                        movebp            (-13);
                                                            //         return;
                        if(always())      break compiler_primary_expression_identifier_end;
                                                            //     }
                                                            // 
                                                            //     error_compiler("identifier cannot be used in an expression");
} // if_285_next:
} // if_285_end:
                        loadi             (1928);
                        store             (5+BP);
                        load              (5+BP);
                        store             (13+BP);
                        movebp            (13);
                        error_compiler(); 
                        movebp            (-13);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_primary_expression_integer_constant(char integer_constant_str[]) {
} // compiler_primary_expression_identifier_end:
return;    }
function compiler_primary_expression_integer_constant
(){
                                             compiler_primary_expression_integer_constant_end: {
                                                            //     int integer_constant;
                                                            // 
                                                            //     integer_constant = str_to_int(integer_constant_str);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        str_to_int();     
                        movebp            (-10);
                        store             (1+BP);
                                                            //     target_op_load_constant(integer_constant);
                        load              (1+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_load_constant(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_primary_expression_character_constant(int character_code) {
} // compiler_primary_expression_integer_constant_end:
return;    }
function compiler_primary_expression_character_constant
(){
                                             compiler_primary_expression_character_constant_end: {
                                                            // 
                                                            //     target_op_load_constant(character_code);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_op_load_constant(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_unary_expression(char operator_text[]) {
} // compiler_primary_expression_character_constant_end:
return;    }
function compiler_unary_expression
(){
                                             compiler_unary_expression_end: {
                                                            //     int temp_local;
                                                            //     char label[Str_size];
                                                            // 
                                                            //     if (str_equals(operator_text, "+")) {
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (1971);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_286_end: {
                                             if_286_next: {
                        if(equals())      break if_286_next;
                                                            //         return;
                        if(always())      break compiler_unary_expression_end;
                                                            //     }
                                                            // 
                                                            //     if (str_equals(operator_text, "-")) {
} // if_286_next:
} // if_286_end:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (1973);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_287_end: {
                                             if_287_next: {
                        if(equals())      break if_287_next;
                                                            //         temp_local = compiler_allocate_temp_local();
                        movebp            (265);
                        compiler_allocate_temp_local(); 
                        movebp            (-265);
                        store             (1+BP);
                                                            //         target_op_store(temp_local, Target_t_local);
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_op_store(); 
                        movebp            (-267);
                                                            //         target_op_load_constant(0);
                        loadi             (0);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_load_constant(); 
                        movebp            (-266);
                                                            //         target_op_subtract(temp_local, Target_t_local);
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_op_subtract(); 
                        movebp            (-267);
                                                            //         compiler_free_temp_local(temp_local);
                        load              (1+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_free_temp_local(); 
                        movebp            (-266);
                                                            //         return;
                        if(always())      break compiler_unary_expression_end;
                                                            //     }
                                                            // 
                                                            //     if (str_equals(operator_text, "!")) {
} // if_287_next:
} // if_287_end:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (1975);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        str_equals();     
                        movebp            (-267);
                                             if_288_end: {
                                             if_288_next: {
                        if(equals())      break if_288_next;
                                                            //         target_get_label("logical_not", label);
                        loadi             (1977);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_get_label(); 
                        movebp            (-267);
                                                            //         target_begin_branch_block(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1989);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_begin_branch_block(); 
                        movebp            (-267);
                                                            //         target_begin_branch_block(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (1995);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_begin_branch_block(); 
                        movebp            (-267);
                                                            //         target_op_test();
                        movebp            (265);
                        target_op_test(); 
                        movebp            (-265);
                                                            //         target_op_branch_if_true(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2002);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_op_branch_if_true(); 
                        movebp            (-267);
                                                            //         target_op_load_constant(1);
                        loadi             (1);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_load_constant(); 
                        movebp            (-266);
                                                            //         target_op_branch(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2009);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_op_branch(); 
                        movebp            (-267);
                                                            //         target_end_branch_block(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2015);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_end_branch_block(); 
                        movebp            (-267);
                                                            //         target_op_load_constant(0);
                        loadi             (0);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_load_constant(); 
                        movebp            (-266);
                                                            //         target_end_branch_block(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2022);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        target_end_branch_block(); 
                        movebp            (-267);
                                                            //         return;
                        if(always())      break compiler_unary_expression_end;
                                                            //     }
                                                            // 
                                                            //     error_internal();
} // if_288_next:
} // if_288_end:
                        movebp            (265);
                        error_internal(); 
                        movebp            (-265);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_multiplicative_expression_sequence_begin() {
} // compiler_unary_expression_end:
return;    }
function compiler_multiplicative_expression_sequence_begin
(){
                                             compiler_multiplicative_expression_sequence_begin_end: {
                                                            //     int temp_left_cookie;
                                                            // 
                                                            //     temp_left_cookie = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     target_op_store(temp_left_cookie, Target_t_local);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            // 
                                                            //     return temp_left_cookie;
                        load              (0+BP);
                        if(always())      break compiler_multiplicative_expression_sequence_begin_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_multiplicative_expression_sequence_end(char operator_text[], int temp_left_cookie) {
} // compiler_multiplicative_expression_sequence_begin_end:
return;    }
function compiler_multiplicative_expression_sequence_end
(){
                                             compiler_multiplicative_expression_sequence_end_end: {
                                                            //     int temp_right;
                                                            // 
                                                            //     if (str_equals(operator_text, "*")) {
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2028);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        str_equals();     
                        movebp            (-11);
                                             if_289_end: {
                                             if_289_next: {
                        if(equals())      break if_289_next;
                                                            //         target_op_multiply(temp_left_cookie, Target_t_local);
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_multiply(); 
                        movebp            (-11);
                                                            //         compiler_free_temp_local(temp_left_cookie);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         return;
                        if(always())      break compiler_multiplicative_expression_sequence_end_end;
                                                            //     }
                                                            // 
                                                            //     if (str_equals(operator_text, "/")) {
} // if_289_next:
} // if_289_end:
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2030);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        str_equals();     
                        movebp            (-11);
                                             if_290_end: {
                                             if_290_next: {
                        if(equals())      break if_290_next;
                                                            //         temp_right = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (2+BP);
                                                            //         target_op_store(temp_right, Target_t_local);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            //         target_op_load(temp_left_cookie, Target_t_local);
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_load(); 
                        movebp            (-11);
                                                            //         target_op_divide(temp_right, Target_t_local);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_divide(); 
                        movebp            (-11);
                                                            //         compiler_free_temp_local(temp_right);
                        load              (2+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         compiler_free_temp_local(temp_left_cookie);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         return;
                        if(always())      break compiler_multiplicative_expression_sequence_end_end;
                                                            //     }
                                                            // 
                                                            //     error_internal();
} // if_290_next:
} // if_290_end:
                        movebp            (9);
                        error_internal(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_additive_expression_sequence_begin() {
} // compiler_multiplicative_expression_sequence_end_end:
return;    }
function compiler_additive_expression_sequence_begin
(){
                                             compiler_additive_expression_sequence_begin_end: {
                                                            //     int temp_left_cookie;
                                                            // 
                                                            //     temp_left_cookie = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     target_op_store(temp_left_cookie, Target_t_local);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            // 
                                                            //     return temp_left_cookie;
                        load              (0+BP);
                        if(always())      break compiler_additive_expression_sequence_begin_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_additive_expression_sequence_end(char operator_text[], int temp_left_cookie) {
} // compiler_additive_expression_sequence_begin_end:
return;    }
function compiler_additive_expression_sequence_end
(){
                                             compiler_additive_expression_sequence_end_end: {
                                                            //     int temp_right;
                                                            // 
                                                            //     if (str_equals(operator_text, "+")) {
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2032);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        str_equals();     
                        movebp            (-11);
                                             if_291_end: {
                                             if_291_next: {
                        if(equals())      break if_291_next;
                                                            //         target_op_add(temp_left_cookie, Target_t_local);
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_add();  
                        movebp            (-11);
                                                            //         compiler_free_temp_local(temp_left_cookie);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         return;
                        if(always())      break compiler_additive_expression_sequence_end_end;
                                                            //     }
                                                            // 
                                                            //     if (str_equals(operator_text, "-")) {
} // if_291_next:
} // if_291_end:
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (2034);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        str_equals();     
                        movebp            (-11);
                                             if_292_end: {
                                             if_292_next: {
                        if(equals())      break if_292_next;
                                                            //         temp_right = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (2+BP);
                                                            //         target_op_store(temp_right, Target_t_local);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            //         target_op_load(temp_left_cookie, Target_t_local);
                        load              (1+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_load(); 
                        movebp            (-11);
                                                            //         target_op_subtract(temp_right, Target_t_local);
                        load              (2+BP);
                        store             (3+BP);
                        loadi             (1);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_subtract(); 
                        movebp            (-11);
                                                            //         compiler_free_temp_local(temp_right);
                        load              (2+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         compiler_free_temp_local(temp_left_cookie);
                        load              (1+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //         return;
                        if(always())      break compiler_additive_expression_sequence_end_end;
                                                            //     }
                                                            // 
                                                            //     error_internal();
} // if_292_next:
} // if_292_end:
                        movebp            (9);
                        error_internal(); 
                        movebp            (-9);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_relational_or_equality_expression_sequence_begin() {
} // compiler_additive_expression_sequence_end_end:
return;    }
function compiler_relational_or_equality_expression_sequence_begin
(){
                                             compiler_relational_or_equality_expression_sequence_begin_end: {
                                                            //     int temp_left_cookie;
                                                            // 
                                                            //     temp_left_cookie = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (0+BP);
                                                            //     target_op_store(temp_left_cookie, Target_t_local);
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1);
                        store             (2+BP);
                        load              (2+BP);
                        store             (12+BP);
                        load              (1+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            // 
                                                            //     return temp_left_cookie;
                        load              (0+BP);
                        if(always())      break compiler_relational_or_equality_expression_sequence_begin_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_relational_or_equality_expression_sequence_end(char operator_text[], int temp_left_cookie) {
} // compiler_relational_or_equality_expression_sequence_begin_end:
return;    }
function compiler_relational_or_equality_expression_sequence_end
(){
                                             compiler_relational_or_equality_expression_sequence_end_end: {
                                                            //     char label[Str_size];
                                                            // 
                                                            //     target_get_label("compare", label);
                        loadi             (2036);
                        store             (258+BP);
                        loadi             (2+BP);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_get_label(); 
                        movebp            (-266);
                                                            // 
                                                            //     target_op_subtract(temp_left_cookie, Target_t_local);
                        load              (1+BP);
                        store             (258+BP);
                        loadi             (1);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_subtract(); 
                        movebp            (-266);
                                                            //     compiler_free_temp_local(temp_left_cookie);
                        load              (1+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_free_temp_local(); 
                        movebp            (-265);
                                                            // 
                                                            //     target_begin_branch_block(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2044);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_begin_branch_block(); 
                        movebp            (-266);
                                                            //     target_begin_branch_block(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2051);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_begin_branch_block(); 
                        movebp            (-266);
                                                            // 
                                                            //     if (str_equals(operator_text, "==")) {
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2057);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_293_end: {
                                             if_293_next: {
                        if(equals())      break if_293_next;
                                                            //         target_op_branch_if_equals(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2060);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_equals(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else if (str_equals(operator_text, "!=")) {
                        if(always())      break if_293_end;
} // if_293_next:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2066);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_294_end: {
                                             if_294_next: {
                        if(equals())      break if_294_next;
                                                            //         target_op_branch_if_not_equals(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2069);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_not_equals(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else if (str_equals(operator_text, "<")) {
                        if(always())      break if_294_end;
} // if_294_next:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2075);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_295_end: {
                                             if_295_next: {
                        if(equals())      break if_295_next;
                                                            //         target_op_branch_if_less(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2077);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_less(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else if (str_equals(operator_text, "<=")) {
                        if(always())      break if_295_end;
} // if_295_next:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2083);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_296_end: {
                                             if_296_next: {
                        if(equals())      break if_296_next;
                                                            //         target_op_branch_if_less(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2086);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_less(); 
                        movebp            (-266);
                                                            //         target_op_branch_if_equals(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2092);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_equals(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else if (str_equals(operator_text, ">")) {
                        if(always())      break if_296_end;
} // if_296_next:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2098);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_297_end: {
                                             if_297_next: {
                        if(equals())      break if_297_next;
                                                            //         target_op_branch_if_greater(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2100);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_greater(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else if (str_equals(operator_text, ">=")) {
                        if(always())      break if_297_end;
} // if_297_next:
                        load              (0+BP);
                        store             (258+BP);
                        loadi             (2106);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        str_equals();     
                        movebp            (-266);
                                             if_298_end: {
                                             if_298_next: {
                        if(equals())      break if_298_next;
                                                            //         target_op_branch_if_greater(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2109);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_greater(); 
                        movebp            (-266);
                                                            //         target_op_branch_if_equals(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2115);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch_if_equals(); 
                        movebp            (-266);
                                                            //     }
                                                            //     else {
                        if(always())      break if_298_end;
} // if_298_next:
                                                            //         error_internal();
                        movebp            (264);
                        error_internal(); 
                        movebp            (-264);
                                                            //     }
                                                            // 
                                                            //     target_op_load_constant(0);
} // if_298_end:
} // if_297_end:
} // if_296_end:
} // if_295_end:
} // if_294_end:
} // if_293_end:
                        loadi             (0);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        target_op_load_constant(); 
                        movebp            (-265);
                                                            //     target_op_branch(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2121);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_op_branch(); 
                        movebp            (-266);
                                                            //     target_end_branch_block(label, "_true");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2128);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_end_branch_block(); 
                        movebp            (-266);
                                                            //     target_op_load_constant(1);
                        loadi             (1);
                        store             (258+BP);
                        load              (258+BP);
                        store             (265+BP);
                        movebp            (265);
                        target_op_load_constant(); 
                        movebp            (-265);
                                                            //     target_end_branch_block(label, "_false");
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (2134);
                        store             (259+BP);
                        load              (259+BP);
                        store             (267+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        target_end_branch_block(); 
                        movebp            (-266);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_and_expression_begin(char out_label_and[]) {
} // compiler_relational_or_equality_expression_sequence_end_end:
return;    }
function compiler_logical_and_expression_begin
(){
                                             compiler_logical_and_expression_begin_end: {
                                                            // 
                                                            //     target_get_label("logical_and", out_label_and);
                        loadi             (2141);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_get_label(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_and, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2153);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_and, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2159);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_op_branch_if_false(out_label_and, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2166);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_false(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_and_switch_sequence(char label_and[]) {
} // compiler_logical_and_expression_begin_end:
return;    }
function compiler_logical_and_switch_sequence
(){
                                             compiler_logical_and_switch_sequence_end: {
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_op_branch_if_false(label_and, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2173);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_false(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_and_expression_end(char label_and[]) {
} // compiler_logical_and_switch_sequence_end:
return;    }
function compiler_logical_and_expression_end
(){
                                             compiler_logical_and_expression_end_end: {
                                                            // 
                                                            //     target_op_load_constant(1);
                        loadi             (1);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_op_load_constant(); 
                        movebp            (-9);
                                                            //     target_op_branch(label_and, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2180);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch(); 
                        movebp            (-10);
                                                            //     target_end_branch_block(label_and, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2186);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            //     target_op_load_constant(0);
                        loadi             (0);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_op_load_constant(); 
                        movebp            (-9);
                                                            //     target_end_branch_block(label_and, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2193);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_or_expression_begin(char out_label_or[]) {
} // compiler_logical_and_expression_end_end:
return;    }
function compiler_logical_or_expression_begin
(){
                                             compiler_logical_or_expression_begin_end: {
                                                            // 
                                                            //     target_get_label("logical_or", out_label_or);
                        loadi             (2199);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_get_label(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_or, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2210);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_or, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2217);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            // 
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_op_branch_if_true(out_label_or, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2223);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_true(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_or_switch_sequence(char label_or[]) {
} // compiler_logical_or_expression_begin_end:
return;    }
function compiler_logical_or_switch_sequence
(){
                                             compiler_logical_or_switch_sequence_end: {
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_op_branch_if_true(label_or, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2229);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_true(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_logical_or_expression_end(char label_or[]) {
} // compiler_logical_or_switch_sequence_end:
return;    }
function compiler_logical_or_expression_end
(){
                                             compiler_logical_or_expression_end_end: {
                                                            // 
                                                            //     target_op_load_constant(0);
                        loadi             (0);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_op_load_constant(); 
                        movebp            (-9);
                                                            //     target_op_branch(label_or, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2235);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch(); 
                        movebp            (-10);
                                                            //     target_end_branch_block(label_or, "_true");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2242);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            //     target_op_load_constant(1);
                        loadi             (1);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        target_op_load_constant(); 
                        movebp            (-9);
                                                            //     target_end_branch_block(label_or, "_false");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2248);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_return_statement() {
} // compiler_logical_or_expression_end_end:
return;    }
function compiler_return_statement
(){
                                             compiler_return_statement_end: {
                                                            // 
                                                            //     target_op_branch(compiler_function_name, "_end");
                        loadi             (-6309390+global);
                        store             (0+BP);
                        loadi             (2255);
                        store             (1+BP);
                        load              (1+BP);
                        store             (11+BP);
                        load              (0+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_assignment_statement(char variable_name[]) {
} // compiler_return_statement_end:
return;    }
function compiler_assignment_statement
(){
                                             compiler_assignment_statement_end: {
                                                            //     int value;
                                                            //     int type[1];
                                                            //     int scope[1];
                                                            //     int temp_rvalue;
                                                            //     int temp_array_index;
                                                            // 
                                                            //     value = compiler_must_find_identifier(variable_name, type, scope);
                        load              (0+BP);
                        store             (6+BP);
                        loadi             (2+BP);
                        store             (7+BP);
                        loadi             (3+BP);
                        store             (8+BP);
                        load              (8+BP);
                        store             (18+BP);
                        load              (7+BP);
                        store             (17+BP);
                        load              (6+BP);
                        store             (16+BP);
                        movebp            (16);
                        compiler_must_find_identifier(); 
                        movebp            (-16);
                        store             (1+BP);
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_global) {
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (6+BP);
                        loadi             (1);
                        subtract          (6+BP);
                                             compare_299_false: {
                                             compare_299_true: {
                        if(equals())      break compare_299_true;
                        loadi             (0);
                        if(always())      break compare_299_false;
} // compare_299_true:
                        loadi             (1);
} // compare_299_false:
                                             logical_and_300_true: {
                                             logical_and_300_false: {
                        if(equals())      break logical_and_300_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (6+BP);
                        loadi             (0);
                        subtract          (6+BP);
                                             compare_301_false: {
                                             compare_301_true: {
                        if(equals())      break compare_301_true;
                        loadi             (0);
                        if(always())      break compare_301_false;
} // compare_301_true:
                        loadi             (1);
} // compare_301_false:
                        if(equals())      break logical_and_300_false;
                        loadi             (1);
                        if(always())      break logical_and_300_true;
} // logical_and_300_false:
                        loadi             (0);
} // logical_and_300_true:
                                             if_302_end: {
                                             if_302_next: {
                        if(equals())      break if_302_next;
                                                            //         target_op_store(value, Target_t_global);
                        load              (1+BP);
                        store             (6+BP);
                        loadi             (3);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         return;
                        if(always())      break compiler_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_local) {
} // if_302_next:
} // if_302_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (6+BP);
                        loadi             (1);
                        subtract          (6+BP);
                                             compare_303_false: {
                                             compare_303_true: {
                        if(equals())      break compare_303_true;
                        loadi             (0);
                        if(always())      break compare_303_false;
} // compare_303_true:
                        loadi             (1);
} // compare_303_false:
                                             logical_and_304_true: {
                                             logical_and_304_false: {
                        if(equals())      break logical_and_304_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (6+BP);
                        loadi             (1);
                        subtract          (6+BP);
                                             compare_305_false: {
                                             compare_305_true: {
                        if(equals())      break compare_305_true;
                        loadi             (0);
                        if(always())      break compare_305_false;
} // compare_305_true:
                        loadi             (1);
} // compare_305_false:
                        if(equals())      break logical_and_304_false;
                        loadi             (1);
                        if(always())      break logical_and_304_true;
} // logical_and_304_false:
                        loadi             (0);
} // logical_and_304_true:
                                             if_306_end: {
                                             if_306_next: {
                        if(equals())      break if_306_next;
                                                            //         target_op_store(value, Target_t_local);
                        load              (1+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         return;
                        if(always())      break compiler_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
} // if_306_next:
} // if_306_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (6+BP);
                        loadi             (2);
                        subtract          (6+BP);
                                             compare_307_false: {
                                             compare_307_true: {
                        if(equals())      break compare_307_true;
                        loadi             (0);
                        if(always())      break compare_307_false;
} // compare_307_true:
                        loadi             (1);
} // compare_307_false:
                                             logical_and_308_true: {
                                             logical_and_308_false: {
                        if(equals())      break logical_and_308_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (6+BP);
                        loadi             (0);
                        subtract          (6+BP);
                                             compare_309_false: {
                                             compare_309_true: {
                        if(equals())      break compare_309_true;
                        loadi             (0);
                        if(always())      break compare_309_false;
} // compare_309_true:
                        loadi             (1);
} // compare_309_false:
                        if(equals())      break logical_and_308_false;
                        loadi             (1);
                        if(always())      break logical_and_308_true;
} // logical_and_308_false:
                        loadi             (0);
} // logical_and_308_true:
                                             if_310_end: {
                                             if_310_next: {
                        if(equals())      break if_310_next;
                                                            //         target_op_store(value, Target_t_global_ix);
                        load              (1+BP);
                        store             (6+BP);
                        loadi             (4);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         return;
                        if(always())      break compiler_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
} // if_310_next:
} // if_310_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (6+BP);
                        loadi             (2);
                        subtract          (6+BP);
                                             compare_311_false: {
                                             compare_311_true: {
                        if(equals())      break compare_311_true;
                        loadi             (0);
                        if(always())      break compare_311_false;
} // compare_311_true:
                        loadi             (1);
} // compare_311_false:
                                             logical_and_312_true: {
                                             logical_and_312_false: {
                        if(equals())      break logical_and_312_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (6+BP);
                        loadi             (1);
                        subtract          (6+BP);
                                             compare_313_false: {
                                             compare_313_true: {
                        if(equals())      break compare_313_true;
                        loadi             (0);
                        if(always())      break compare_313_false;
} // compare_313_true:
                        loadi             (1);
} // compare_313_false:
                        if(equals())      break logical_and_312_false;
                        loadi             (1);
                        if(always())      break logical_and_312_true;
} // logical_and_312_false:
                        loadi             (0);
} // logical_and_312_true:
                                             if_314_end: {
                                             if_314_next: {
                        if(equals())      break if_314_next;
                                                            //         target_op_store(value, Target_t_local_ix);
                        load              (1+BP);
                        store             (6+BP);
                        loadi             (2);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         return;
                        if(always())      break compiler_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
} // if_314_next:
} // if_314_end:
                        loadi             (0);
                        loadx             ();
                        load              (2+BP+X);
                        store             (6+BP);
                        loadi             (0);
                        subtract          (6+BP);
                                             compare_315_false: {
                                             compare_315_true: {
                        if(equals())      break compare_315_true;
                        loadi             (0);
                        if(always())      break compare_315_false;
} // compare_315_true:
                        loadi             (1);
} // compare_315_false:
                                             logical_and_316_true: {
                                             logical_and_316_false: {
                        if(equals())      break logical_and_316_false;
                        loadi             (0);
                        loadx             ();
                        load              (3+BP+X);
                        store             (6+BP);
                        loadi             (1);
                        subtract          (6+BP);
                                             compare_317_false: {
                                             compare_317_true: {
                        if(equals())      break compare_317_true;
                        loadi             (0);
                        if(always())      break compare_317_false;
} // compare_317_true:
                        loadi             (1);
} // compare_317_false:
                        if(equals())      break logical_and_316_false;
                        loadi             (1);
                        if(always())      break logical_and_316_true;
} // logical_and_316_false:
                        loadi             (0);
} // logical_and_316_true:
                                             if_318_end: {
                                             if_318_next: {
                        if(equals())      break if_318_next;
                                                            //         temp_rvalue = compiler_allocate_temp_local();
                        movebp            (13);
                        compiler_allocate_temp_local(); 
                        movebp            (-13);
                        store             (4+BP);
                                                            //         temp_array_index = compiler_allocate_temp_local();
                        movebp            (13);
                        compiler_allocate_temp_local(); 
                        movebp            (-13);
                        store             (5+BP);
                                                            //         target_op_store(temp_rvalue, Target_t_local);       // temp_rvalue = A
                        load              (4+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         target_op_load_address(0, Target_t_ix);             // temp_array_index = X
                        loadi             (0);
                        store             (6+BP);
                        loadi             (0);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_load_address(); 
                        movebp            (-15);
                                                            //         target_op_store(temp_array_index, Target_t_local);
                        load              (5+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         target_op_load(value, Target_t_local);              // A = address held in local pointer variable
                        load              (1+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_load(); 
                        movebp            (-15);
                                                            //         target_op_add(temp_array_index, Target_t_local);    // X = A + temp_array_index
                        load              (5+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_add();  
                        movebp            (-15);
                                                            //         target_op_loadx();                          
                        movebp            (13);
                        target_op_loadx(); 
                        movebp            (-13);
                                                            //         target_op_load(temp_rvalue, Target_t_local);        // (X) = temp_rvalue
                        load              (4+BP);
                        store             (6+BP);
                        loadi             (1);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_load(); 
                        movebp            (-15);
                                                            //         target_op_store(0, Target_t_indirect);
                        loadi             (0);
                        store             (6+BP);
                        loadi             (5);
                        store             (7+BP);
                        load              (7+BP);
                        store             (16+BP);
                        load              (6+BP);
                        store             (15+BP);
                        movebp            (15);
                        target_op_store(); 
                        movebp            (-15);
                                                            //         compiler_free_temp_local(temp_array_index);
                        load              (5+BP);
                        store             (6+BP);
                        load              (6+BP);
                        store             (14+BP);
                        movebp            (14);
                        compiler_free_temp_local(); 
                        movebp            (-14);
                                                            //         compiler_free_temp_local(temp_rvalue);
                        load              (4+BP);
                        store             (6+BP);
                        load              (6+BP);
                        store             (14+BP);
                        movebp            (14);
                        compiler_free_temp_local(); 
                        movebp            (-14);
                                                            //         return;
                        if(always())      break compiler_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     error_compiler("left hand side of assignment statement must be an integer identifier or array element");
} // if_318_next:
} // if_318_end:
                        loadi             (2260);
                        store             (6+BP);
                        load              (6+BP);
                        store             (14+BP);
                        movebp            (14);
                        error_compiler(); 
                        movebp            (-14);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_assignment_statement_array_begin(int out_temp_array_index_cookie[]) {
} // compiler_assignment_statement_end:
return;    }
function compiler_assignment_statement_array_begin
(){
                                             compiler_assignment_statement_array_begin_end: {
                                                            // 
                                                            //     out_temp_array_index_cookie[0] = compiler_allocate_temp_local();
                        loadi             (0);
                        store             (1+BP);
                        movebp            (8);
                        compiler_allocate_temp_local(); 
                        movebp            (-8);
                        store             (2+BP);
                        load              (1+BP);
                        loadx             ();
                        load              (2+BP);
                        store             (1+BP);
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (1+BP);
                        store             (X);
                                                            //     target_op_store(out_temp_array_index_cookie[0], Target_t_local);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (1+BP);
                        load              (0+BP);
                        add               (1+BP);
                        loadx             ();
                        load              (X);
                        store             (1+BP);
                        loadi             (1);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_store(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_assignment_statement_array_end(int temp_array_index_cookie[]) {
} // compiler_assignment_statement_array_begin_end:
return;    }
function compiler_assignment_statement_array_end
(){
                                             compiler_assignment_statement_array_end_end: {
                                                            //     int temp_expression;
                                                            // 
                                                            //     temp_expression = compiler_allocate_temp_local();
                        movebp            (9);
                        compiler_allocate_temp_local(); 
                        movebp            (-9);
                        store             (1+BP);
                                                            // 
                                                            //     target_op_store(temp_expression, Target_t_local);
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_store(); 
                        movebp            (-11);
                                                            //     target_op_load(temp_array_index_cookie[0], Target_t_local);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_load(); 
                        movebp            (-11);
                                                            //     target_op_loadx();
                        movebp            (9);
                        target_op_loadx(); 
                        movebp            (-9);
                                                            //     target_op_load(temp_expression, Target_t_local);
                        load              (1+BP);
                        store             (2+BP);
                        loadi             (1);
                        store             (3+BP);
                        load              (3+BP);
                        store             (12+BP);
                        load              (2+BP);
                        store             (11+BP);
                        movebp            (11);
                        target_op_load(); 
                        movebp            (-11);
                                                            // 
                                                            //     compiler_free_temp_local(temp_expression);
                        load              (1+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            //     compiler_free_temp_local(temp_array_index_cookie[0]);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (2+BP);
                        load              (0+BP);
                        add               (2+BP);
                        loadx             ();
                        load              (X);
                        store             (2+BP);
                        load              (2+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_free_temp_local(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_while_statement_begin(char out_label_while[]) {
} // compiler_assignment_statement_array_end_end:
return;    }
function compiler_while_statement_begin
(){
                                             compiler_while_statement_begin_end: {
                                                            // 
                                                            //     target_get_label("while", out_label_while);
                        loadi             (2346);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_get_label(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_while, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2352);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            //     target_begin_back_branch_block(out_label_while, "_test");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2357);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_back_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_while_statement_end(char label_while[]) {
} // compiler_while_statement_begin_end:
return;    }
function compiler_while_statement_end
(){
                                             compiler_while_statement_end_end: {
                                                            // 
                                                            //     target_op_branch_back(label_while, "_test");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2363);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_back(); 
                        movebp            (-10);
                                                            //     target_end_back_branch_block(label_while, "_test");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2369);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_back_branch_block(); 
                        movebp            (-10);
                                                            //     target_end_branch_block(label_while, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2375);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_while_statement_test(char label_while[]) {
} // compiler_while_statement_end_end:
return;    }
function compiler_while_statement_test
(){
                                             compiler_while_statement_test_end: {
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_op_branch_if_false(label_while, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2380);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_false(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ===========================================================================
                                                            // //
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_if_statement_test_fn(char out_label_if[]) {
} // compiler_while_statement_test_end:
return;    }
function compiler_if_statement_test_fn
(){
                                             compiler_if_statement_test_fn_end: {
                                                            // 
                                                            //     target_get_label("if", out_label_if);
                        loadi             (2385);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_get_label(); 
                        movebp            (-10);
                                                            // 
                                                            //     target_op_test();
                        movebp            (8);
                        target_op_test(); 
                        movebp            (-8);
                                                            //     target_begin_branch_block(out_label_if, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2388);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            //     target_begin_branch_block(out_label_if, "_next");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2393);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_begin_branch_block(); 
                        movebp            (-10);
                                                            //     target_op_branch_if_false(out_label_if, "_next");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2399);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch_if_false(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_if_statement_else_fn(char label_if[]) {
} // compiler_if_statement_test_fn_end:
return;    }
function compiler_if_statement_else_fn
(){
                                             compiler_if_statement_else_fn_end: {
                                                            // 
                                                            //     target_op_branch(label_if, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2405);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_op_branch(); 
                        movebp            (-10);
                                                            //     target_end_branch_block(label_if, "_next");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2410);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_if_statement_no_else_fn(char label_if[]) {
} // compiler_if_statement_else_fn_end:
return;    }
function compiler_if_statement_no_else_fn
(){
                                             compiler_if_statement_no_else_fn_end: {
                                                            // 
                                                            //     target_end_branch_block(label_if, "_next");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2416);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            //     target_end_branch_block(label_if, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2422);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // compiler_if_statement_else_end_fn(char label_if[]) {
} // compiler_if_statement_no_else_fn_end:
return;    }
function compiler_if_statement_else_end_fn
(){
                                             compiler_if_statement_else_end_fn_end: {
                                                            // 
                                                            //     target_end_branch_block(label_if, "_end");
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (2427);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        target_end_branch_block(); 
                        movebp            (-10);
                                                            // }
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "syntax.h"
                                                            // #endif
                                                            // 
                                                            // // C-Subset Syntax 
                                                            // //
                                                            // // program
                                                            // //            global-declaration-list
                                                            // //
                                                            // // global-declaration
                                                            // //            declaration
                                                            // //            function-definition
                                                            // //
                                                            // // global-declaration-list
                                                            // //            global-declaration global-declaration-list
                                                            // //            global-declaration
                                                            // //
                                                            // // function-definition
                                                            // //            identifier( function-argument-declaration-list ) function-compound-statement
                                                            // //            identifier( ) function-compound-statement
                                                            // //
                                                            // // function-compound-statement
                                                            // //            { local-declaration-list statement-list } 
                                                            // //            { statement-list } 
                                                            // //
                                                            // // declaration
                                                            // //            type-specifier identifier ;
                                                            // //            type-specifier identifier [ integer-constant ] ;
                                                            // //            type-specifier identifier [ identifier ] ;
                                                            // //            enum { enumerator-list } ;
                                                            // //
                                                            // // local-declaration-list
                                                            // //            declaration local-declaration-list
                                                            // //            declaration
                                                            // //
                                                            // // enumerator
                                                            // //            identifier = integer-constant
                                                            // //            identifier
                                                            // //
                                                            // // enumerator-list
                                                            // //            enumerator , enumerator-list
                                                            // //            enumerator
                                                            // //            
                                                            // // function-argument-declaration-list
                                                            // //            function-argument-declaration , function-argument-declaration-list
                                                            // //            function-argument-declaration
                                                            // //
                                                            // // function-argument-declaration
                                                            // //            type-specifier identifier
                                                            // //            type-specifier identifier []
                                                            // //
                                                            // // type-specifier
                                                            // //            int
                                                            // //            char
                                                            // //
                                                            // // statement
                                                            // //           if-statement
                                                            // //           while-statement
                                                            // //           compound-statement
                                                            // //           assignment-statement ;
                                                            // //           expression-statement ;
                                                            // //           return-statement ;
                                                            // //
                                                            // // statement-list
                                                            // //            statement statement-list
                                                            // //            statement
                                                            // //            
                                                            // // if-statement
                                                            // //            if ( expression ) statement else statement
                                                            // //            if ( expression ) statement
                                                            // //
                                                            // // while-statement
                                                            // //            while ( expression ) statement
                                                            // //
                                                            // // assignment-statement
                                                            // //            identifier = expression
                                                            // //            identifier [ expression ] = expression
                                                            // //            
                                                            // // expression-statement
                                                            // //           expression
                                                            // //
                                                            // // return-statement
                                                            // //            return expression
                                                            // //            return
                                                            // //
                                                            // // compound-statement
                                                            // //            { statement-list } 
                                                            // //
                                                            // // expression
                                                            // //            logical-or-expression
                                                            // //
                                                            // // logical-or-expression
                                                            // //            logical-and-expression logical-or-switch-sequence
                                                            // //            logical-and-expression
                                                            // //
                                                            // // logical-or-switch-sequence
                                                            // //            || logical-and-expression logical-or-switch-sequence
                                                            // //            || logical-and-expression
                                                            // //
                                                            // // logical-and-expression
                                                            // //            equality-expression logical-and-switch-sequence
                                                            // //            equality-expression
                                                            // //
                                                            // // logical-and-switch-sequence
                                                            // //            && equality-expression logical-and-switch-sequence
                                                            // //            && equality-expression
                                                            // //
                                                            // // equality-expression
                                                            // //            relational-expression equality-expression-sequence
                                                            // //            relational-expression
                                                            // //
                                                            // // equality-expression-sequence
                                                            // //            equality-operator-operator relational-expression equality-expression-sequence
                                                            // //            equality-operator-operator relational-expression
                                                            // //
                                                            // // equality-operator
                                                            // //            one-of == !=
                                                            // //
                                                            // // relational-expression
                                                            // //            additive-expression relational-expression-sequence
                                                            // //            additive-expression
                                                            // //
                                                            // // relational-expression-sequence
                                                            // //            relational-operator additive-expression relational-expression-sequence
                                                            // //            relational-operator additive-expression
                                                            // //
                                                            // // relational-operator
                                                            // //           one-of < <= > >=
                                                            // //
                                                            // // additive-expression
                                                            // //            multiplicative-expression additive-expression-sequence
                                                            // //            multiplicative-expression
                                                            // //
                                                            // // additive-expression-sequence
                                                            // //           additive-operator multiplicative-expression additive-expression-sequence
                                                            // //           additive-operator multiplicative-expression
                                                            // //
                                                            // // additive-operator
                                                            // //           one-of  + - 
                                                            // //            
                                                            // // multiplicative-expression
                                                            // //            unary-expression multiplicative-expression-sequence
                                                            // //            unary-expression
                                                            // //
                                                            // // multiplicative-expression-sequence
                                                            // //            multiplicative-operator unary-expression multiplicative-expression-sequence
                                                            // //            multiplicative-operator unary-expression
                                                            // //
                                                            // // multiplicative-operator
                                                            // //           one-of  * / 
                                                            // //
                                                            // // unary-expression
                                                            // //            unary-operator unary-expression
                                                            // //            primary-expression
                                                            // //            
                                                            // // unary-operator
                                                            // //            one of  ! + - 
                                                            // //
                                                            // // primary-expression
                                                            // //            built-in-function
                                                            // //            identifier ( function-call-argument-list )
                                                            // //            identifier [ expression ]
                                                            // //            identifier
                                                            // //            integer-constant
                                                            // //            character-constant
                                                            // //            ( expression )
                                                            // //
                                                            // // function-call-argument-list
                                                            // //            function-call-argument , function-call-argument-list
                                                            // //            function-call-argument
                                                            // //
                                                            // // function-call-argument
                                                            // //            string-literal
                                                            // //            pointer-identifier
                                                            // //            expression
                                                            // //
                                                            // // built-in-function
                                                            // //           fgetc ( stdin )
                                                            // //           fputc ( expression , stdout)
                                                            // //           fputc ( expression , stderr)
                                                            // //           exit  ( expression )
                                                            // //           debug ( expression )
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // built-in-function
                                                            // //           fgetc ( stdin )
                                                            // //           fputc ( expression , stdout)
                                                            // //           fputc ( expression , stderr)
                                                            // //           exit  ( expression )
                                                            // //           debug ( expression )
                                                            // //
                                                            // syntax_built_in_function() {
} // compiler_if_statement_else_end_fn_end:
return;    }
function syntax_built_in_function
(){
                                             syntax_built_in_function_end: {
                                                            // 
                                                            //     // ----- fgetc  ( stdin )
                                                            //     //
                                                            //     if (token_advance_if("fgetc")) {
                        loadi             (2432);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_319_end: {
                                             if_319_next: {
                        if(equals())      break if_319_next;
                                                            //         if (! (token_advance_if("(") && token_advance_if("stdin") && token_advance_if(")"))) {
                        loadi             (2438);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_and_320_true: {
                                             logical_and_320_false: {
                        if(equals())      break logical_and_320_false;
                        loadi             (2440);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                        if(equals())      break logical_and_320_false;
                        loadi             (2446);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                        if(equals())      break logical_and_320_false;
                        loadi             (1);
                        if(always())      break logical_and_320_true;
} // logical_and_320_false:
                        loadi             (0);
} // logical_and_320_true:
                                             logical_not_321_true: {
                                             logical_not_321_false: {
                        if(notequals())   break logical_not_321_false;
                        loadi             (1);
                        if(always())      break logical_not_321_true;
} // logical_not_321_false:
                        loadi             (0);
} // logical_not_321_true:
                                             if_322_end: {
                                             if_322_next: {
                        if(equals())      break if_322_next;
                                                            //             error_syntax("fgetc(stdin) expected");
                        loadi             (2448);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         compiler_built_in_function_fgetc();
} // if_322_next:
} // if_322_end:
                        movebp            (8);
                        compiler_built_in_function_fgetc(); 
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_built_in_function_end;
                                                            //     }
                                                            // 
                                                            //     // ----- fputc ( expression , stdout)
                                                            //     // ----- fputc ( expression , stderr)
                                                            //     //
                                                            //     if (token_advance_if("fputc")) {
} // if_319_next:
} // if_319_end:
                        loadi             (2470);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_323_end: {
                                             if_323_next: {
                        if(equals())      break if_323_next;
                                                            // 
                                                            //         if (! token_advance_if("(")) {
                        loadi             (2476);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_324_true: {
                                             logical_not_324_false: {
                        if(notequals())   break logical_not_324_false;
                        loadi             (1);
                        if(always())      break logical_not_324_true;
} // logical_not_324_false:
                        loadi             (0);
} // logical_not_324_true:
                                             if_325_end: {
                                             if_325_next: {
                        if(equals())      break if_325_next;
                                                            //             error_syntax("opening parenthesis expected after fputc");
                        loadi             (2478);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! syntax_expression()) {
} // if_325_next:
} // if_325_end:
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                                             logical_not_326_true: {
                                             logical_not_326_false: {
                        if(notequals())   break logical_not_326_false;
                        loadi             (1);
                        if(always())      break logical_not_326_true;
} // logical_not_326_false:
                        loadi             (0);
} // logical_not_326_true:
                                             if_327_end: {
                                             if_327_next: {
                        if(equals())      break if_327_next;
                                                            //             error_syntax("expression expected after fputc opening parenthesis");
                        loadi             (2519);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(",")) {
} // if_327_next:
} // if_327_end:
                        loadi             (2571);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_328_true: {
                                             logical_not_328_false: {
                        if(notequals())   break logical_not_328_false;
                        loadi             (1);
                        if(always())      break logical_not_328_true;
} // logical_not_328_false:
                        loadi             (0);
} // logical_not_328_true:
                                             if_329_end: {
                                             if_329_next: {
                        if(equals())      break if_329_next;
                                                            //             error_syntax("fputc takes two arguments");
                        loadi             (2573);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (token_advance_if("stdout")) {
} // if_329_next:
} // if_329_end:
                        loadi             (2599);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_330_end: {
                                             if_330_next: {
                        if(equals())      break if_330_next;
                                                            //             compiler_built_in_function_fputc_stdout();
                        movebp            (8);
                        compiler_built_in_function_fputc_stdout(); 
                        movebp            (-8);
                                                            //         }
                                                            //         else if (token_advance_if("stderr")) {
                        if(always())      break if_330_end;
} // if_330_next:
                        loadi             (2606);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_331_end: {
                                             if_331_next: {
                        if(equals())      break if_331_next;
                                                            //             compiler_built_in_function_fputc_stderr();
                        movebp            (8);
                        compiler_built_in_function_fputc_stderr(); 
                        movebp            (-8);
                                                            //         }
                                                            //         else {
                        if(always())      break if_331_end;
} // if_331_next:
                                                            //             error_syntax("second argument of fputc must be stdout or stderr");
                        loadi             (2613);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(")")) {
} // if_331_end:
} // if_330_end:
                        loadi             (2663);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_332_true: {
                                             logical_not_332_false: {
                        if(notequals())   break logical_not_332_false;
                        loadi             (1);
                        if(always())      break logical_not_332_true;
} // logical_not_332_false:
                        loadi             (0);
} // logical_not_332_true:
                                             if_333_end: {
                                             if_333_next: {
                        if(equals())      break if_333_next;
                                                            //             error_syntax("closing parenthesis expected");
                        loadi             (2665);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }   
                                                            //             
                                                            //         return True;
} // if_333_next:
} // if_333_end:
                        loadi             (1);
                        if(always())      break syntax_built_in_function_end;
                                                            //     }
                                                            // 
                                                            //     // ----- exit ( expression )
                                                            //     //
                                                            //     if (token_advance_if("exit")) {
} // if_323_next:
} // if_323_end:
                        loadi             (2694);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_334_end: {
                                             if_334_next: {
                        if(equals())      break if_334_next;
                                                            // 
                                                            //         if (! token_advance_if("(")) {
                        loadi             (2699);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_335_true: {
                                             logical_not_335_false: {
                        if(notequals())   break logical_not_335_false;
                        loadi             (1);
                        if(always())      break logical_not_335_true;
} // logical_not_335_false:
                        loadi             (0);
} // logical_not_335_true:
                                             if_336_end: {
                                             if_336_next: {
                        if(equals())      break if_336_next;
                                                            //             error_syntax("opening parenthesis expected after exit");
                        loadi             (2701);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! syntax_expression()) {
} // if_336_next:
} // if_336_end:
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                                             logical_not_337_true: {
                                             logical_not_337_false: {
                        if(notequals())   break logical_not_337_false;
                        loadi             (1);
                        if(always())      break logical_not_337_true;
} // logical_not_337_false:
                        loadi             (0);
} // logical_not_337_true:
                                             if_338_end: {
                                             if_338_next: {
                        if(equals())      break if_338_next;
                                                            //             error_syntax("expression expected after exit opening parenthesis");
                        loadi             (2741);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(")")) {
} // if_338_next:
} // if_338_end:
                        loadi             (2792);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_339_true: {
                                             logical_not_339_false: {
                        if(notequals())   break logical_not_339_false;
                        loadi             (1);
                        if(always())      break logical_not_339_true;
} // logical_not_339_false:
                        loadi             (0);
} // logical_not_339_true:
                                             if_340_end: {
                                             if_340_next: {
                        if(equals())      break if_340_next;
                                                            //             error_syntax("closing parenthesis expected");
                        loadi             (2794);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         compiler_built_in_function_exit();
} // if_340_next:
} // if_340_end:
                        movebp            (8);
                        compiler_built_in_function_exit(); 
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_built_in_function_end;
                                                            //     }
                                                            // 
                                                            //     // ----- debug ( expression )
                                                            //     //
                                                            //     if (token_advance_if("debug")) {
} // if_334_next:
} // if_334_end:
                        loadi             (2823);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_341_end: {
                                             if_341_next: {
                        if(equals())      break if_341_next;
                                                            // 
                                                            //         if (! token_advance_if("(")) {
                        loadi             (2829);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_342_true: {
                                             logical_not_342_false: {
                        if(notequals())   break logical_not_342_false;
                        loadi             (1);
                        if(always())      break logical_not_342_true;
} // logical_not_342_false:
                        loadi             (0);
} // logical_not_342_true:
                                             if_343_end: {
                                             if_343_next: {
                        if(equals())      break if_343_next;
                                                            //             error_syntax("opening parenthesis expected after debug");
                        loadi             (2831);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! syntax_expression()) {
} // if_343_next:
} // if_343_end:
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                                             logical_not_344_true: {
                                             logical_not_344_false: {
                        if(notequals())   break logical_not_344_false;
                        loadi             (1);
                        if(always())      break logical_not_344_true;
} // logical_not_344_false:
                        loadi             (0);
} // logical_not_344_true:
                                             if_345_end: {
                                             if_345_next: {
                        if(equals())      break if_345_next;
                                                            //             error_syntax("expression expected after debug opening parenthesis");
                        loadi             (2872);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(")")) {
} // if_345_next:
} // if_345_end:
                        loadi             (2924);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_346_true: {
                                             logical_not_346_false: {
                        if(notequals())   break logical_not_346_false;
                        loadi             (1);
                        if(always())      break logical_not_346_true;
} // logical_not_346_false:
                        loadi             (0);
} // logical_not_346_true:
                                             if_347_end: {
                                             if_347_next: {
                        if(equals())      break if_347_next;
                                                            //             error_syntax("closing parenthesis expected");
                        loadi             (2926);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         compiler_built_in_function_debug();
} // if_347_next:
} // if_347_end:
                        movebp            (8);
                        compiler_built_in_function_debug(); 
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_built_in_function_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_341_next:
} // if_341_end:
                        loadi             (0);
                        if(always())      break syntax_built_in_function_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-call-argument
                                                            // //            string-literal
                                                            // //            pointer-identifier
                                                            // //            expression
                                                            // //
                                                            // syntax_function_call_argument() {
} // syntax_built_in_function_end:
return;    }
function syntax_function_call_argument
(){
                                             syntax_function_call_argument_end: {
                                                            // 
                                                            //     if (token_type_is(Token_t_string_literal)) {
                        loadi             (3);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_type_is();  
                        movebp            (-9);
                                             if_348_end: {
                                             if_348_next: {
                        if(equals())      break if_348_next;
                                                            //         compiler_function_call_string_literal_argument(token_text); // >>>>>>>>>>
                        loadi             (-1049611+global);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_function_call_string_literal_argument(); 
                        movebp            (-9);
                                                            //         token_advance();
                        movebp            (8);
                        token_advance();  
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_function_call_argument_end;
                                                            //     }
                                                            //     
                                                            //     // need to check symbol table to determine if identifier needs to be passed as a pointer
                                                            //     if (token_type_is(Token_t_identifier) && (! token_lookahead_text_is("["))) {
} // if_348_next:
} // if_348_end:
                        loadi             (4);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_type_is();  
                        movebp            (-9);
                                             logical_and_349_true: {
                                             logical_and_349_false: {
                        if(equals())      break logical_and_349_false;
                        loadi             (2955);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_lookahead_text_is(); 
                        movebp            (-9);
                                             logical_not_350_true: {
                                             logical_not_350_false: {
                        if(notequals())   break logical_not_350_false;
                        loadi             (1);
                        if(always())      break logical_not_350_true;
} // logical_not_350_false:
                        loadi             (0);
} // logical_not_350_true:
                        if(equals())      break logical_and_349_false;
                        loadi             (1);
                        if(always())      break logical_and_349_true;
} // logical_and_349_false:
                        loadi             (0);
} // logical_and_349_true:
                                             if_351_end: {
                                             if_351_next: {
                        if(equals())      break if_351_next;
                                                            //         if (compiler_function_call_pointer_argument(token_text)) { // >>>>>>>>>>
                        loadi             (-1049611+global);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_function_call_pointer_argument(); 
                        movebp            (-9);
                                             if_352_end: {
                                             if_352_next: {
                        if(equals())      break if_352_next;
                                                            //             token_advance();
                        movebp            (8);
                        token_advance();  
                        movebp            (-8);
                                                            //             return True;
                        loadi             (1);
                        if(always())      break syntax_function_call_argument_end;
                                                            //         }
                                                            //     }
} // if_352_next:
} // if_352_end:
                                                            // 
                                                            //     if (syntax_expression()) {
} // if_351_next:
} // if_351_end:
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                                             if_353_end: {
                                             if_353_next: {
                        if(equals())      break if_353_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_function_call_argument_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_353_next:
} // if_353_end:
                        loadi             (0);
                        if(always())      break syntax_function_call_argument_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-call-argument-list
                                                            // //            function-call-argument , function-call-argument-list
                                                            // //            function-call-argument
                                                            // //
                                                            // syntax_function_call_argument_list(int argument_no, int function_argument_count[]) {
} // syntax_function_call_argument_end:
return;    }
function syntax_function_call_argument_list
(){
                                             syntax_function_call_argument_list_end: {
                                                            //     int cookie[1];
                                                            // 
                                                            //     if (! syntax_function_call_argument()) {
                        movebp            (9);
                        syntax_function_call_argument(); 
                        movebp            (-9);
                                             logical_not_354_true: {
                                             logical_not_354_false: {
                        if(notequals())   break logical_not_354_false;
                        loadi             (1);
                        if(always())      break logical_not_354_true;
} // logical_not_354_false:
                        loadi             (0);
} // logical_not_354_true:
                                             if_355_end: {
                                             if_355_next: {
                        if(equals())      break if_355_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_call_argument_list_end;
                                                            //     }
                                                            // 
                                                            //     function_argument_count[0] = function_argument_count[0] + 1;
} // if_355_next:
} // if_355_end:
                        loadi             (0);
                        store             (3+BP);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (X);
                        store             (4+BP);
                        loadi             (1);
                        add               (4+BP);
                        store             (4+BP);
                        load              (3+BP);
                        loadx             ();
                        load              (4+BP);
                        store             (3+BP);
                        loadi             (X);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (3+BP);
                        store             (X);
                                                            // 
                                                            //     compiler_function_call_argument_prepare(cookie); // >>>>>>>>>>
                        loadi             (2+BP);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        compiler_function_call_argument_prepare(); 
                        movebp            (-10);
                                                            // 
                                                            //     if (token_advance_if(",")) {
                        loadi             (2957);
                        store             (3+BP);
                        load              (3+BP);
                        store             (10+BP);
                        movebp            (10);
                        token_advance_if(); 
                        movebp            (-10);
                                             if_356_end: {
                                             if_356_next: {
                        if(equals())      break if_356_next;
                                                            //         syntax_function_call_argument_list(argument_no + 1, function_argument_count);
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (3+BP);
                        load              (1+BP);
                        store             (4+BP);
                        load              (4+BP);
                        store             (12+BP);
                        load              (3+BP);
                        store             (11+BP);
                        movebp            (11);
                        syntax_function_call_argument_list(); 
                        movebp            (-11);
                                                            //     }
                                                            // 
                                                            //     compiler_function_call_argument_pass(argument_no + 1, function_argument_count[0], cookie); // >>>>>>>>>>
} // if_356_next:
} // if_356_end:
                        load              (0+BP);
                        store             (3+BP);
                        loadi             (1);
                        add               (3+BP);
                        store             (3+BP);
                        loadi             (0);
                        loadx             ();
                        loadi             (X);
                        store             (4+BP);
                        load              (1+BP);
                        add               (4+BP);
                        loadx             ();
                        load              (X);
                        store             (4+BP);
                        loadi             (2+BP);
                        store             (5+BP);
                        load              (5+BP);
                        store             (14+BP);
                        load              (4+BP);
                        store             (13+BP);
                        load              (3+BP);
                        store             (12+BP);
                        movebp            (12);
                        compiler_function_call_argument_pass(); 
                        movebp            (-12);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_function_call_argument_list_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // primary-expression
                                                            // //            built-in-function
                                                            // //            identifier ( function-call-argument-list )
                                                            // //            identifier [ expression ]
                                                            // //            identifier
                                                            // //            integer-constant
                                                            // //            character-constant
                                                            // //            ( expression )
                                                            // //
                                                            // syntax_primary_expression() {
} // syntax_function_call_argument_list_end:
return;    }
function syntax_primary_expression
(){
                                             syntax_primary_expression_end: {
                                                            //     char cookie[Str_size];
                                                            //     char name[Str_size];
                                                            //     int function_argument_count[1];
                                                            // 
                                                            //     // ------ built-in-function
                                                            // 
                                                            //     if (syntax_built_in_function()) {
                        movebp            (521);
                        syntax_built_in_function(); 
                        movebp            (-521);
                                             if_357_end: {
                                             if_357_next: {
                        if(equals())      break if_357_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ------ identifier ( function-call-argument-list )
                                                            // 
                                                            //     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) {
} // if_357_next:
} // if_357_end:
                        loadi             (4);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             logical_and_358_true: {
                                             logical_and_358_false: {
                        if(equals())      break logical_and_358_false;
                        loadi             (2959);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_lookahead_text_is(); 
                        movebp            (-522);
                        if(equals())      break logical_and_358_false;
                        loadi             (1);
                        if(always())      break logical_and_358_true;
} // logical_and_358_false:
                        loadi             (0);
} // logical_and_358_true:
                                             if_359_end: {
                                             if_359_next: {
                        if(equals())      break if_359_next;
                                                            //         copy(name, token_text);
                        loadi             (256+BP);
                        store             (513+BP);
                        loadi             (-1049611+global);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        copy();           
                        movebp            (-523);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            // 
                                                            //         compiler_function_call_prepare(name, cookie); // >>>>>>>>>>
                        loadi             (256+BP);
                        store             (513+BP);
                        loadi             (0+BP);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        compiler_function_call_prepare(); 
                        movebp            (-523);
                                                            // 
                                                            //         function_argument_count[0] = 0;
                        loadi             (0);
                        store             (513+BP);
                        loadi             (0);
                        store             (514+BP);
                        load              (513+BP);
                        loadx             ();
                        load              (514+BP);
                        store             (512+BP+X);
                                                            //         syntax_function_call_argument_list(0, function_argument_count);
                        loadi             (0);
                        store             (513+BP);
                        loadi             (512+BP);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        syntax_function_call_argument_list(); 
                        movebp            (-523);
                                                            // 
                                                            //         compiler_function_call_execute(cookie, function_argument_count[0]); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (513+BP);
                        loadi             (0);
                        loadx             ();
                        load              (512+BP+X);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        compiler_function_call_execute(); 
                        movebp            (-523);
                                                            //                 
                                                            //         if (! token_advance_if(")")) {
                        loadi             (2961);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_advance_if(); 
                        movebp            (-522);
                                             logical_not_360_true: {
                                             logical_not_360_false: {
                        if(notequals())   break logical_not_360_false;
                        loadi             (1);
                        if(always())      break logical_not_360_true;
} // logical_not_360_false:
                        loadi             (0);
} // logical_not_360_true:
                                             if_361_end: {
                                             if_361_next: {
                        if(equals())      break if_361_next;
                                                            //             error_syntax("closing parenthesis expected after function call expression");
                        loadi             (2963);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //         }
                                                            // 
                                                            //         return True;
} // if_361_next:
} // if_361_end:
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ------ identifier [ expression ]
                                                            // 
                                                            //     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("[")) {
} // if_359_next:
} // if_359_end:
                        loadi             (4);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             logical_and_362_true: {
                                             logical_and_362_false: {
                        if(equals())      break logical_and_362_false;
                        loadi             (3023);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_lookahead_text_is(); 
                        movebp            (-522);
                        if(equals())      break logical_and_362_false;
                        loadi             (1);
                        if(always())      break logical_and_362_true;
} // logical_and_362_false:
                        loadi             (0);
} // logical_and_362_true:
                                             if_363_end: {
                                             if_363_next: {
                        if(equals())      break if_363_next;
                                                            //         copy(name, token_text);
                        loadi             (256+BP);
                        store             (513+BP);
                        loadi             (-1049611+global);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        copy();           
                        movebp            (-523);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            // 
                                                            //         if (! syntax_expression()) {
                        movebp            (521);
                        syntax_expression(); 
                        movebp            (-521);
                                             logical_not_364_true: {
                                             logical_not_364_false: {
                        if(notequals())   break logical_not_364_false;
                        loadi             (1);
                        if(always())      break logical_not_364_true;
} // logical_not_364_false:
                        loadi             (0);
} // logical_not_364_true:
                                             if_365_end: {
                                             if_365_next: {
                        if(equals())      break if_365_next;
                                                            //             error_syntax("expression expected after opening bracket");
                        loadi             (3025);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if("]")) {
} // if_365_next:
} // if_365_end:
                        loadi             (3067);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_advance_if(); 
                        movebp            (-522);
                                             logical_not_366_true: {
                                             logical_not_366_false: {
                        if(notequals())   break logical_not_366_false;
                        loadi             (1);
                        if(always())      break logical_not_366_true;
} // logical_not_366_false:
                        loadi             (0);
} // logical_not_366_true:
                                             if_367_end: {
                                             if_367_next: {
                        if(equals())      break if_367_next;
                                                            //             error_syntax("closing bracket expected");
                        loadi             (3069);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //         }
                                                            // 
                                                            //         compiler_primary_expression_array_index(); // >>>>>>>>>>
} // if_367_next:
} // if_367_end:
                        movebp            (521);
                        compiler_primary_expression_array_index(); 
                        movebp            (-521);
                                                            //         compiler_primary_expression_identifier(name); // >>>>>>>>>>
                        loadi             (256+BP);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_primary_expression_identifier(); 
                        movebp            (-522);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ------ identifier
                                                            // 
                                                            //     if (token_type_is(Token_t_identifier)) {
} // if_363_next:
} // if_363_end:
                        loadi             (4);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             if_368_end: {
                                             if_368_next: {
                        if(equals())      break if_368_next;
                                                            //         compiler_primary_expression_identifier(token_text); // >>>>>>>>>>
                        loadi             (-1049611+global);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_primary_expression_identifier(); 
                        movebp            (-522);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ------ integer-constant
                                                            // 
                                                            //     if (token_type_is(Token_t_integer_constant)) {
} // if_368_next:
} // if_368_end:
                        loadi             (2);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             if_369_end: {
                                             if_369_next: {
                        if(equals())      break if_369_next;
                                                            //         compiler_primary_expression_integer_constant(token_text); // >>>>>>>>>>       
                        loadi             (-1049611+global);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_primary_expression_integer_constant(); 
                        movebp            (-522);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ----- character-constant
                                                            // 
                                                            //     if (token_type_is(Token_t_character_constant)) {
} // if_369_next:
} // if_369_end:
                        loadi             (1);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             if_370_end: {
                                             if_370_next: {
                        if(equals())      break if_370_next;
                                                            //         compiler_primary_expression_character_constant(token_text[0]); // >>>>>>>>>>        
                        loadi             (0);
                        loadx             ();
                        load              (-1049611+global+X);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_primary_expression_character_constant(); 
                        movebp            (-522);
                                                            //         token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     // ------ ( expression )
                                                            // 
                                                            //     if (token_advance_if("(")) {
} // if_370_next:
} // if_370_end:
                        loadi             (3094);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_advance_if(); 
                        movebp            (-522);
                                             if_371_end: {
                                             if_371_next: {
                        if(equals())      break if_371_next;
                                                            //         if (! syntax_expression()) {
                        movebp            (521);
                        syntax_expression(); 
                        movebp            (-521);
                                             logical_not_372_true: {
                                             logical_not_372_false: {
                        if(notequals())   break logical_not_372_false;
                        loadi             (1);
                        if(always())      break logical_not_372_true;
} // logical_not_372_false:
                        loadi             (0);
} // logical_not_372_true:
                                             if_373_end: {
                                             if_373_next: {
                        if(equals())      break if_373_next;
                                                            //             error_syntax("expression expected after opening parenthesis");
                        loadi             (3096);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(")")) {
} // if_373_next:
} // if_373_end:
                        loadi             (3142);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_advance_if(); 
                        movebp            (-522);
                                             logical_not_374_true: {
                                             logical_not_374_false: {
                        if(notequals())   break logical_not_374_false;
                        loadi             (1);
                        if(always())      break logical_not_374_true;
} // logical_not_374_false:
                        loadi             (0);
} // logical_not_374_true:
                                             if_375_end: {
                                             if_375_next: {
                        if(equals())      break if_375_next;
                                                            //             error_syntax("closing parenthesis expected after expression");
                        loadi             (3144);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //         }
                                                            // 
                                                            //         return True;
} // if_375_next:
} // if_375_end:
                        loadi             (1);
                        if(always())      break syntax_primary_expression_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_371_next:
} // if_371_end:
                        loadi             (0);
                        if(always())      break syntax_primary_expression_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // unary-operator
                                                            // //            one of  ! + - 
                                                            // //
                                                            // syntax_unary_operator(char s[]) {
} // syntax_primary_expression_end:
return;    }
function syntax_unary_operator
(){
                                             syntax_unary_operator_end: {
                                                            //  
                                                            //     return contains(" ! + - ", s);
                        loadi             (3190);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        contains();       
                        movebp            (-10);
                        if(always())      break syntax_unary_operator_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // unary-expression
                                                            // //            unary-operator unary-expression
                                                            // //            primary-expression
                                                            // //            
                                                            // syntax_unary_expression() {
} // syntax_unary_operator_end:
return;    }
function syntax_unary_expression
(){
                                             syntax_unary_expression_end: {
                                                            //     char operator_text[Str_size];
                                                            // 
                                                            //     if (token_type_is(Token_t_symbol) && syntax_unary_operator(token_text)) {
                        loadi             (5);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_type_is();  
                        movebp            (-265);
                                             logical_and_376_true: {
                                             logical_and_376_false: {
                        if(equals())      break logical_and_376_false;
                        loadi             (-1049611+global);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        syntax_unary_operator(); 
                        movebp            (-265);
                        if(equals())      break logical_and_376_false;
                        loadi             (1);
                        if(always())      break logical_and_376_true;
} // logical_and_376_false:
                        loadi             (0);
} // logical_and_376_true:
                                             if_377_end: {
                                             if_377_next: {
                        if(equals())      break if_377_next;
                                                            //         copy(operator_text, token_text);
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //         token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            // 
                                                            //         if (! syntax_unary_expression()) {
                        movebp            (264);
                        syntax_unary_expression(); 
                        movebp            (-264);
                                             logical_not_378_true: {
                                             logical_not_378_false: {
                        if(notequals())   break logical_not_378_false;
                        loadi             (1);
                        if(always())      break logical_not_378_true;
} // logical_not_378_false:
                        loadi             (0);
} // logical_not_378_true:
                                             if_379_end: {
                                             if_379_next: {
                        if(equals())      break if_379_next;
                                                            //             error_syntax("expression expected after unary operator");
                        loadi             (3198);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //         }
                                                            //                   
                                                            //         compiler_unary_expression(operator_text); // >>>>>>>>>>
} // if_379_next:
} // if_379_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_unary_expression(); 
                        movebp            (-265);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_unary_expression_end;
                                                            //     }
                                                            // 
                                                            //     return syntax_primary_expression();
} // if_377_next:
} // if_377_end:
                        movebp            (264);
                        syntax_primary_expression(); 
                        movebp            (-264);
                        if(always())      break syntax_unary_expression_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // multiplicative-operator
                                                            // //           one-of  * / 
                                                            // //
                                                            // syntax_multiplicative_operator(char s[]) {
} // syntax_unary_expression_end:
return;    }
function syntax_multiplicative_operator
(){
                                             syntax_multiplicative_operator_end: {
                                                            //  
                                                            //     return contains(" * / ", s);
                        loadi             (3239);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        contains();       
                        movebp            (-10);
                        if(always())      break syntax_multiplicative_operator_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // multiplicative-expression-sequence
                                                            // //            multiplicative-operator unary-expression multiplicative-expression-sequence
                                                            // //            multiplicative-operator unary-expression
                                                            // //
                                                            // syntax_multiplicative_expression_sequence() {
} // syntax_multiplicative_operator_end:
return;    }
function syntax_multiplicative_expression_sequence
(){
                                             syntax_multiplicative_expression_sequence_end: {
                                                            //     int cookie;
                                                            //     char operator_text[Str_size];
                                                            // 
                                                            //     if (! (token_type_is(Token_t_symbol) && syntax_multiplicative_operator(token_text))) {
                        loadi             (5);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_380_true: {
                                             logical_and_380_false: {
                        if(equals())      break logical_and_380_false;
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        syntax_multiplicative_operator(); 
                        movebp            (-266);
                        if(equals())      break logical_and_380_false;
                        loadi             (1);
                        if(always())      break logical_and_380_true;
} // logical_and_380_false:
                        loadi             (0);
} // logical_and_380_true:
                                             logical_not_381_true: {
                                             logical_not_381_false: {
                        if(notequals())   break logical_not_381_false;
                        loadi             (1);
                        if(always())      break logical_not_381_true;
} // logical_not_381_false:
                        loadi             (0);
} // logical_not_381_true:
                                             if_382_end: {
                                             if_382_next: {
                        if(equals())      break if_382_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_multiplicative_expression_sequence_end;
                                                            //     }
                                                            // 
                                                            //     copy(operator_text, token_text);
} // if_382_next:
} // if_382_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //     token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //     cookie = compiler_multiplicative_expression_sequence_begin(); // >>>>>>>>>>
                        movebp            (265);
                        compiler_multiplicative_expression_sequence_begin(); 
                        movebp            (-265);
                        store             (0+BP);
                                                            // 
                                                            //     if (! syntax_unary_expression()) {
                        movebp            (265);
                        syntax_unary_expression(); 
                        movebp            (-265);
                                             logical_not_383_true: {
                                             logical_not_383_false: {
                        if(notequals())   break logical_not_383_false;
                        loadi             (1);
                        if(always())      break logical_not_383_true;
} // logical_not_383_false:
                        loadi             (0);
} // logical_not_383_true:
                                             if_384_end: {
                                             if_384_next: {
                        if(equals())      break if_384_next;
                                                            //         error_syntax("expression expected after unary operator");
                        loadi             (3245);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //     }
                                                            // 
                                                            //     compiler_multiplicative_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
} // if_384_next:
} // if_384_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (0+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        compiler_multiplicative_expression_sequence_end(); 
                        movebp            (-267);
                                                            // 
                                                            //     syntax_multiplicative_expression_sequence();
                        movebp            (265);
                        syntax_multiplicative_expression_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_multiplicative_expression_sequence_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // multiplicative-expression
                                                            // //            unary-expression multiplicative-expression-sequence
                                                            // //            unary-expression
                                                            // //
                                                            // syntax_multiplicative_expression() {
} // syntax_multiplicative_expression_sequence_end:
return;    }
function syntax_multiplicative_expression
(){
                                             syntax_multiplicative_expression_end: {
                                                            // 
                                                            //     if (! syntax_unary_expression()) {
                        movebp            (8);
                        syntax_unary_expression(); 
                        movebp            (-8);
                                             logical_not_385_true: {
                                             logical_not_385_false: {
                        if(notequals())   break logical_not_385_false;
                        loadi             (1);
                        if(always())      break logical_not_385_true;
} // logical_not_385_false:
                        loadi             (0);
} // logical_not_385_true:
                                             if_386_end: {
                                             if_386_next: {
                        if(equals())      break if_386_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_multiplicative_expression_end;
                                                            //     }
                                                            // 
                                                            //     syntax_multiplicative_expression_sequence();
} // if_386_next:
} // if_386_end:
                        movebp            (8);
                        syntax_multiplicative_expression_sequence(); 
                        movebp            (-8);
                                                            //     
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_multiplicative_expression_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // additive-operator
                                                            // //           one-of  + - 
                                                            // //            
                                                            // syntax_additive_operator(char s[]) {
} // syntax_multiplicative_expression_end:
return;    }
function syntax_additive_operator
(){
                                             syntax_additive_operator_end: {
                                                            // 
                                                            //     return contains(" + - ", s);
                        loadi             (3286);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        contains();       
                        movebp            (-10);
                        if(always())      break syntax_additive_operator_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // additive-expression-sequence
                                                            // //           additive-operator multiplicative-expression additive-expression-sequence
                                                            // //           additive-operator multiplicative-expression
                                                            // //
                                                            // syntax_additive_expression_sequence() {
} // syntax_additive_operator_end:
return;    }
function syntax_additive_expression_sequence
(){
                                             syntax_additive_expression_sequence_end: {
                                                            //     int cookie;
                                                            //     char operator_text[Str_size];
                                                            // 
                                                            //     if (! (token_type_is(Token_t_symbol) && syntax_additive_operator(token_text)) ) {
                        loadi             (5);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_387_true: {
                                             logical_and_387_false: {
                        if(equals())      break logical_and_387_false;
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        syntax_additive_operator(); 
                        movebp            (-266);
                        if(equals())      break logical_and_387_false;
                        loadi             (1);
                        if(always())      break logical_and_387_true;
} // logical_and_387_false:
                        loadi             (0);
} // logical_and_387_true:
                                             logical_not_388_true: {
                                             logical_not_388_false: {
                        if(notequals())   break logical_not_388_false;
                        loadi             (1);
                        if(always())      break logical_not_388_true;
} // logical_not_388_false:
                        loadi             (0);
} // logical_not_388_true:
                                             if_389_end: {
                                             if_389_next: {
                        if(equals())      break if_389_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_additive_expression_sequence_end;
                                                            //     }
                                                            // 
                                                            //     copy(operator_text, token_text);
} // if_389_next:
} // if_389_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //     token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //     cookie = compiler_additive_expression_sequence_begin(); // >>>>>>>>>>
                        movebp            (265);
                        compiler_additive_expression_sequence_begin(); 
                        movebp            (-265);
                        store             (0+BP);
                                                            // 
                                                            //     if (! syntax_multiplicative_expression()) {
                        movebp            (265);
                        syntax_multiplicative_expression(); 
                        movebp            (-265);
                                             logical_not_390_true: {
                                             logical_not_390_false: {
                        if(notequals())   break logical_not_390_false;
                        loadi             (1);
                        if(always())      break logical_not_390_true;
} // logical_not_390_false:
                        loadi             (0);
} // logical_not_390_true:
                                             if_391_end: {
                                             if_391_next: {
                        if(equals())      break if_391_next;
                                                            //         error_syntax("expression expected right of additive operator");
                        loadi             (3292);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //     }
                                                            // 
                                                            //     compiler_additive_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
} // if_391_next:
} // if_391_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (0+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        compiler_additive_expression_sequence_end(); 
                        movebp            (-267);
                                                            // 
                                                            //     syntax_additive_expression_sequence();
                        movebp            (265);
                        syntax_additive_expression_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_additive_expression_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // additive-expression
                                                            // //            multiplicative-expression additive-expression-sequence
                                                            // //            multiplicative-expression
                                                            // //
                                                            // syntax_additive_expression() {
} // syntax_additive_expression_sequence_end:
return;    }
function syntax_additive_expression
(){
                                             syntax_additive_expression_end: {
                                                            // 
                                                            //     if (! syntax_multiplicative_expression()) {
                        movebp            (8);
                        syntax_multiplicative_expression(); 
                        movebp            (-8);
                                             logical_not_392_true: {
                                             logical_not_392_false: {
                        if(notequals())   break logical_not_392_false;
                        loadi             (1);
                        if(always())      break logical_not_392_true;
} // logical_not_392_false:
                        loadi             (0);
} // logical_not_392_true:
                                             if_393_end: {
                                             if_393_next: {
                        if(equals())      break if_393_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_additive_expression_end;
                                                            //     }
                                                            // 
                                                            //     syntax_additive_expression_sequence();
} // if_393_next:
} // if_393_end:
                        movebp            (8);
                        syntax_additive_expression_sequence(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_additive_expression_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // relational-operator
                                                            // //           one-of < <= > >=
                                                            // //
                                                            // syntax_relational_operator(char s[]) {
} // syntax_additive_expression_end:
return;    }
function syntax_relational_operator
(){
                                             syntax_relational_operator_end: {
                                                            // 
                                                            //     return contains(" < <= > >= ", s);
                        loadi             (3339);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        contains();       
                        movebp            (-10);
                        if(always())      break syntax_relational_operator_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // relational-expression-sequence
                                                            // //            relational-operator additive-expression relational-expression-sequence
                                                            // //            relational-operator additive-expression
                                                            // //
                                                            // syntax_relational_expression_sequence() {
} // syntax_relational_operator_end:
return;    }
function syntax_relational_expression_sequence
(){
                                             syntax_relational_expression_sequence_end: {
                                                            //     int cookie;
                                                            //     char operator_text[Str_size];
                                                            // 
                                                            //     if (! (token_type_is(Token_t_symbol) && syntax_relational_operator(token_text)) ) {
                        loadi             (5);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_394_true: {
                                             logical_and_394_false: {
                        if(equals())      break logical_and_394_false;
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        syntax_relational_operator(); 
                        movebp            (-266);
                        if(equals())      break logical_and_394_false;
                        loadi             (1);
                        if(always())      break logical_and_394_true;
} // logical_and_394_false:
                        loadi             (0);
} // logical_and_394_true:
                                             logical_not_395_true: {
                                             logical_not_395_false: {
                        if(notequals())   break logical_not_395_false;
                        loadi             (1);
                        if(always())      break logical_not_395_true;
} // logical_not_395_false:
                        loadi             (0);
} // logical_not_395_true:
                                             if_396_end: {
                                             if_396_next: {
                        if(equals())      break if_396_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_relational_expression_sequence_end;
                                                            //     }
                                                            // 
                                                            //     copy(operator_text, token_text);
} // if_396_next:
} // if_396_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //     token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //     cookie = compiler_relational_or_equality_expression_sequence_begin(); // >>>>>>>>>>
                        movebp            (265);
                        compiler_relational_or_equality_expression_sequence_begin(); 
                        movebp            (-265);
                        store             (0+BP);
                                                            // 
                                                            //     if (! syntax_additive_expression()) {
                        movebp            (265);
                        syntax_additive_expression(); 
                        movebp            (-265);
                                             logical_not_397_true: {
                                             logical_not_397_false: {
                        if(notequals())   break logical_not_397_false;
                        loadi             (1);
                        if(always())      break logical_not_397_true;
} // logical_not_397_false:
                        loadi             (0);
} // logical_not_397_true:
                                             if_398_end: {
                                             if_398_next: {
                        if(equals())      break if_398_next;
                                                            //         error_syntax("expression expected right of relational operator");
                        loadi             (3351);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //     }
                                                            // 
                                                            //     compiler_relational_or_equality_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
} // if_398_next:
} // if_398_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (0+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        compiler_relational_or_equality_expression_sequence_end(); 
                        movebp            (-267);
                                                            // 
                                                            //     syntax_relational_expression_sequence();
                        movebp            (265);
                        syntax_relational_expression_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_relational_expression_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // relational-expression
                                                            // //            additive-expression relational-expression-sequence
                                                            // //            additive-expression
                                                            // //
                                                            // syntax_relational_expression() {
} // syntax_relational_expression_sequence_end:
return;    }
function syntax_relational_expression
(){
                                             syntax_relational_expression_end: {
                                                            //  
                                                            //     if (! syntax_additive_expression()) {
                        movebp            (8);
                        syntax_additive_expression(); 
                        movebp            (-8);
                                             logical_not_399_true: {
                                             logical_not_399_false: {
                        if(notequals())   break logical_not_399_false;
                        loadi             (1);
                        if(always())      break logical_not_399_true;
} // logical_not_399_false:
                        loadi             (0);
} // logical_not_399_true:
                                             if_400_end: {
                                             if_400_next: {
                        if(equals())      break if_400_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_relational_expression_end;
                                                            //     }
                                                            // 
                                                            //     syntax_relational_expression_sequence();
} // if_400_next:
} // if_400_end:
                        movebp            (8);
                        syntax_relational_expression_sequence(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_relational_expression_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // equality-operator
                                                            // //            one-of == !=
                                                            // //
                                                            // syntax_equality_operator(char s[]) {
} // syntax_relational_expression_end:
return;    }
function syntax_equality_operator
(){
                                             syntax_equality_operator_end: {
                                                            // 
                                                            //     return contains(" == != ", s);
                        loadi             (3400);
                        store             (1+BP);
                        load              (0+BP);
                        store             (2+BP);
                        load              (2+BP);
                        store             (11+BP);
                        load              (1+BP);
                        store             (10+BP);
                        movebp            (10);
                        contains();       
                        movebp            (-10);
                        if(always())      break syntax_equality_operator_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // equality-expression-sequence
                                                            // //            equality-operator-operator relational-expression equality-expression-sequence
                                                            // //            equality-operator-operator relational-expression
                                                            // //
                                                            // syntax_equality_expression_sequence() {
} // syntax_equality_operator_end:
return;    }
function syntax_equality_expression_sequence
(){
                                             syntax_equality_expression_sequence_end: {
                                                            //     int cookie;
                                                            //     char operator_text[Str_size];
                                                            // 
                                                            //     if (! (token_type_is(Token_t_symbol) && syntax_equality_operator(token_text)) ) {
                        loadi             (5);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_401_true: {
                                             logical_and_401_false: {
                        if(equals())      break logical_and_401_false;
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        syntax_equality_operator(); 
                        movebp            (-266);
                        if(equals())      break logical_and_401_false;
                        loadi             (1);
                        if(always())      break logical_and_401_true;
} // logical_and_401_false:
                        loadi             (0);
} // logical_and_401_true:
                                             logical_not_402_true: {
                                             logical_not_402_false: {
                        if(notequals())   break logical_not_402_false;
                        loadi             (1);
                        if(always())      break logical_not_402_true;
} // logical_not_402_false:
                        loadi             (0);
} // logical_not_402_true:
                                             if_403_end: {
                                             if_403_next: {
                        if(equals())      break if_403_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_equality_expression_sequence_end;
                                                            //     }
                                                            // 
                                                            //     copy(operator_text, token_text);
} // if_403_next:
} // if_403_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //     token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //     cookie = compiler_relational_or_equality_expression_sequence_begin(); // >>>>>>>>>>
                        movebp            (265);
                        compiler_relational_or_equality_expression_sequence_begin(); 
                        movebp            (-265);
                        store             (0+BP);
                                                            // 
                                                            //     if (! syntax_relational_expression()) {
                        movebp            (265);
                        syntax_relational_expression(); 
                        movebp            (-265);
                                             logical_not_404_true: {
                                             logical_not_404_false: {
                        if(notequals())   break logical_not_404_false;
                        loadi             (1);
                        if(always())      break logical_not_404_true;
} // logical_not_404_false:
                        loadi             (0);
} // logical_not_404_true:
                                             if_405_end: {
                                             if_405_next: {
                        if(equals())      break if_405_next;
                                                            //         error_syntax("expression expected right of equality operator");
                        loadi             (3408);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //     }
                                                            // 
                                                            //     compiler_relational_or_equality_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
} // if_405_next:
} // if_405_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (0+BP);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        compiler_relational_or_equality_expression_sequence_end(); 
                        movebp            (-267);
                                                            // 
                                                            //     syntax_equality_expression_sequence();
                        movebp            (265);
                        syntax_equality_expression_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_equality_expression_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // equality-expression
                                                            // //            relational-expression equality-expression-sequence
                                                            // //            relational-expression
                                                            // //
                                                            // syntax_equality_expression() {
} // syntax_equality_expression_sequence_end:
return;    }
function syntax_equality_expression
(){
                                             syntax_equality_expression_end: {
                                                            // 
                                                            //     if (! syntax_relational_expression() ) {
                        movebp            (8);
                        syntax_relational_expression(); 
                        movebp            (-8);
                                             logical_not_406_true: {
                                             logical_not_406_false: {
                        if(notequals())   break logical_not_406_false;
                        loadi             (1);
                        if(always())      break logical_not_406_true;
} // logical_not_406_false:
                        loadi             (0);
} // logical_not_406_true:
                                             if_407_end: {
                                             if_407_next: {
                        if(equals())      break if_407_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_equality_expression_end;
                                                            //     }
                                                            // 
                                                            //     syntax_equality_expression_sequence();
} // if_407_next:
} // if_407_end:
                        movebp            (8);
                        syntax_equality_expression_sequence(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_equality_expression_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // logical-and-switch-sequence
                                                            // //            && equality-expression logical-and-switch-sequence
                                                            // //            && equality-expression
                                                            // //
                                                            // //
                                                            // syntax_logical_and_switch_sequence(char cookie[]) {
} // syntax_equality_expression_end:
return;    }
function syntax_logical_and_switch_sequence
(){
                                             syntax_logical_and_switch_sequence_end: {
                                                            // 
                                                            //     if (! token_advance_if("&&")) {
                        loadi             (3455);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_408_true: {
                                             logical_not_408_false: {
                        if(notequals())   break logical_not_408_false;
                        loadi             (1);
                        if(always())      break logical_not_408_true;
} // logical_not_408_false:
                        loadi             (0);
} // logical_not_408_true:
                                             if_409_end: {
                                             if_409_next: {
                        if(equals())      break if_409_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_logical_and_switch_sequence_end;
                                                            //     }
                                                            // 
                                                            //     if (! syntax_equality_expression()) {
} // if_409_next:
} // if_409_end:
                        movebp            (8);
                        syntax_equality_expression(); 
                        movebp            (-8);
                                             logical_not_410_true: {
                                             logical_not_410_false: {
                        if(notequals())   break logical_not_410_false;
                        loadi             (1);
                        if(always())      break logical_not_410_true;
} // logical_not_410_false:
                        loadi             (0);
} // logical_not_410_true:
                                             if_411_end: {
                                             if_411_next: {
                        if(equals())      break if_411_next;
                                                            //         error_syntax("expression expected right of logical and");
                        loadi             (3458);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     compiler_logical_and_switch_sequence(cookie); // >>>>>>>>>>
} // if_411_next:
} // if_411_end:
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_logical_and_switch_sequence(); 
                        movebp            (-9);
                                                            // 
                                                            //     syntax_logical_and_switch_sequence(cookie);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        syntax_logical_and_switch_sequence(); 
                        movebp            (-9);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_logical_and_switch_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // logical-and-expression
                                                            // //            equality-expression logical-and-switch-sequence
                                                            // //            equality-expression
                                                            // //
                                                            // syntax_logical_and_expression() {
} // syntax_logical_and_switch_sequence_end:
return;    }
function syntax_logical_and_expression
(){
                                             syntax_logical_and_expression_end: {
                                                            //     char cookie[Str_size];
                                                            // 
                                                            //     if (! syntax_equality_expression() ) {
                        movebp            (264);
                        syntax_equality_expression(); 
                        movebp            (-264);
                                             logical_not_412_true: {
                                             logical_not_412_false: {
                        if(notequals())   break logical_not_412_false;
                        loadi             (1);
                        if(always())      break logical_not_412_true;
} // logical_not_412_false:
                        loadi             (0);
} // logical_not_412_true:
                                             if_413_end: {
                                             if_413_next: {
                        if(equals())      break if_413_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_logical_and_expression_end;
                                                            //     }
                                                            //     
                                                            //     if (token_text_is("&&")) {
} // if_413_next:
} // if_413_end:
                        loadi             (3499);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_text_is();  
                        movebp            (-265);
                                             if_414_end: {
                                             if_414_next: {
                        if(equals())      break if_414_next;
                                                            //         compiler_logical_and_expression_begin(cookie); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_logical_and_expression_begin(); 
                        movebp            (-265);
                                                            // 
                                                            //         syntax_logical_and_switch_sequence(cookie);
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        syntax_logical_and_switch_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //         compiler_logical_and_expression_end(cookie); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_logical_and_expression_end(); 
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_414_next:
} // if_414_end:
                        loadi             (1);
                        if(always())      break syntax_logical_and_expression_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // logical-or-switch-sequence
                                                            // //            || logical-and-expression logical-or-switch-sequence
                                                            // //            || logical-and-expression
                                                            // //
                                                            // syntax_logical_or_switch_sequence(char cookie[]) {
} // syntax_logical_and_expression_end:
return;    }
function syntax_logical_or_switch_sequence
(){
                                             syntax_logical_or_switch_sequence_end: {
                                                            // 
                                                            //     if (! token_advance_if("||")) {
                        loadi             (3502);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_415_true: {
                                             logical_not_415_false: {
                        if(notequals())   break logical_not_415_false;
                        loadi             (1);
                        if(always())      break logical_not_415_true;
} // logical_not_415_false:
                        loadi             (0);
} // logical_not_415_true:
                                             if_416_end: {
                                             if_416_next: {
                        if(equals())      break if_416_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_logical_or_switch_sequence_end;
                                                            //     }
                                                            // 
                                                            //     if (! syntax_logical_and_expression()) {
} // if_416_next:
} // if_416_end:
                        movebp            (8);
                        syntax_logical_and_expression(); 
                        movebp            (-8);
                                             logical_not_417_true: {
                                             logical_not_417_false: {
                        if(notequals())   break logical_not_417_false;
                        loadi             (1);
                        if(always())      break logical_not_417_true;
} // logical_not_417_false:
                        loadi             (0);
} // logical_not_417_true:
                                             if_418_end: {
                                             if_418_next: {
                        if(equals())      break if_418_next;
                                                            //         error_syntax("expression expected right of logical-or operator");
                        loadi             (3505);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     compiler_logical_or_switch_sequence(cookie); // >>>>>>>>>>
} // if_418_next:
} // if_418_end:
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        compiler_logical_or_switch_sequence(); 
                        movebp            (-9);
                                                            // 
                                                            //     syntax_logical_or_switch_sequence(cookie);
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        syntax_logical_or_switch_sequence(); 
                        movebp            (-9);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_logical_or_switch_sequence_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // logical-or-expression
                                                            // //            logical-and-expression logical-or-switch-sequence
                                                            // //            logical-and-expression
                                                            // //
                                                            // syntax_logical_or_expression() {
} // syntax_logical_or_switch_sequence_end:
return;    }
function syntax_logical_or_expression
(){
                                             syntax_logical_or_expression_end: {
                                                            //     char cookie[Str_size];
                                                            //  
                                                            //     if (! syntax_logical_and_expression()) {
                        movebp            (264);
                        syntax_logical_and_expression(); 
                        movebp            (-264);
                                             logical_not_419_true: {
                                             logical_not_419_false: {
                        if(notequals())   break logical_not_419_false;
                        loadi             (1);
                        if(always())      break logical_not_419_true;
} // logical_not_419_false:
                        loadi             (0);
} // logical_not_419_true:
                                             if_420_end: {
                                             if_420_next: {
                        if(equals())      break if_420_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_logical_or_expression_end;
                                                            //     }
                                                            //     
                                                            //     if (token_text_is("||")) {
} // if_420_next:
} // if_420_end:
                        loadi             (3554);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_text_is();  
                        movebp            (-265);
                                             if_421_end: {
                                             if_421_next: {
                        if(equals())      break if_421_next;
                                                            //         compiler_logical_or_expression_begin(cookie); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_logical_or_expression_begin(); 
                        movebp            (-265);
                                                            // 
                                                            //         syntax_logical_or_switch_sequence(cookie);
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        syntax_logical_or_switch_sequence(); 
                        movebp            (-265);
                                                            // 
                                                            //         compiler_logical_or_expression_end(cookie); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_logical_or_expression_end(); 
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_421_next:
} // if_421_end:
                        loadi             (1);
                        if(always())      break syntax_logical_or_expression_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // expression
                                                            // //            logical-or-expression
                                                            // //
                                                            // syntax_expression() {
} // syntax_logical_or_expression_end:
return;    }
function syntax_expression
(){
                                             syntax_expression_end: {
                                                            // 
                                                            //     return syntax_logical_or_expression();
                        movebp            (8);
                        syntax_logical_or_expression(); 
                        movebp            (-8);
                        if(always())      break syntax_expression_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-call-statement
                                                            // //            built-in-function
                                                            // //            identifier ( function-call-argument-list )
                                                            // //
                                                            // syntax_function_call_statement() {
} // syntax_expression_end:
return;    }
function syntax_function_call_statement
(){
                                             syntax_function_call_statement_end: {
                                                            //     char cookie[Str_size];
                                                            //     char function_name[Str_size];
                                                            //     int function_argument_count[1];
                                                            // 
                                                            //     if (syntax_built_in_function()) {
                        movebp            (521);
                        syntax_built_in_function(); 
                        movebp            (-521);
                                             if_422_end: {
                                             if_422_next: {
                        if(equals())      break if_422_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_function_call_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (! (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) ) {
} // if_422_next:
} // if_422_end:
                        loadi             (4);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_type_is();  
                        movebp            (-522);
                                             logical_and_423_true: {
                                             logical_and_423_false: {
                        if(equals())      break logical_and_423_false;
                        loadi             (3557);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_lookahead_text_is(); 
                        movebp            (-522);
                        if(equals())      break logical_and_423_false;
                        loadi             (1);
                        if(always())      break logical_and_423_true;
} // logical_and_423_false:
                        loadi             (0);
} // logical_and_423_true:
                                             logical_not_424_true: {
                                             logical_not_424_false: {
                        if(notequals())   break logical_not_424_false;
                        loadi             (1);
                        if(always())      break logical_not_424_true;
} // logical_not_424_false:
                        loadi             (0);
} // logical_not_424_true:
                                             if_425_end: {
                                             if_425_next: {
                        if(equals())      break if_425_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_call_statement_end;
                                                            //     }
                                                            // 
                                                            //     copy(function_name, token_text);
} // if_425_next:
} // if_425_end:
                        loadi             (256+BP);
                        store             (513+BP);
                        loadi             (-1049611+global);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        copy();           
                        movebp            (-523);
                                                            // 
                                                            //     token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            //     token_advance();
                        movebp            (521);
                        token_advance();  
                        movebp            (-521);
                                                            // 
                                                            //     compiler_function_call_prepare(function_name, cookie); // >>>>>>>>>>
                        loadi             (256+BP);
                        store             (513+BP);
                        loadi             (0+BP);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        compiler_function_call_prepare(); 
                        movebp            (-523);
                                                            // 
                                                            //     syntax_function_call_argument_list(0, function_argument_count);
                        loadi             (0);
                        store             (513+BP);
                        loadi             (512+BP);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        syntax_function_call_argument_list(); 
                        movebp            (-523);
                                                            // 
                                                            //     compiler_function_call_execute(cookie, function_argument_count[0]); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (513+BP);
                        loadi             (0);
                        loadx             ();
                        load              (512+BP+X);
                        store             (514+BP);
                        load              (514+BP);
                        store             (524+BP);
                        load              (513+BP);
                        store             (523+BP);
                        movebp            (523);
                        compiler_function_call_execute(); 
                        movebp            (-523);
                                                            //                 
                                                            //     if (! token_advance_if(")") ) {
                        loadi             (3559);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        token_advance_if(); 
                        movebp            (-522);
                                             logical_not_426_true: {
                                             logical_not_426_false: {
                        if(notequals())   break logical_not_426_false;
                        loadi             (1);
                        if(always())      break logical_not_426_true;
} // logical_not_426_false:
                        loadi             (0);
} // logical_not_426_true:
                                             if_427_end: {
                                             if_427_next: {
                        if(equals())      break if_427_next;
                                                            //         error_syntax("closing parenthesis expected after function call");
                        loadi             (3561);
                        store             (513+BP);
                        load              (513+BP);
                        store             (522+BP);
                        movebp            (522);
                        error_syntax();   
                        movebp            (-522);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_427_next:
} // if_427_end:
                        loadi             (1);
                        if(always())      break syntax_function_call_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // return-statement
                                                            // //            return expression
                                                            // //            return
                                                            // //
                                                            // syntax_return_statement() {
} // syntax_function_call_statement_end:
return;    }
function syntax_return_statement
(){
                                             syntax_return_statement_end: {
                                                            //  
                                                            //     if (! token_advance_if("return")) {
                        loadi             (3610);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_428_true: {
                                             logical_not_428_false: {
                        if(notequals())   break logical_not_428_false;
                        loadi             (1);
                        if(always())      break logical_not_428_true;
} // logical_not_428_false:
                        loadi             (0);
} // logical_not_428_true:
                                             if_429_end: {
                                             if_429_next: {
                        if(equals())      break if_429_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_return_statement_end;
                                                            //     }
                                                            // 
                                                            //     syntax_expression();
} // if_429_next:
} // if_429_end:
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                                                            // 
                                                            //     compiler_return_statement(); // >>>>>>>>>>
                        movebp            (8);
                        compiler_return_statement(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_return_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // expression-statement
                                                            // //           expression
                                                            // //
                                                            // syntax_expression_statement() {
} // syntax_return_statement_end:
return;    }
function syntax_expression_statement
(){
                                             syntax_expression_statement_end: {
                                                            // 
                                                            //     return syntax_expression();
                        movebp            (8);
                        syntax_expression(); 
                        movebp            (-8);
                        if(always())      break syntax_expression_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // assignment-statement
                                                            // //            identifier = expression
                                                            // //            identifier [ expression ] = expression
                                                            // //            
                                                            // syntax_assignment_statement() {
} // syntax_expression_statement_end:
return;    }
function syntax_assignment_statement
(){
                                             syntax_assignment_statement_end: {
                                                            //     int cookie[1];
                                                            //     char variable_name[Str_size];
                                                            // 
                                                            //     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("=")) {
                        loadi             (4);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_430_true: {
                                             logical_and_430_false: {
                        if(equals())      break logical_and_430_false;
                        loadi             (3617);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_lookahead_text_is(); 
                        movebp            (-266);
                        if(equals())      break logical_and_430_false;
                        loadi             (1);
                        if(always())      break logical_and_430_true;
} // logical_and_430_false:
                        loadi             (0);
} // logical_and_430_true:
                                             if_431_end: {
                                             if_431_next: {
                        if(equals())      break if_431_next;
                                                            //         copy(variable_name, token_text);
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //         token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            //         token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            //    
                                                            //         if (! syntax_expression()) {
                        movebp            (265);
                        syntax_expression(); 
                        movebp            (-265);
                                             logical_not_432_true: {
                                             logical_not_432_false: {
                        if(notequals())   break logical_not_432_false;
                        loadi             (1);
                        if(always())      break logical_not_432_true;
} // logical_not_432_false:
                        loadi             (0);
} // logical_not_432_true:
                                             if_433_end: {
                                             if_433_next: {
                        if(equals())      break if_433_next;
                                                            //             error_syntax("expression expected after equal sign");
                        loadi             (3619);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            // 
                                                            //         compiler_assignment_statement(variable_name); // >>>>>>>>>>
} // if_433_next:
} // if_433_end:
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_assignment_statement(); 
                        movebp            (-266);
                                                            // 
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("[")) {
} // if_431_next:
} // if_431_end:
                        loadi             (4);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_and_434_true: {
                                             logical_and_434_false: {
                        if(equals())      break logical_and_434_false;
                        loadi             (3656);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_lookahead_text_is(); 
                        movebp            (-266);
                        if(equals())      break logical_and_434_false;
                        loadi             (1);
                        if(always())      break logical_and_434_true;
} // logical_and_434_false:
                        loadi             (0);
} // logical_and_434_true:
                                             if_435_end: {
                                             if_435_next: {
                        if(equals())      break if_435_next;
                                                            //         copy(variable_name, token_text);
                        loadi             (1+BP);
                        store             (257+BP);
                        loadi             (-1049611+global);
                        store             (258+BP);
                        load              (258+BP);
                        store             (268+BP);
                        load              (257+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //         token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            //         token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //         if (! syntax_expression()) {
                        movebp            (265);
                        syntax_expression(); 
                        movebp            (-265);
                                             logical_not_436_true: {
                                             logical_not_436_false: {
                        if(notequals())   break logical_not_436_false;
                        loadi             (1);
                        if(always())      break logical_not_436_true;
} // logical_not_436_false:
                        loadi             (0);
} // logical_not_436_true:
                                             if_437_end: {
                                             if_437_next: {
                        if(equals())      break if_437_next;
                                                            //             error_syntax("expression expected within array index");
                        loadi             (3658);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if("]")) {
} // if_437_next:
} // if_437_end:
                        loadi             (3697);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_advance_if(); 
                        movebp            (-266);
                                             logical_not_438_true: {
                                             logical_not_438_false: {
                        if(notequals())   break logical_not_438_false;
                        loadi             (1);
                        if(always())      break logical_not_438_true;
} // logical_not_438_false:
                        loadi             (0);
} // logical_not_438_true:
                                             if_439_end: {
                                             if_439_next: {
                        if(equals())      break if_439_next;
                                                            //             error_syntax("closing bracket expected after array index");
                        loadi             (3699);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            //             
                                                            //         if (! token_advance_if("=")) {
} // if_439_next:
} // if_439_end:
                        loadi             (3742);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_advance_if(); 
                        movebp            (-266);
                                             logical_not_440_true: {
                                             logical_not_440_false: {
                        if(notequals())   break logical_not_440_false;
                        loadi             (1);
                        if(always())      break logical_not_440_true;
} // logical_not_440_false:
                        loadi             (0);
} // logical_not_440_true:
                                             if_441_end: {
                                             if_441_next: {
                        if(equals())      break if_441_next;
                                                            //             error_syntax("equal sign expected after array index");
                        loadi             (3744);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            // 
                                                            //         compiler_assignment_statement_array_begin(cookie); // >>>>>>>>>>
} // if_441_next:
} // if_441_end:
                        loadi             (0+BP);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_assignment_statement_array_begin(); 
                        movebp            (-266);
                                                            //    
                                                            //         if (! syntax_expression()) {
                        movebp            (265);
                        syntax_expression(); 
                        movebp            (-265);
                                             logical_not_442_true: {
                                             logical_not_442_false: {
                        if(notequals())   break logical_not_442_false;
                        loadi             (1);
                        if(always())      break logical_not_442_true;
} // logical_not_442_false:
                        loadi             (0);
} // logical_not_442_true:
                                             if_443_end: {
                                             if_443_next: {
                        if(equals())      break if_443_next;
                                                            //             error_syntax("expression expected after equal sign");
                        loadi             (3782);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            // 
                                                            //         compiler_assignment_statement_array_end(cookie); // >>>>>>>>>>
} // if_443_next:
} // if_443_end:
                        loadi             (0+BP);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_assignment_statement_array_end(); 
                        movebp            (-266);
                                                            //         compiler_assignment_statement(variable_name); // >>>>>>>>>>
                        loadi             (1+BP);
                        store             (257+BP);
                        load              (257+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_assignment_statement(); 
                        movebp            (-266);
                                                            // 
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_assignment_statement_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_435_next:
} // if_435_end:
                        loadi             (0);
                        if(always())      break syntax_assignment_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // while-statement
                                                            // //            while ( expression ) statement
                                                            // //
                                                            // syntax_while_statement() {
} // syntax_assignment_statement_end:
return;    }
function syntax_while_statement
(){
                                             syntax_while_statement_end: {
                                                            //     char cookie[Str_size];
                                                            // 
                                                            //     if (! token_advance_if("while") ) {
                        loadi             (3819);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_444_true: {
                                             logical_not_444_false: {
                        if(notequals())   break logical_not_444_false;
                        loadi             (1);
                        if(always())      break logical_not_444_true;
} // logical_not_444_false:
                        loadi             (0);
} // logical_not_444_true:
                                             if_445_end: {
                                             if_445_next: {
                        if(equals())      break if_445_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_while_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (! token_advance_if("(") ) {
} // if_445_next:
} // if_445_end:
                        loadi             (3825);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_446_true: {
                                             logical_not_446_false: {
                        if(notequals())   break logical_not_446_false;
                        loadi             (1);
                        if(always())      break logical_not_446_true;
} // logical_not_446_false:
                        loadi             (0);
} // logical_not_446_true:
                                             if_447_end: {
                                             if_447_next: {
                        if(equals())      break if_447_next;
                                                            //         error_syntax("opening parenthesis expected after while keyword");
                        loadi             (3827);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_while_statement_begin(cookie); // >>>>>>>>>>
} // if_447_next:
} // if_447_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_while_statement_begin(); 
                        movebp            (-265);
                                                            // 
                                                            //     if (! syntax_expression()) {
                        movebp            (264);
                        syntax_expression(); 
                        movebp            (-264);
                                             logical_not_448_true: {
                                             logical_not_448_false: {
                        if(notequals())   break logical_not_448_false;
                        loadi             (1);
                        if(always())      break logical_not_448_true;
} // logical_not_448_false:
                        loadi             (0);
} // logical_not_448_true:
                                             if_449_end: {
                                             if_449_next: {
                        if(equals())      break if_449_next;
                                                            //         error_syntax("expression expected in while statement");
                        loadi             (3876);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_while_statement_test(cookie); // >>>>>>>>>>
} // if_449_next:
} // if_449_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_while_statement_test(); 
                        movebp            (-265);
                                                            // 
                                                            //     if (! token_advance_if(")") ) {
                        loadi             (3915);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_450_true: {
                                             logical_not_450_false: {
                        if(notequals())   break logical_not_450_false;
                        loadi             (1);
                        if(always())      break logical_not_450_true;
} // logical_not_450_false:
                        loadi             (0);
} // logical_not_450_true:
                                             if_451_end: {
                                             if_451_next: {
                        if(equals())      break if_451_next;
                                                            //         error_syntax("closing parenthesis expected after while statement");
                        loadi             (3917);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     if (! syntax_statement() ) {
} // if_451_next:
} // if_451_end:
                        movebp            (264);
                        syntax_statement(); 
                        movebp            (-264);
                                             logical_not_452_true: {
                                             logical_not_452_false: {
                        if(notequals())   break logical_not_452_false;
                        loadi             (1);
                        if(always())      break logical_not_452_true;
} // logical_not_452_false:
                        loadi             (0);
} // logical_not_452_true:
                                             if_453_end: {
                                             if_453_next: {
                        if(equals())      break if_453_next;
                                                            //         error_syntax("statement expected after while");
                        loadi             (3968);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_while_statement_end(cookie); // >>>>>>>>>>
} // if_453_next:
} // if_453_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_while_statement_end(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_while_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // if-statement
                                                            // //            if ( expression ) statement else statement
                                                            // //            if ( expression ) statement
                                                            // //
                                                            // syntax_if_statement() {
} // syntax_while_statement_end:
return;    }
function syntax_if_statement
(){
                                             syntax_if_statement_end: {
                                                            //     char cookie[Str_size];
                                                            // 
                                                            //     if (! token_advance_if("if") ) {
                        loadi             (3999);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_454_true: {
                                             logical_not_454_false: {
                        if(notequals())   break logical_not_454_false;
                        loadi             (1);
                        if(always())      break logical_not_454_true;
} // logical_not_454_false:
                        loadi             (0);
} // logical_not_454_true:
                                             if_455_end: {
                                             if_455_next: {
                        if(equals())      break if_455_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_if_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (! token_advance_if("(") ) {
} // if_455_next:
} // if_455_end:
                        loadi             (4002);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_456_true: {
                                             logical_not_456_false: {
                        if(notequals())   break logical_not_456_false;
                        loadi             (1);
                        if(always())      break logical_not_456_true;
} // logical_not_456_false:
                        loadi             (0);
} // logical_not_456_true:
                                             if_457_end: {
                                             if_457_next: {
                        if(equals())      break if_457_next;
                                                            //         error_syntax("opening parenthesis expected after if keyword");
                        loadi             (4004);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     if (! syntax_expression()) {
} // if_457_next:
} // if_457_end:
                        movebp            (264);
                        syntax_expression(); 
                        movebp            (-264);
                                             logical_not_458_true: {
                                             logical_not_458_false: {
                        if(notequals())   break logical_not_458_false;
                        loadi             (1);
                        if(always())      break logical_not_458_true;
} // logical_not_458_false:
                        loadi             (0);
} // logical_not_458_true:
                                             if_459_end: {
                                             if_459_next: {
                        if(equals())      break if_459_next;
                                                            //         error_syntax("expression expected in if statement");
                        loadi             (4050);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     if (! token_advance_if(")") ) {
} // if_459_next:
} // if_459_end:
                        loadi             (4086);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_460_true: {
                                             logical_not_460_false: {
                        if(notequals())   break logical_not_460_false;
                        loadi             (1);
                        if(always())      break logical_not_460_true;
} // logical_not_460_false:
                        loadi             (0);
} // logical_not_460_true:
                                             if_461_end: {
                                             if_461_next: {
                        if(equals())      break if_461_next;
                                                            //         error_syntax("closing parenthesis expected after if statement");
                        loadi             (4088);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_if_statement_test_fn(cookie); // >>>>>>>>>>
} // if_461_next:
} // if_461_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_if_statement_test_fn(); 
                        movebp            (-265);
                                                            // 
                                                            //     if (! syntax_statement() ) {
                        movebp            (264);
                        syntax_statement(); 
                        movebp            (-264);
                                             logical_not_462_true: {
                                             logical_not_462_false: {
                        if(notequals())   break logical_not_462_false;
                        loadi             (1);
                        if(always())      break logical_not_462_true;
} // logical_not_462_false:
                        loadi             (0);
} // logical_not_462_true:
                                             if_463_end: {
                                             if_463_next: {
                        if(equals())      break if_463_next;
                                                            //         error_syntax("statement expected after if");
                        loadi             (4136);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     if (! token_advance_if("else") ) {
} // if_463_next:
} // if_463_end:
                        loadi             (4164);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_464_true: {
                                             logical_not_464_false: {
                        if(notequals())   break logical_not_464_false;
                        loadi             (1);
                        if(always())      break logical_not_464_true;
} // logical_not_464_false:
                        loadi             (0);
} // logical_not_464_true:
                                             if_465_end: {
                                             if_465_next: {
                        if(equals())      break if_465_next;
                                                            //          compiler_if_statement_no_else_fn(cookie); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_if_statement_no_else_fn(); 
                        movebp            (-265);
                                                            //          return True;
                        loadi             (1);
                        if(always())      break syntax_if_statement_end;
                                                            //     }
                                                            // 
                                                            //     compiler_if_statement_else_fn(cookie); // >>>>>>>>>>
} // if_465_next:
} // if_465_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_if_statement_else_fn(); 
                        movebp            (-265);
                                                            // 
                                                            //     if (! syntax_statement() ) {
                        movebp            (264);
                        syntax_statement(); 
                        movebp            (-264);
                                             logical_not_466_true: {
                                             logical_not_466_false: {
                        if(notequals())   break logical_not_466_false;
                        loadi             (1);
                        if(always())      break logical_not_466_true;
} // logical_not_466_false:
                        loadi             (0);
} // logical_not_466_true:
                                             if_467_end: {
                                             if_467_next: {
                        if(equals())      break if_467_next;
                                                            //         error_syntax("statement expected after else");
                        loadi             (4169);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_if_statement_else_end_fn(cookie); // >>>>>>>>>>
} // if_467_next:
} // if_467_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_if_statement_else_end_fn(); 
                        movebp            (-265);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_if_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // enumerator
                                                            // //            identifier = integer-constant
                                                            // //            identifier
                                                            // //
                                                            // syntax_enumerator() {
} // syntax_if_statement_end:
return;    }
function syntax_enumerator
(){
                                             syntax_enumerator_end: {
                                                            //     char constant_name[Str_size];
                                                            // 
                                                            //     if (! token_type_is(Token_t_identifier) ) {
                        loadi             (4);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_type_is();  
                        movebp            (-265);
                                             logical_not_468_true: {
                                             logical_not_468_false: {
                        if(notequals())   break logical_not_468_false;
                        loadi             (1);
                        if(always())      break logical_not_468_true;
} // logical_not_468_false:
                        loadi             (0);
} // logical_not_468_true:
                                             if_469_end: {
                                             if_469_next: {
                        if(equals())      break if_469_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_enumerator_end;
                                                            //     }
                                                            //     
                                                            //     copy(constant_name, token_text);
} // if_469_next:
} // if_469_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            // 
                                                            //     if (token_text_is("=")) {
                        loadi             (4199);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_text_is();  
                        movebp            (-265);
                                             if_470_end: {
                                             if_470_next: {
                        if(equals())      break if_470_next;
                                                            //         token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            // 
                                                            //         if (! token_type_is(Token_t_integer_constant) ) {
                        loadi             (2);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_type_is();  
                        movebp            (-265);
                                             logical_not_471_true: {
                                             logical_not_471_false: {
                        if(notequals())   break logical_not_471_false;
                        loadi             (1);
                        if(always())      break logical_not_471_true;
} // logical_not_471_false:
                        loadi             (0);
} // logical_not_471_true:
                                             if_472_end: {
                                             if_472_next: {
                        if(equals())      break if_472_next;
                                                            //             error_syntax("integer constant expected after equal sign in enum declaration");
                        loadi             (4201);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //         }
                                                            // 
                                                            //         compiler_enumerator_assigned_value(constant_name, token_text); // >>>>>>>>>>
} // if_472_next:
} // if_472_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        compiler_enumerator_assigned_value(); 
                        movebp            (-266);
                                                            //         token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_enumerator_end;
                                                            //     }
                                                            // 
                                                            //     compiler_enumerator(constant_name); // >>>>>>>>>>
} // if_470_next:
} // if_470_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_enumerator(); 
                        movebp            (-265);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_enumerator_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // enumerator-list
                                                            // //            enumerator , enumerator-list
                                                            // //            enumerator
                                                            // //            
                                                            // syntax_enumerator_list() {
} // syntax_enumerator_end:
return;    }
function syntax_enumerator_list
(){
                                             syntax_enumerator_list_end: {
                                                            //     if (! syntax_enumerator() ) {
                        movebp            (8);
                        syntax_enumerator(); 
                        movebp            (-8);
                                             logical_not_473_true: {
                                             logical_not_473_false: {
                        if(notequals())   break logical_not_473_false;
                        loadi             (1);
                        if(always())      break logical_not_473_true;
} // logical_not_473_false:
                        loadi             (0);
} // logical_not_473_true:
                                             if_474_end: {
                                             if_474_next: {
                        if(equals())      break if_474_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_enumerator_list_end;
                                                            //     }
                                                            // 
                                                            //     if (token_advance_if(",")) {
} // if_474_next:
} // if_474_end:
                        loadi             (4264);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             if_475_end: {
                                             if_475_next: {
                        if(equals())      break if_475_next;
                                                            // 
                                                            //         if (! syntax_enumerator_list() ) {
                        movebp            (8);
                        syntax_enumerator_list(); 
                        movebp            (-8);
                                             logical_not_476_true: {
                                             logical_not_476_false: {
                        if(notequals())   break logical_not_476_false;
                        loadi             (1);
                        if(always())      break logical_not_476_true;
} // logical_not_476_false:
                        loadi             (0);
} // logical_not_476_true:
                                             if_477_end: {
                                             if_477_next: {
                        if(equals())      break if_477_next;
                                                            //             error_syntax("identifier expected after comma in enum declaration");
                        loadi             (4266);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            //     }
} // if_477_next:
} // if_477_end:
                                                            // 
                                                            //     compiler_enumerator_list_end(); // >>>>>>>>>>
} // if_475_next:
} // if_475_end:
                        movebp            (8);
                        compiler_enumerator_list_end(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_enumerator_list_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // type-specifier
                                                            // //            int
                                                            // //            char
                                                            // //
                                                            // syntax_type_specifier() {
} // syntax_enumerator_list_end:
return;    }
function syntax_type_specifier
(){
                                             syntax_type_specifier_end: {
                                                            // 
                                                            //     if (token_text_is("int") || token_text_is("char")) {
                        loadi             (4318);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_text_is();  
                        movebp            (-9);
                                             logical_or_478_false: {
                                             logical_or_478_true: {
                        if(notequals())   break logical_or_478_true;
                        loadi             (4322);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_text_is();  
                        movebp            (-9);
                        if(notequals())   break logical_or_478_true;
                        loadi             (0);
                        if(always())      break logical_or_478_false;
} // logical_or_478_true:
                        loadi             (1);
} // logical_or_478_false:
                                             if_479_end: {
                                             if_479_next: {
                        if(equals())      break if_479_next;
                                                            //         token_advance();
                        movebp            (8);
                        token_advance();  
                        movebp            (-8);
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_type_specifier_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_479_next:
} // if_479_end:
                        loadi             (0);
                        if(always())      break syntax_type_specifier_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // declaration
                                                            // //            type-specifier identifier ;
                                                            // //            type-specifier identifier [ integer-constant ] ;
                                                            // //            type-specifier identifier [ identifier ] ;
                                                            // //            enum { enumerator-list } ;
                                                            // //
                                                            // syntax_declaration() {
} // syntax_type_specifier_end:
return;    }
function syntax_declaration
(){
                                             syntax_declaration_end: {
                                                            //     char variable_name[Str_size];
                                                            //     char array_length[Str_size];
                                                            // 
                                                            //     if (syntax_type_specifier()) {
                        movebp            (520);
                        syntax_type_specifier(); 
                        movebp            (-520);
                                             if_480_end: {
                                             if_480_next: {
                        if(equals())      break if_480_next;
                                                            //     
                                                            //         if (! token_type_is(Token_t_identifier)) {
                        loadi             (4);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_type_is();  
                        movebp            (-521);
                                             logical_not_481_true: {
                                             logical_not_481_false: {
                        if(notequals())   break logical_not_481_false;
                        loadi             (1);
                        if(always())      break logical_not_481_true;
} // logical_not_481_false:
                        loadi             (0);
} // logical_not_481_true:
                                             if_482_end: {
                                             if_482_next: {
                        if(equals())      break if_482_next;
                                                            //             error_syntax("identifier expected after type specifier in declaration");
                        loadi             (4327);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         copy(variable_name, token_text);
} // if_482_next:
} // if_482_end:
                        loadi             (0+BP);
                        store             (512+BP);
                        loadi             (-1049611+global);
                        store             (513+BP);
                        load              (513+BP);
                        store             (523+BP);
                        load              (512+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            //         token_advance();
                        movebp            (520);
                        token_advance();  
                        movebp            (-520);
                                                            // 
                                                            //         // simple type declaration -------------------------------------------
                                                            //         if (! token_text_is("[")) {
                        loadi             (4383);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_text_is();  
                        movebp            (-521);
                                             logical_not_483_true: {
                                             logical_not_483_false: {
                        if(notequals())   break logical_not_483_false;
                        loadi             (1);
                        if(always())      break logical_not_483_true;
} // logical_not_483_false:
                        loadi             (0);
} // logical_not_483_true:
                                             if_484_end: {
                                             if_484_next: {
                        if(equals())      break if_484_next;
                                                            //             compiler_declaration_integer(variable_name); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        compiler_declaration_integer(); 
                        movebp            (-521);
                                                            // 
                                                            //             if (! token_advance_if(";") ) {
                        loadi             (4385);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_485_true: {
                                             logical_not_485_false: {
                        if(notequals())   break logical_not_485_false;
                        loadi             (1);
                        if(always())      break logical_not_485_true;
} // logical_not_485_false:
                        loadi             (0);
} // logical_not_485_true:
                                             if_486_end: {
                                             if_486_next: {
                        if(equals())      break if_486_next;
                                                            //                 error_syntax("semicolon expected after declaration");
                        loadi             (4387);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //             }
                                                            // 
                                                            //             return True;
} // if_486_next:
} // if_486_end:
                        loadi             (1);
                        if(always())      break syntax_declaration_end;
                                                            //         }
                                                            // 
                                                            //         // array type declaration -------------------------------------------
                                                            //         copy(array_length, token_lookahead_text);
} // if_484_next:
} // if_484_end:
                        loadi             (256+BP);
                        store             (512+BP);
                        loadi             (-1049867+global);
                        store             (513+BP);
                        load              (513+BP);
                        store             (523+BP);
                        load              (512+BP);
                        store             (522+BP);
                        movebp            (522);
                        copy();           
                        movebp            (-522);
                                                            // 
                                                            //         if (token_lookahead_type_is(Token_t_integer_constant)) {
                        loadi             (2);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_lookahead_type_is(); 
                        movebp            (-521);
                                             if_487_end: {
                                             if_487_next: {
                        if(equals())      break if_487_next;
                                                            //             compiler_declaration_integer_array_constant_length_specifier(variable_name, array_length); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (512+BP);
                        loadi             (256+BP);
                        store             (513+BP);
                        load              (513+BP);
                        store             (523+BP);
                        load              (512+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_declaration_integer_array_constant_length_specifier(); 
                        movebp            (-522);
                                                            //         }
                                                            //         else if (token_lookahead_type_is(Token_t_identifier)) {
                        if(always())      break if_487_end;
} // if_487_next:
                        loadi             (4);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_lookahead_type_is(); 
                        movebp            (-521);
                                             if_488_end: {
                                             if_488_next: {
                        if(equals())      break if_488_next;
                                                            //             compiler_declaration_integer_array_identifier_length_specifier(variable_name, array_length); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (512+BP);
                        loadi             (256+BP);
                        store             (513+BP);
                        load              (513+BP);
                        store             (523+BP);
                        load              (512+BP);
                        store             (522+BP);
                        movebp            (522);
                        compiler_declaration_integer_array_identifier_length_specifier(); 
                        movebp            (-522);
                                                            //         }
                                                            //         else {
                        if(always())      break if_488_end;
} // if_488_next:
                                                            //             error_syntax("identifier or integer constant expected after opening bracket in array declaration");
                        loadi             (4424);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         token_advance();
} // if_488_end:
} // if_487_end:
                        movebp            (520);
                        token_advance();  
                        movebp            (-520);
                                                            //         token_advance();
                        movebp            (520);
                        token_advance();  
                        movebp            (-520);
                                                            // 
                                                            //         if (! token_advance_if("]") ) {
                        loadi             (4507);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_489_true: {
                                             logical_not_489_false: {
                        if(notequals())   break logical_not_489_false;
                        loadi             (1);
                        if(always())      break logical_not_489_true;
} // logical_not_489_false:
                        loadi             (0);
} // logical_not_489_true:
                                             if_490_end: {
                                             if_490_next: {
                        if(equals())      break if_490_next;
                                                            //             error_syntax("closing bracket expected in array declaration");
                        loadi             (4509);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         if (!token_advance_if(";")) {
} // if_490_next:
} // if_490_end:
                        loadi             (4555);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_491_true: {
                                             logical_not_491_false: {
                        if(notequals())   break logical_not_491_false;
                        loadi             (1);
                        if(always())      break logical_not_491_true;
} // logical_not_491_false:
                        loadi             (0);
} // logical_not_491_true:
                                             if_492_end: {
                                             if_492_next: {
                        if(equals())      break if_492_next;
                                                            //             error_syntax("semicolon expected after array declaration");
                        loadi             (4557);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         return True;
} // if_492_next:
} // if_492_end:
                        loadi             (1);
                        if(always())      break syntax_declaration_end;
                                                            // 
                                                            //     }
                                                            // 
                                                            //     // enum declaration ------------------------------------------------------
                                                            //     if (token_advance_if("enum")) {
} // if_480_next:
} // if_480_end:
                        loadi             (4600);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             if_493_end: {
                                             if_493_next: {
                        if(equals())      break if_493_next;
                                                            // 
                                                            //         if (! token_advance_if("{")) {
                        loadi             (4605);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_494_true: {
                                             logical_not_494_false: {
                        if(notequals())   break logical_not_494_false;
                        loadi             (1);
                        if(always())      break logical_not_494_true;
} // logical_not_494_false:
                        loadi             (0);
} // logical_not_494_true:
                                             if_495_end: {
                                             if_495_next: {
                        if(equals())      break if_495_next;
                                                            //             error_syntax("opening brace expected after enum keyword");
                        loadi             (4607);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         if (! syntax_enumerator_list() ) {
} // if_495_next:
} // if_495_end:
                        movebp            (520);
                        syntax_enumerator_list(); 
                        movebp            (-520);
                                             logical_not_496_true: {
                                             logical_not_496_false: {
                        if(notequals())   break logical_not_496_false;
                        loadi             (1);
                        if(always())      break logical_not_496_true;
} // logical_not_496_false:
                        loadi             (0);
} // logical_not_496_true:
                                             if_497_end: {
                                             if_497_next: {
                        if(equals())      break if_497_next;
                                                            //             error_syntax("enumerator list expected");
                        loadi             (4649);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if("}")) {
} // if_497_next:
} // if_497_end:
                        loadi             (4674);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_498_true: {
                                             logical_not_498_false: {
                        if(notequals())   break logical_not_498_false;
                        loadi             (1);
                        if(always())      break logical_not_498_true;
} // logical_not_498_false:
                        loadi             (0);
} // logical_not_498_true:
                                             if_499_end: {
                                             if_499_next: {
                        if(equals())      break if_499_next;
                                                            //             error_syntax("closing brace expected after enumerator list");
                        loadi             (4676);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         if (! token_advance_if(";")) {
} // if_499_next:
} // if_499_end:
                        loadi             (4721);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        token_advance_if(); 
                        movebp            (-521);
                                             logical_not_500_true: {
                                             logical_not_500_false: {
                        if(notequals())   break logical_not_500_false;
                        loadi             (1);
                        if(always())      break logical_not_500_true;
} // logical_not_500_false:
                        loadi             (0);
} // logical_not_500_true:
                                             if_501_end: {
                                             if_501_next: {
                        if(equals())      break if_501_next;
                                                            //             error_syntax("semicolon expected after enumerator declaration"); // ????
                        loadi             (4723);
                        store             (512+BP);
                        load              (512+BP);
                        store             (521+BP);
                        movebp            (521);
                        error_syntax();   
                        movebp            (-521);
                                                            //         }
                                                            // 
                                                            //         return True;
} // if_501_next:
} // if_501_end:
                        loadi             (1);
                        if(always())      break syntax_declaration_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_493_next:
} // if_493_end:
                        loadi             (0);
                        if(always())      break syntax_declaration_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // local-declaration-list
                                                            // //            declaration local-declaration-list
                                                            // //            declaration
                                                            // //
                                                            // syntax_local_declaration_list() {
} // syntax_declaration_end:
return;    }
function syntax_local_declaration_list
(){
                                             syntax_local_declaration_list_end: {
                                                            //     if (! syntax_declaration() ) {
                        movebp            (8);
                        syntax_declaration(); 
                        movebp            (-8);
                                             logical_not_502_true: {
                                             logical_not_502_false: {
                        if(notequals())   break logical_not_502_false;
                        loadi             (1);
                        if(always())      break logical_not_502_true;
} // logical_not_502_false:
                        loadi             (0);
} // logical_not_502_true:
                                             if_503_end: {
                                             if_503_next: {
                        if(equals())      break if_503_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_local_declaration_list_end;
                                                            //     }
                                                            // 
                                                            //     syntax_local_declaration_list();
} // if_503_next:
} // if_503_end:
                        movebp            (8);
                        syntax_local_declaration_list(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_local_declaration_list_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // compound-statement
                                                            // //            { statement-list } 
                                                            // //
                                                            // syntax_compound_statement() {
} // syntax_local_declaration_list_end:
return;    }
function syntax_compound_statement
(){
                                             syntax_compound_statement_end: {
                                                            // 
                                                            //     if (! token_advance_if("{") ) {
                        loadi             (4771);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_504_true: {
                                             logical_not_504_false: {
                        if(notequals())   break logical_not_504_false;
                        loadi             (1);
                        if(always())      break logical_not_504_true;
} // logical_not_504_false:
                        loadi             (0);
} // logical_not_504_true:
                                             if_505_end: {
                                             if_505_next: {
                        if(equals())      break if_505_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_compound_statement_end;
                                                            //     }
                                                            // 
                                                            //     syntax_statement_list();
} // if_505_next:
} // if_505_end:
                        movebp            (8);
                        syntax_statement_list(); 
                        movebp            (-8);
                                                            // 
                                                            //     if (! token_advance_if("}") ) {
                        loadi             (4773);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_506_true: {
                                             logical_not_506_false: {
                        if(notequals())   break logical_not_506_false;
                        loadi             (1);
                        if(always())      break logical_not_506_true;
} // logical_not_506_false:
                        loadi             (0);
} // logical_not_506_true:
                                             if_507_end: {
                                             if_507_next: {
                        if(equals())      break if_507_next;
                                                            //         error_syntax("closing brace expected at end of compound statement");
                        loadi             (4775);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_507_next:
} // if_507_end:
                        loadi             (1);
                        if(always())      break syntax_compound_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // statement
                                                            // //           if-statement
                                                            // //           while-statement
                                                            // //           compound-statement
                                                            // //           assignment-statement ;
                                                            // //           expression-statement ;
                                                            // //           return-statement ;
                                                            // //
                                                            // syntax_statement() {
} // syntax_compound_statement_end:
return;    }
function syntax_statement
(){
                                             syntax_statement_end: {
                                                            // 
                                                            //     compiler_output_source_as_comment(); // >>>>>>>>>>
                        movebp            (8);
                        compiler_output_source_as_comment(); 
                        movebp            (-8);
                                                            // 
                                                            //     if (syntax_if_statement() || 
                        movebp            (8);
                        syntax_if_statement(); 
                        movebp            (-8);
                                             logical_or_508_false: {
                                             logical_or_508_true: {
                        if(notequals())   break logical_or_508_true;
                        movebp            (8);
                        syntax_while_statement(); 
                        movebp            (-8);
                        if(notequals())   break logical_or_508_true;
                        movebp            (8);
                        syntax_compound_statement(); 
                        movebp            (-8);
                        if(notequals())   break logical_or_508_true;
                        loadi             (0);
                        if(always())      break logical_or_508_false;
} // logical_or_508_true:
                        loadi             (1);
} // logical_or_508_false:
                                             if_509_end: {
                                             if_509_next: {
                        if(equals())      break if_509_next;
                                                            //         syntax_while_statement() ||
                                                            //         syntax_compound_statement() ) {
                                                            // 
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_statement_end;
                                                            //     }
                                                            // 
                                                            //     if (syntax_assignment_statement() ||
} // if_509_next:
} // if_509_end:
                        movebp            (8);
                        syntax_assignment_statement(); 
                        movebp            (-8);
                                             logical_or_510_false: {
                                             logical_or_510_true: {
                        if(notequals())   break logical_or_510_true;
                        movebp            (8);
                        syntax_expression_statement(); 
                        movebp            (-8);
                        if(notequals())   break logical_or_510_true;
                        movebp            (8);
                        syntax_return_statement(); 
                        movebp            (-8);
                        if(notequals())   break logical_or_510_true;
                        loadi             (0);
                        if(always())      break logical_or_510_false;
} // logical_or_510_true:
                        loadi             (1);
} // logical_or_510_false:
                                             if_511_end: {
                                             if_511_next: {
                        if(equals())      break if_511_next;
                                                            //         syntax_expression_statement() ||
                                                            //         syntax_return_statement() ) {
                                                            // 
                                                            //         if (! token_advance_if(";") ) {
                        loadi             (4827);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_512_true: {
                                             logical_not_512_false: {
                        if(notequals())   break logical_not_512_false;
                        loadi             (1);
                        if(always())      break logical_not_512_true;
} // logical_not_512_false:
                        loadi             (0);
} // logical_not_512_true:
                                             if_513_end: {
                                             if_513_next: {
                        if(equals())      break if_513_next;
                                                            //             error_syntax("semicolon expected after statement");
                        loadi             (4829);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //         }
                                                            // 
                                                            //         return True;
} // if_513_next:
} // if_513_end:
                        loadi             (1);
                        if(always())      break syntax_statement_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_511_next:
} // if_511_end:
                        loadi             (0);
                        if(always())      break syntax_statement_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // statement-list
                                                            // //            statement statement-list
                                                            // //            statement
                                                            // //            
                                                            // syntax_statement_list() {
} // syntax_statement_end:
return;    }
function syntax_statement_list
(){
                                             syntax_statement_list_end: {
                                                            // 
                                                            //     if (! syntax_statement() ) {
                        movebp            (8);
                        syntax_statement(); 
                        movebp            (-8);
                                             logical_not_514_true: {
                                             logical_not_514_false: {
                        if(notequals())   break logical_not_514_false;
                        loadi             (1);
                        if(always())      break logical_not_514_true;
} // logical_not_514_false:
                        loadi             (0);
} // logical_not_514_true:
                                             if_515_end: {
                                             if_515_next: {
                        if(equals())      break if_515_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_statement_list_end;
                                                            //     }
                                                            // 
                                                            //     syntax_statement_list();
} // if_515_next:
} // if_515_end:
                        movebp            (8);
                        syntax_statement_list(); 
                        movebp            (-8);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_statement_list_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-argument-declaration
                                                            // //            type-specifier identifier
                                                            // //            type-specifier identifier []
                                                            // //
                                                            // syntax_function_argument_declaration(int argument_no) {
} // syntax_statement_list_end:
return;    }
function syntax_function_argument_declaration
(){
                                             syntax_function_argument_declaration_end: {
                                                            //     int argument_type;
                                                            //     char argument_name[Str_size];
                                                            // 
                                                            //     if (! syntax_type_specifier() ) {
                        movebp            (265);
                        syntax_type_specifier(); 
                        movebp            (-265);
                                             logical_not_516_true: {
                                             logical_not_516_false: {
                        if(notequals())   break logical_not_516_false;
                        loadi             (1);
                        if(always())      break logical_not_516_true;
} // logical_not_516_false:
                        loadi             (0);
} // logical_not_516_true:
                                             if_517_end: {
                                             if_517_next: {
                        if(equals())      break if_517_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_argument_declaration_end;
                                                            //     }
                                                            // 
                                                            //     if (! token_type_is(Token_t_identifier) ) {
} // if_517_next:
} // if_517_end:
                        loadi             (4);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_type_is();  
                        movebp            (-266);
                                             logical_not_518_true: {
                                             logical_not_518_false: {
                        if(notequals())   break logical_not_518_false;
                        loadi             (1);
                        if(always())      break logical_not_518_true;
} // logical_not_518_false:
                        loadi             (0);
} // logical_not_518_true:
                                             if_519_end: {
                                             if_519_next: {
                        if(equals())      break if_519_next;
                                                            //         error_syntax("identifier expected after type specifier in function definition");
                        loadi             (4864);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //     }
                                                            // 
                                                            //     copy(argument_name, token_text);
} // if_519_next:
} // if_519_end:
                        loadi             (2+BP);
                        store             (258+BP);
                        loadi             (-1049611+global);
                        store             (259+BP);
                        load              (259+BP);
                        store             (268+BP);
                        load              (258+BP);
                        store             (267+BP);
                        movebp            (267);
                        copy();           
                        movebp            (-267);
                                                            //     token_advance();
                        movebp            (265);
                        token_advance();  
                        movebp            (-265);
                                                            // 
                                                            //     if (token_advance_if("[")) {
                        loadi             (4928);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_advance_if(); 
                        movebp            (-266);
                                             if_520_end: {
                                             if_520_next: {
                        if(equals())      break if_520_next;
                                                            //         argument_type = Compiler_t_integer_pointer;
                        loadi             (0);
                        store             (1+BP);
                                                            // 
                                                            //         if (! token_advance_if("]") ) {
                        loadi             (4930);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        token_advance_if(); 
                        movebp            (-266);
                                             logical_not_521_true: {
                                             logical_not_521_false: {
                        if(notequals())   break logical_not_521_false;
                        loadi             (1);
                        if(always())      break logical_not_521_true;
} // logical_not_521_false:
                        loadi             (0);
} // logical_not_521_true:
                                             if_522_end: {
                                             if_522_next: {
                        if(equals())      break if_522_next;
                                                            //             error_syntax("closing bracket expected after array argument declaration");
                        loadi             (4932);
                        store             (258+BP);
                        load              (258+BP);
                        store             (266+BP);
                        movebp            (266);
                        error_syntax();   
                        movebp            (-266);
                                                            //         }
                                                            //     } else {
} // if_522_next:
} // if_522_end:
                        if(always())      break if_520_end;
} // if_520_next:
                                                            //         argument_type = Compiler_t_integer;
                        loadi             (1);
                        store             (1+BP);
                                                            //     }
                                                            // 
                                                            //     compiler_function_argument_declaration_item(argument_name, argument_type, argument_no + 1); // >>>>>>>>>>
} // if_520_end:
                        loadi             (2+BP);
                        store             (258+BP);
                        load              (1+BP);
                        store             (259+BP);
                        load              (0+BP);
                        store             (260+BP);
                        loadi             (1);
                        add               (260+BP);
                        store             (260+BP);
                        load              (260+BP);
                        store             (270+BP);
                        load              (259+BP);
                        store             (269+BP);
                        load              (258+BP);
                        store             (268+BP);
                        movebp            (268);
                        compiler_function_argument_declaration_item(); 
                        movebp            (-268);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_function_argument_declaration_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-argument-declaration-list
                                                            // //            function-argument-declaration , function-argument-declaration-list
                                                            // //            function-argument-declaration
                                                            // //
                                                            // syntax_function_argument_declaration_list(int argument_no) {
} // syntax_function_argument_declaration_end:
return;    }
function syntax_function_argument_declaration_list
(){
                                             syntax_function_argument_declaration_list_end: {
                                                            // 
                                                            //     if (! syntax_function_argument_declaration(argument_no) ) {
                        load              (0+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        syntax_function_argument_declaration(); 
                        movebp            (-9);
                                             logical_not_523_true: {
                                             logical_not_523_false: {
                        if(notequals())   break logical_not_523_false;
                        loadi             (1);
                        if(always())      break logical_not_523_true;
} // logical_not_523_false:
                        loadi             (0);
} // logical_not_523_true:
                                             if_524_end: {
                                             if_524_next: {
                        if(equals())      break if_524_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_argument_declaration_list_end;
                                                            //     }
                                                            // 
                                                            //     if (! token_advance_if(",") ) {
} // if_524_next:
} // if_524_end:
                        loadi             (4990);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_525_true: {
                                             logical_not_525_false: {
                        if(notequals())   break logical_not_525_false;
                        loadi             (1);
                        if(always())      break logical_not_525_true;
} // logical_not_525_false:
                        loadi             (0);
} // logical_not_525_true:
                                             if_526_end: {
                                             if_526_next: {
                        if(equals())      break if_526_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_function_argument_declaration_list_end;
                                                            //     }
                                                            // 
                                                            //     if (! syntax_function_argument_declaration_list(argument_no + 1) ) {
} // if_526_next:
} // if_526_end:
                        load              (0+BP);
                        store             (1+BP);
                        loadi             (1);
                        add               (1+BP);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        syntax_function_argument_declaration_list(); 
                        movebp            (-9);
                                             logical_not_527_true: {
                                             logical_not_527_false: {
                        if(notequals())   break logical_not_527_false;
                        loadi             (1);
                        if(always())      break logical_not_527_true;
} // logical_not_527_false:
                        loadi             (0);
} // logical_not_527_true:
                                             if_528_end: {
                                             if_528_next: {
                        if(equals())      break if_528_next;
                                                            //         error_syntax("function argument expected");
                        loadi             (4992);
                        store             (1+BP);
                        load              (1+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_528_next:
} // if_528_end:
                        loadi             (1);
                        if(always())      break syntax_function_argument_declaration_list_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-compound-statement
                                                            // //            { local-declaration-list statement-list } 
                                                            // //            { statement-list } 
                                                            // //
                                                            // syntax_function_compound_statement() {
} // syntax_function_argument_declaration_list_end:
return;    }
function syntax_function_compound_statement
(){
                                             syntax_function_compound_statement_end: {
                                                            //     
                                                            //     if (! token_advance_if("{") ) {
                        loadi             (5019);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_529_true: {
                                             logical_not_529_false: {
                        if(notequals())   break logical_not_529_false;
                        loadi             (1);
                        if(always())      break logical_not_529_true;
} // logical_not_529_false:
                        loadi             (0);
} // logical_not_529_true:
                                             if_530_end: {
                                             if_530_next: {
                        if(equals())      break if_530_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_compound_statement_end;
                                                            //     }
                                                            // 
                                                            //     syntax_local_declaration_list();
} // if_530_next:
} // if_530_end:
                        movebp            (8);
                        syntax_local_declaration_list(); 
                        movebp            (-8);
                                                            // 
                                                            //     compiler_function_compound_statement_locals_declared(); // >>>>>>>>>>
                        movebp            (8);
                        compiler_function_compound_statement_locals_declared(); 
                        movebp            (-8);
                                                            // 
                                                            //     syntax_statement_list();
                        movebp            (8);
                        syntax_statement_list(); 
                        movebp            (-8);
                                                            // 
                                                            //     if (! token_advance_if("}") ) {
                        loadi             (5021);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_advance_if(); 
                        movebp            (-9);
                                             logical_not_531_true: {
                                             logical_not_531_false: {
                        if(notequals())   break logical_not_531_false;
                        loadi             (1);
                        if(always())      break logical_not_531_true;
} // logical_not_531_false:
                        loadi             (0);
} // logical_not_531_true:
                                             if_532_end: {
                                             if_532_next: {
                        if(equals())      break if_532_next;
                                                            //         error_syntax("closing brace expected at end of function");
                        loadi             (5023);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     return True;
} // if_532_next:
} // if_532_end:
                        loadi             (1);
                        if(always())      break syntax_function_compound_statement_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // function-definition
                                                            // //            identifier( function-argument-declaration-list ) function-compound-statement
                                                            // //            identifier( ) function-compound-statement
                                                            // //
                                                            // syntax_function_definition() {
} // syntax_function_compound_statement_end:
return;    }
function syntax_function_definition
(){
                                             syntax_function_definition_end: {
                                                            //     char function_name[Str_size];
                                                            // 
                                                            //     if (! (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) ) {
                        loadi             (4);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_type_is();  
                        movebp            (-265);
                                             logical_and_533_true: {
                                             logical_and_533_false: {
                        if(equals())      break logical_and_533_false;
                        loadi             (5065);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_lookahead_text_is(); 
                        movebp            (-265);
                        if(equals())      break logical_and_533_false;
                        loadi             (1);
                        if(always())      break logical_and_533_true;
} // logical_and_533_false:
                        loadi             (0);
} // logical_and_533_true:
                                             logical_not_534_true: {
                                             logical_not_534_false: {
                        if(notequals())   break logical_not_534_false;
                        loadi             (1);
                        if(always())      break logical_not_534_true;
} // logical_not_534_false:
                        loadi             (0);
} // logical_not_534_true:
                                             if_535_end: {
                                             if_535_next: {
                        if(equals())      break if_535_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_function_definition_end;
                                                            //     }
                                                            // 
                                                            //     copy(function_name, token_text);
} // if_535_next:
} // if_535_end:
                        loadi             (0+BP);
                        store             (256+BP);
                        loadi             (-1049611+global);
                        store             (257+BP);
                        load              (257+BP);
                        store             (267+BP);
                        load              (256+BP);
                        store             (266+BP);
                        movebp            (266);
                        copy();           
                        movebp            (-266);
                                                            //     token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            //     token_advance();
                        movebp            (264);
                        token_advance();  
                        movebp            (-264);
                                                            // 
                                                            //     compiler_output_source_as_comment(); // >>>>>>>>>>
                        movebp            (264);
                        compiler_output_source_as_comment(); 
                        movebp            (-264);
                                                            // 
                                                            //     compiler_function_definition_begin(function_name); // >>>>>>>>>>
                        loadi             (0+BP);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        compiler_function_definition_begin(); 
                        movebp            (-265);
                                                            // 
                                                            //     syntax_function_argument_declaration_list(0);
                        loadi             (0);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        syntax_function_argument_declaration_list(); 
                        movebp            (-265);
                                                            // 
                                                            //     if (! token_advance_if(")") ) {
                        loadi             (5067);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        token_advance_if(); 
                        movebp            (-265);
                                             logical_not_536_true: {
                                             logical_not_536_false: {
                        if(notequals())   break logical_not_536_false;
                        loadi             (1);
                        if(always())      break logical_not_536_true;
} // logical_not_536_false:
                        loadi             (0);
} // logical_not_536_true:
                                             if_537_end: {
                                             if_537_next: {
                        if(equals())      break if_537_next;
                                                            //         error_syntax("closing parenthesis expected after function definintion");
                        loadi             (5069);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     if (! syntax_function_compound_statement() ) {
} // if_537_next:
} // if_537_end:
                        movebp            (264);
                        syntax_function_compound_statement(); 
                        movebp            (-264);
                                             logical_not_538_true: {
                                             logical_not_538_false: {
                        if(notequals())   break logical_not_538_false;
                        loadi             (1);
                        if(always())      break logical_not_538_true;
} // logical_not_538_false:
                        loadi             (0);
} // logical_not_538_true:
                                             if_539_end: {
                                             if_539_next: {
                        if(equals())      break if_539_next;
                                                            //         error_syntax("function body expected after function definintion");
                        loadi             (5125);
                        store             (256+BP);
                        load              (256+BP);
                        store             (265+BP);
                        movebp            (265);
                        error_syntax();   
                        movebp            (-265);
                                                            //     }
                                                            // 
                                                            //     compiler_function_definition_end(); // >>>>>>>>>>
} // if_539_next:
} // if_539_end:
                        movebp            (264);
                        compiler_function_definition_end(); 
                        movebp            (-264);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_function_definition_end;
                                                            // }
                                                            // 
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // global-declaration
                                                            // //            declaration
                                                            // //            function-definition
                                                            // //
                                                            // syntax_global_declaration() {
} // syntax_function_definition_end:
return;    }
function syntax_global_declaration
(){
                                             syntax_global_declaration_end: {
                                                            // 
                                                            //     if (syntax_declaration()) {
                        movebp            (8);
                        syntax_declaration(); 
                        movebp            (-8);
                                             if_540_end: {
                                             if_540_next: {
                        if(equals())      break if_540_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_global_declaration_end;
                                                            //     }
                                                            // 
                                                            //     if (syntax_function_definition()) {
} // if_540_next:
} // if_540_end:
                        movebp            (8);
                        syntax_function_definition(); 
                        movebp            (-8);
                                             if_541_end: {
                                             if_541_next: {
                        if(equals())      break if_541_next;
                                                            //         return True;
                        loadi             (1);
                        if(always())      break syntax_global_declaration_end;
                                                            //     }
                                                            // 
                                                            //     return False;
} // if_541_next:
} // if_541_end:
                        loadi             (0);
                        if(always())      break syntax_global_declaration_end;
                                                            // }
                                                            // // ---------------------------------------------------------------------------
                                                            // // global-declaration-list
                                                            // //            global-declaration global-declaration-list
                                                            // //            global-declaration
                                                            // //
                                                            // syntax_global_declaration_list() {
} // syntax_global_declaration_end:
return;    }
function syntax_global_declaration_list
(){
                                             syntax_global_declaration_list_end: {
                                                            // 
                                                            //     if (! syntax_global_declaration()) {
                        movebp            (8);
                        syntax_global_declaration(); 
                        movebp            (-8);
                                             logical_not_542_true: {
                                             logical_not_542_false: {
                        if(notequals())   break logical_not_542_false;
                        loadi             (1);
                        if(always())      break logical_not_542_true;
} // logical_not_542_false:
                        loadi             (0);
} // logical_not_542_true:
                                             if_543_end: {
                                             if_543_next: {
                        if(equals())      break if_543_next;
                                                            //         return False;
                        loadi             (0);
                        if(always())      break syntax_global_declaration_list_end;
                                                            //     }
                                                            // 
                                                            //     syntax_global_declaration_list();
} // if_543_next:
} // if_543_end:
                        movebp            (8);
                        syntax_global_declaration_list(); 
                        movebp            (-8);
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_global_declaration_list_end;
                                                            // }
                                                            // 
                                                            // // ---------------------------------------------------------------------------
                                                            // // program
                                                            // //            global-declaration-list
                                                            // //
                                                            // syntax_program() {
} // syntax_global_declaration_list_end:
return;    }
function syntax_program
(){
                                             syntax_program_end: {
                                                            //     token_advance();
                        movebp            (8);
                        token_advance();  
                        movebp            (-8);
                                                            // 
                                                            //     compiler_program_begin(); // >>>>>>>>>>
                        movebp            (8);
                        compiler_program_begin(); 
                        movebp            (-8);
                                                            // 
                                                            //     if (! syntax_global_declaration_list()) {
                        movebp            (8);
                        syntax_global_declaration_list(); 
                        movebp            (-8);
                                             logical_not_544_true: {
                                             logical_not_544_false: {
                        if(notequals())   break logical_not_544_false;
                        loadi             (1);
                        if(always())      break logical_not_544_true;
} // logical_not_544_false:
                        loadi             (0);
} // logical_not_544_true:
                                             if_545_end: {
                                             if_545_next: {
                        if(equals())      break if_545_next;
                                                            //         error_syntax("function or variable declaration expected");
                        loadi             (5175);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     if (! token_type_is(Token_t_eof)) {
} // if_545_next:
} // if_545_end:
                        loadi             (7);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        token_type_is();  
                        movebp            (-9);
                                             logical_not_546_true: {
                                             logical_not_546_false: {
                        if(notequals())   break logical_not_546_false;
                        loadi             (1);
                        if(always())      break logical_not_546_true;
} // logical_not_546_false:
                        loadi             (0);
} // logical_not_546_true:
                                             if_547_end: {
                                             if_547_next: {
                        if(equals())      break if_547_next;
                                                            //         error_syntax("end of file expected");
                        loadi             (5217);
                        store             (0+BP);
                        load              (0+BP);
                        store             (9+BP);
                        movebp            (9);
                        error_syntax();   
                        movebp            (-9);
                                                            //     }
                                                            // 
                                                            //     compiler_output_source_as_comment();
} // if_547_next:
} // if_547_end:
                        movebp            (8);
                        compiler_output_source_as_comment(); 
                        movebp            (-8);
                                                            //     compiler_program_end(); // >>>>>>>>>>
                        movebp            (8);
                        compiler_program_end(); 
                        movebp            (-8);
                                                            // 
                                                            //     return True;
                        loadi             (1);
                        if(always())      break syntax_program_end;
                                                            // }
                                                            // 
                                                            // #ifndef _MSC_VER
                                                            // #line 2 "bminus.c"
                                                            // #endif
                                                            // 
                                                            // #ifdef _MSC_VER
                                                            // #include "builtinfuncs_ansic.h"
                                                            // #include "globals.h"
                                                            // #include "stringlib.h" 
                                                            // #include "errormessages.h"
                                                            // #include "preprocessor.h" 
                                                            // #include "token.h" 
                                                            // // #include "target_cvirtualmachine.h" 
                                                            // #include "target_javascript.h" 
                                                            // // #include "target_linuxassemblerx86.h" 
                                                            // #include "compiler.h" 
                                                            // #include "syntax.h" 
                                                            // #endif
                                                            // 
                                                            // 
                                                            // main() {
} // syntax_program_end:
return;    }
function main
(){
                                             main_end: {
                                                            //     preprocessor_init();
                        movebp            (8);
                        preprocessor_init(); 
                        movebp            (-8);
                                                            //     token_init();
                        movebp            (8);
                        token_init();     
                        movebp            (-8);
                                                            //     compiler_init();
                        movebp            (8);
                        compiler_init();  
                        movebp            (-8);
                                                            //     target_init();
                        movebp            (8);
                        target_init();    
                        movebp            (-8);
                                                            // 
                                                            //     syntax_program();
                        movebp            (8);
                        syntax_program(); 
                        movebp            (-8);
                                                            // 
                                                            //     exit(0);
                        loadi             (0);
                        abortProgram      (A);
                                                            // 
                                                            // }
                                                            // 
} // main_end:
return;    }


function init_memory() {
global = 8411786;

BP = 5238;

RAM = [
"F".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"L".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"L".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"C".charCodeAt(0),
"o".charCodeAt(0),
"m".charCodeAt(0),
"p".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"S".charCodeAt(0),
"y".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"x".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"P".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"E".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"o".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
":".charCodeAt(0),
" ".charCodeAt(0),
0,
"I".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
0,
0,
"N".charCodeAt(0),
"/".charCodeAt(0),
"A".charCodeAt(0),
0,
0,
"l".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"o".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
0,
0,
"#".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"2".charCodeAt(0),
" ".charCodeAt(0),
0,
0,
"#".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"2".charCodeAt(0),
" ".charCodeAt(0),
0,
"#".charCodeAt(0),
0,
"i".charCodeAt(0),
"n".charCodeAt(0),
"v".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"a".charCodeAt(0),
"b".charCodeAt(0),
"c".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"j".charCodeAt(0),
"k".charCodeAt(0),
"l".charCodeAt(0),
"m".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"q".charCodeAt(0),
"r".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"v".charCodeAt(0),
"w".charCodeAt(0),
"x".charCodeAt(0),
"y".charCodeAt(0),
"z".charCodeAt(0),
"A".charCodeAt(0),
"B".charCodeAt(0),
"C".charCodeAt(0),
"D".charCodeAt(0),
"E".charCodeAt(0),
"F".charCodeAt(0),
"G".charCodeAt(0),
"H".charCodeAt(0),
"I".charCodeAt(0),
"J".charCodeAt(0),
"K".charCodeAt(0),
"L".charCodeAt(0),
"M".charCodeAt(0),
"N".charCodeAt(0),
"O".charCodeAt(0),
"P".charCodeAt(0),
"Q".charCodeAt(0),
"R".charCodeAt(0),
"S".charCodeAt(0),
"T".charCodeAt(0),
"U".charCodeAt(0),
"V".charCodeAt(0),
"W".charCodeAt(0),
"X".charCodeAt(0),
"Y".charCodeAt(0),
"Z".charCodeAt(0),
"0".charCodeAt(0),
"1".charCodeAt(0),
"2".charCodeAt(0),
"3".charCodeAt(0),
"4".charCodeAt(0),
"5".charCodeAt(0),
"6".charCodeAt(0),
"7".charCodeAt(0),
"8".charCodeAt(0),
"9".charCodeAt(0),
0,
"_".charCodeAt(0),
"a".charCodeAt(0),
"b".charCodeAt(0),
"c".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"j".charCodeAt(0),
"k".charCodeAt(0),
"l".charCodeAt(0),
"m".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"q".charCodeAt(0),
"r".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"v".charCodeAt(0),
"w".charCodeAt(0),
"x".charCodeAt(0),
"y".charCodeAt(0),
"z".charCodeAt(0),
"A".charCodeAt(0),
"B".charCodeAt(0),
"C".charCodeAt(0),
"D".charCodeAt(0),
"E".charCodeAt(0),
"F".charCodeAt(0),
"G".charCodeAt(0),
"H".charCodeAt(0),
"I".charCodeAt(0),
"J".charCodeAt(0),
"K".charCodeAt(0),
"L".charCodeAt(0),
"M".charCodeAt(0),
"N".charCodeAt(0),
"O".charCodeAt(0),
"P".charCodeAt(0),
"Q".charCodeAt(0),
"R".charCodeAt(0),
"S".charCodeAt(0),
"T".charCodeAt(0),
"U".charCodeAt(0),
"V".charCodeAt(0),
"W".charCodeAt(0),
"X".charCodeAt(0),
"Y".charCodeAt(0),
"Z".charCodeAt(0),
0,
" ".charCodeAt(0),
0,
" ".charCodeAt(0),
0,
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
0,
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"0".charCodeAt(0),
"1".charCodeAt(0),
"2".charCodeAt(0),
"3".charCodeAt(0),
"4".charCodeAt(0),
"5".charCodeAt(0),
"6".charCodeAt(0),
"7".charCodeAt(0),
"8".charCodeAt(0),
"9".charCodeAt(0),
0,
0,
"<".charCodeAt(0),
">".charCodeAt(0),
"=".charCodeAt(0),
"+".charCodeAt(0),
"-".charCodeAt(0),
"/".charCodeAt(0),
"*".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
"[".charCodeAt(0),
"]".charCodeAt(0),
"{".charCodeAt(0),
"}".charCodeAt(0),
"!".charCodeAt(0),
";".charCodeAt(0),
",".charCodeAt(0),
0,
0,
0,
0,
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
";".charCodeAt(0),
0,
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"X".charCodeAt(0),
";".charCodeAt(0),
0,
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"B".charCodeAt(0),
"P".charCodeAt(0),
";".charCodeAt(0),
0,
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"[".charCodeAt(0),
"]".charCodeAt(0),
";".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"+".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"u".charCodeAt(0),
"b".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"-".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"u".charCodeAt(0),
"l".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"p".charCodeAt(0),
"l".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"*".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"v".charCodeAt(0),
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"/".charCodeAt(0),
" ".charCodeAt(0),
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"n".charCodeAt(0),
"]".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"|".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"x".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"X".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"o".charCodeAt(0),
"v".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"p".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"B".charCodeAt(0),
"P".charCodeAt(0),
" ".charCodeAt(0),
"+".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
">".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"g".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"<".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"A".charCodeAt(0),
" ".charCodeAt(0),
"!".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"w".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
0,
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"g".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"b".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
";".charCodeAt(0),
0,
0,
0,
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"_".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"y".charCodeAt(0),
"(".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
0,
"g".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"b".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
0,
";".charCodeAt(0),
0,
0,
"B".charCodeAt(0),
"P".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
0,
";".charCodeAt(0),
0,
0,
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"[".charCodeAt(0),
0,
"\"".charCodeAt(0),
"\\".charCodeAt(0),
" ".charCodeAt(0),
"\"".charCodeAt(0),
0,
".".charCodeAt(0),
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"A".charCodeAt(0),
"t".charCodeAt(0),
"(".charCodeAt(0),
"0".charCodeAt(0),
")".charCodeAt(0),
0,
"\"".charCodeAt(0),
" ".charCodeAt(0),
"\"".charCodeAt(0),
0,
".".charCodeAt(0),
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"A".charCodeAt(0),
"t".charCodeAt(0),
"(".charCodeAt(0),
"0".charCodeAt(0),
")".charCodeAt(0),
0,
",".charCodeAt(0),
0,
"]".charCodeAt(0),
";".charCodeAt(0),
0,
0,
"f".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"i".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
0,
";".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
" ".charCodeAt(0),
"<".charCodeAt(0),
" ".charCodeAt(0),
0,
";".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
" ".charCodeAt(0),
"+".charCodeAt(0),
"+".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
0,
"R".charCodeAt(0),
"A".charCodeAt(0),
"M".charCodeAt(0),
"[".charCodeAt(0),
"i".charCodeAt(0),
"]".charCodeAt(0),
" ".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"0".charCodeAt(0),
";".charCodeAt(0),
0,
"}".charCodeAt(0),
0,
"}".charCodeAt(0),
0,
0,
0,
"/".charCodeAt(0),
"/".charCodeAt(0),
" ".charCodeAt(0),
0,
0,
0,
" ".charCodeAt(0),
0,
" ".charCodeAt(0),
0,
"i".charCodeAt(0),
"f".charCodeAt(0),
"(".charCodeAt(0),
0,
"(".charCodeAt(0),
")".charCodeAt(0),
")".charCodeAt(0),
0,
" ".charCodeAt(0),
0,
";".charCodeAt(0),
0,
"+".charCodeAt(0),
"g".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"b".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
0,
"+".charCodeAt(0),
"g".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"b".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
0,
"+".charCodeAt(0),
"X".charCodeAt(0),
0,
"+".charCodeAt(0),
"B".charCodeAt(0),
"P".charCodeAt(0),
0,
"+".charCodeAt(0),
"B".charCodeAt(0),
"P".charCodeAt(0),
"+".charCodeAt(0),
"X".charCodeAt(0),
0,
"X".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
")".charCodeAt(0),
";".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
")".charCodeAt(0),
";".charCodeAt(0),
0,
"(".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"a".charCodeAt(0),
"l".charCodeAt(0),
"w".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
"s".charCodeAt(0),
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
0,
"a".charCodeAt(0),
"l".charCodeAt(0),
"w".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
"s".charCodeAt(0),
0,
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"l".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
0,
"g".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
0,
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
0,
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"x".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
0,
"a".charCodeAt(0),
"d".charCodeAt(0),
"d".charCodeAt(0),
0,
"s".charCodeAt(0),
"u".charCodeAt(0),
"b".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
0,
"m".charCodeAt(0),
"u".charCodeAt(0),
"l".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"p".charCodeAt(0),
"l".charCodeAt(0),
"y".charCodeAt(0),
0,
"d".charCodeAt(0),
"i".charCodeAt(0),
"v".charCodeAt(0),
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
0,
"(".charCodeAt(0),
")".charCodeAt(0),
"{".charCodeAt(0),
0,
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
0,
"m".charCodeAt(0),
"o".charCodeAt(0),
"v".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"p".charCodeAt(0),
0,
"(".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
0,
"m".charCodeAt(0),
"o".charCodeAt(0),
"v".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"p".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
0,
0,
":".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
0,
"}".charCodeAt(0),
" ".charCodeAt(0),
"/".charCodeAt(0),
"/".charCodeAt(0),
" ".charCodeAt(0),
0,
":".charCodeAt(0),
0,
":".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"(".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"{".charCodeAt(0),
0,
0,
"b".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
";".charCodeAt(0),
" ".charCodeAt(0),
"}".charCodeAt(0),
" ".charCodeAt(0),
"/".charCodeAt(0),
"/".charCodeAt(0),
" ".charCodeAt(0),
0,
":".charCodeAt(0),
0,
"p".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"I".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"N".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"b".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
0,
"(".charCodeAt(0),
"A".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"a".charCodeAt(0),
"b".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"t".charCodeAt(0),
"P".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"m".charCodeAt(0),
0,
"(".charCodeAt(0),
"A".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"A".charCodeAt(0),
"=".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"C".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"F".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
"m".charCodeAt(0),
"S".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
0,
"(".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"p".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"C".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"T".charCodeAt(0),
"o".charCodeAt(0),
"S".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"o".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
0,
"(".charCodeAt(0),
"A".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"p".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"C".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"C".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"T".charCodeAt(0),
"o".charCodeAt(0),
"S".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
0,
"(".charCodeAt(0),
"A".charCodeAt(0),
")".charCodeAt(0),
";".charCodeAt(0),
0,
"o".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"(".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
0,
0,
0,
0,
"n".charCodeAt(0),
"a".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"o".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"y".charCodeAt(0),
"m".charCodeAt(0),
"b".charCodeAt(0),
"o".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"b".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
0,
"n".charCodeAt(0),
"a".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"t".charCodeAt(0),
"o".charCodeAt(0),
"o".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"p".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"a".charCodeAt(0),
"b".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
0,
"_".charCodeAt(0),
0,
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"u".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"g".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"z".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"o".charCodeAt(0),
0,
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
0,
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"u".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"+".charCodeAt(0),
0,
"-".charCodeAt(0),
0,
"!".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"_".charCodeAt(0),
"n".charCodeAt(0),
"o".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"*".charCodeAt(0),
0,
"/".charCodeAt(0),
0,
"+".charCodeAt(0),
0,
"-".charCodeAt(0),
0,
"c".charCodeAt(0),
"o".charCodeAt(0),
"m".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"=".charCodeAt(0),
"=".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"!".charCodeAt(0),
"=".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"<".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"<".charCodeAt(0),
"=".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
">".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
">".charCodeAt(0),
"=".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"_".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"l".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"_".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"r".charCodeAt(0),
"u".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"f".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"l".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"n".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"u".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"i".charCodeAt(0),
"f".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"n".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"t".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"_".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"f".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"f".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
"(".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
")".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"f".charCodeAt(0),
"p".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"p".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"p".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
0,
",".charCodeAt(0),
0,
"f".charCodeAt(0),
"p".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"w".charCodeAt(0),
"o".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"g".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"s".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"o".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
0,
"s".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"g".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"p".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
"c".charCodeAt(0),
" ".charCodeAt(0),
"m".charCodeAt(0),
"u".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"o".charCodeAt(0),
"u".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"d".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"u".charCodeAt(0),
"g".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"u".charCodeAt(0),
"g".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"b".charCodeAt(0),
"u".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"[".charCodeAt(0),
0,
",".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"[".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
0,
"]".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
" ".charCodeAt(0),
"!".charCodeAt(0),
" ".charCodeAt(0),
"+".charCodeAt(0),
" ".charCodeAt(0),
"-".charCodeAt(0),
" ".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
" ".charCodeAt(0),
"*".charCodeAt(0),
" ".charCodeAt(0),
"/".charCodeAt(0),
" ".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
" ".charCodeAt(0),
"+".charCodeAt(0),
" ".charCodeAt(0),
"-".charCodeAt(0),
" ".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"d".charCodeAt(0),
"d".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"v".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
" ".charCodeAt(0),
"<".charCodeAt(0),
" ".charCodeAt(0),
"<".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
">".charCodeAt(0),
" ".charCodeAt(0),
">".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
" ".charCodeAt(0),
"=".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
"!".charCodeAt(0),
"=".charCodeAt(0),
" ".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
"&".charCodeAt(0),
"&".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
0,
"&".charCodeAt(0),
"&".charCodeAt(0),
0,
"|".charCodeAt(0),
"|".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"h".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"g".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"-".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
0,
"|".charCodeAt(0),
"|".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
"l".charCodeAt(0),
0,
"r".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
"u".charCodeAt(0),
"r".charCodeAt(0),
"n".charCodeAt(0),
0,
"=".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"n".charCodeAt(0),
0,
"[".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
0,
"]".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
0,
"=".charCodeAt(0),
0,
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"n".charCodeAt(0),
0,
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"y".charCodeAt(0),
"w".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"d".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"w".charCodeAt(0),
"h".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
0,
"i".charCodeAt(0),
"f".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"y".charCodeAt(0),
"w".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"d".charCodeAt(0),
0,
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
0,
"e".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"l".charCodeAt(0),
"s".charCodeAt(0),
"e".charCodeAt(0),
0,
"=".charCodeAt(0),
0,
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"q".charCodeAt(0),
"u".charCodeAt(0),
"a".charCodeAt(0),
"l".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"g".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
",".charCodeAt(0),
0,
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"m".charCodeAt(0),
"m".charCodeAt(0),
"a".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
"c".charCodeAt(0),
"h".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
0,
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"y".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"[".charCodeAt(0),
0,
";".charCodeAt(0),
0,
"s".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"g".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"]".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
";".charCodeAt(0),
0,
"s".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
0,
"{".charCodeAt(0),
0,
"o".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
" ".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"y".charCodeAt(0),
"w".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
"d".charCodeAt(0),
0,
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"}".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"l".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
0,
";".charCodeAt(0),
0,
"s".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"{".charCodeAt(0),
0,
"}".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"m".charCodeAt(0),
"p".charCodeAt(0),
"o".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
";".charCodeAt(0),
0,
"s".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"i".charCodeAt(0),
"c".charCodeAt(0),
"o".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"t".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
0,
"i".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"t".charCodeAt(0),
"y".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"s".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"i".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"[".charCodeAt(0),
0,
"]".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"k".charCodeAt(0),
"e".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"g".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
",".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"g".charCodeAt(0),
"u".charCodeAt(0),
"m".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"{".charCodeAt(0),
0,
"}".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"c".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"(".charCodeAt(0),
0,
")".charCodeAt(0),
0,
"c".charCodeAt(0),
"l".charCodeAt(0),
"o".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"g".charCodeAt(0),
" ".charCodeAt(0),
"p".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"e".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"h".charCodeAt(0),
"e".charCodeAt(0),
"s".charCodeAt(0),
"i".charCodeAt(0),
"s".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"b".charCodeAt(0),
"o".charCodeAt(0),
"d".charCodeAt(0),
"y".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"a".charCodeAt(0),
"f".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"i".charCodeAt(0),
"n".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
0,
"f".charCodeAt(0),
"u".charCodeAt(0),
"n".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"r".charCodeAt(0),
" ".charCodeAt(0),
"v".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"i".charCodeAt(0),
"a".charCodeAt(0),
"b".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"d".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"l".charCodeAt(0),
"a".charCodeAt(0),
"r".charCodeAt(0),
"a".charCodeAt(0),
"t".charCodeAt(0),
"i".charCodeAt(0),
"o".charCodeAt(0),
"n".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0,
"e".charCodeAt(0),
"n".charCodeAt(0),
"d".charCodeAt(0),
" ".charCodeAt(0),
"o".charCodeAt(0),
"f".charCodeAt(0),
" ".charCodeAt(0),
"f".charCodeAt(0),
"i".charCodeAt(0),
"l".charCodeAt(0),
"e".charCodeAt(0),
" ".charCodeAt(0),
"e".charCodeAt(0),
"x".charCodeAt(0),
"p".charCodeAt(0),
"e".charCodeAt(0),
"c".charCodeAt(0),
"t".charCodeAt(0),
"e".charCodeAt(0),
"d".charCodeAt(0),
0
];

for (i = 5238; i < 8411786; i ++) {
RAM[i] = 0;
}
}
